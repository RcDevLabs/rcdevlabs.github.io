<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RcDev Labs</title>
  <icon>https://www.gravatar.com/avatar/3d41127e06bd979e3a34b757e695fc59</icon>
  <subtitle>Desenvolvendo idéias</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rcdevlabs.github.io/"/>
  <updated>2022-08-28T23:47:52.825Z</updated>
  <id>http://rcdevlabs.github.io/</id>
  
  <author>
    <name>romuloctba</name>
    <email>romuloctba@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Yarn 3: Monorepo com Zero-Install</title>
    <link href="http://rcdevlabs.github.io/2022/08/27/yarn-3-monorepo-com-zero-install/"/>
    <id>http://rcdevlabs.github.io/2022/08/27/yarn-3-monorepo-com-zero-install/</id>
    <published>2022-08-28T02:29:20.000Z</published>
    <updated>2022-08-28T23:47:52.825Z</updated>
    
    <content type="html"><![CDATA[<p><img src="yarn-3-monorepo-com-zero-install.jpg" alt="yarn-3-monorepo-com-zero-install"></p><h1 id="A-demanda"><a href="#A-demanda" class="headerlink" title="A demanda"></a>A demanda</h1><ol><li>Criando um MonoRepo com Yarn Workspaces.</li></ol><p>A primeira vez que utilizei Worskspaces do Yarn foi por conta do <a href="https://twitter.com/ohager" target="_blank" rel="noopener">@ohager5</a>, que criou o  nosso projeto <a href="https://github.com/Burst-Busters/bVotal" target="_blank" rel="noopener">BVotal</a>, no hackathon que participamos:</p><p>No bVotal havia 2 services e 2 fronts (um dashboard, um para o usuário).<br>Com o uso de workspaces, ficaram todos no mesmo repositório, e com um pouco de <em>gitflow</em>, trabalhamos ao mesmo tempo, e com muito mais agilidade do que se fosse necessário ficar <em>pullando changes</em> de cada proj o tempo todo, conforme novos commits iam sendo adicionados em cada service, ou front.</p><p>Foi uma forma legal de trabalharmos no mesmo repositório e também compartilhando as dependências.</p><h4 id="Resultado"><a href="#Resultado" class="headerlink" title="Resultado:"></a>Resultado:</h4><ul><li>Exemplo deste post sobre Yarn Workspaces: <a href="https://github.com/romuloctba/yarn-multiple-workspaces-blog-example" target="_blank" rel="noopener">no Github</a></li></ul><h3 id="Passo-1-Yarn"><a href="#Passo-1-Yarn" class="headerlink" title="Passo 1. Yarn"></a>Passo 1. Yarn</h3><ul><li>Estou usando Node 18</li></ul><p>Vamos garantir que estamos com a versão mais recente do yarn instalada.</p><p>Se não tiver yarn, instale:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global yarn</span><br></pre></td></tr></table></figure></p><p>Se tiver, atualize:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ corepack enable</span><br><span class="line">$ yarn set version stable</span><br></pre></td></tr></table></figure></p><h3 id="Passo-2-Criando-o-Workspace"><a href="#Passo-2-Criando-o-Workspace" class="headerlink" title="Passo 2. Criando o Workspace"></a>Passo 2. Criando o Workspace</h3><p>Escolha uma pasta pro projeto.<br>Vamos criar como um workspace, onde teremos subprojetos que <strong><em>compartilham as dependências</em></strong> instaladas.</p><p>Também é interessante que tudo que precisamos para o projeto ficará no mesmo Repositorio GIT. POR EXEMPLO:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── package.json</span><br><span class="line">├── packages</span><br><span class="line">|  ├── Service1</span><br><span class="line">|  ├── Service2</span><br><span class="line">|  ├── AlgumaLib</span><br><span class="line">|  ├── Front01</span><br><span class="line">|  ├── Front02</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure></p><ul><li><p>Inicie um novo projeto Yarn 2</p><figure class="highlight plain"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn init -2</span><br></pre></td></tr></table></figure></li><li><p>Edite o <code>package.json</code> para incluir a propriedade <code>workspaces</code>. O meu ficou assim:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"yarn-2-rcdevlabs-blog"</span>,</span><br><span class="line">  <span class="attr">"packageManager"</span>: <span class="string">"yarn@3.2.2"</span>,</span><br><span class="line">  <span class="attr">"workspaces"</span>: [</span><br><span class="line">    <span class="string">"packages/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Basicamente estamos dizendo: “Olha, senhor Yarn…. Esse projetão tem vários wokspaces, e eles ficam na pasta packages.”</p></li><li><p>crie o diretório packages</p><figure class="highlight plain"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir packages</span><br><span class="line">$ touch packages/.gitkeep</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Aqui podemos realizar o primeiro commit do projeto.<br>A partir de agora, criaremos nossas aplicações (services, bff, frontend) na pasta <code>packages</code><br>(o .gitkeep foi adicionado apenas para seu commit ficar bonitinho)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;chore(base): basic project-repo structure&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Pode notar que não teremos pasta <em>node_modules</em> no projeto!</p></blockquote><h2 id="quick-note-sobre-zero-installs"><a href="#quick-note-sobre-zero-installs" class="headerlink" title="quick note sobre zero-installs"></a>quick note sobre zero-installs</h2><p><strong>Atenção</strong>: Veja que a pasta .yarn tem <em>uma pá de coisa</em> e está sendo enviada ao GIT, mas tá tudo bem.<br>Isso é uma feature do Yarn PnP - Plug n Play - chamada “Zero-Install”.</p><p>A idéia é que dê pra rodar o projeto logo após clonar, sem precisar baixar as dependências. Ousado.</p><blockquote><p>Pode notar que não teremos pasta <em>node_modules</em> no projeto!<br>Leia mais sobre o <a href="https://yarnpkg.com/features/zero-installs" target="_blank" rel="noopener">Zero-Installs Aqui</a></p></blockquote><hr><h2 id="Passo-3-Crie-novos-componentes-do-seu-projeto"><a href="#Passo-3-Crie-novos-componentes-do-seu-projeto" class="headerlink" title="Passo 3: Crie novos componentes do seu projeto"></a>Passo 3: Crie novos componentes do seu projeto</h2><ul><li>Como exemplo,  vamos criar uma novo service usando  <a href="https://nestjs.com" target="_blank" rel="noopener">NestJs</a><figure class="highlight plain"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx @nestjs/cli new packages/hello-service --skip-git</span><br></pre></td></tr></table></figure></li></ul><p>Lembrando de adicionar o <code>--skip-git</code>, pois nosso repositório GIT já existe, e fica fora do BFF.</p><ul><li><p>adicione a sessão <strong>scripts</strong> ao package.json, e vamos criar um atalho para rodar o modo desenvolvimento do NestJs.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"yarn-2-rcdevlabs-blog"</span>,</span><br><span class="line">  <span class="attr">"packageManager"</span>: <span class="string">"yarn@3.2.2"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"hsvc:dev"</span>: <span class="string">"yarn workspace hello-service start:dev"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"workspaces"</span>: [</span><br><span class="line">    <span class="string">"packages/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vamos ver se está rodando.</p></li><li>Vamos mandar instalar as dependencias<ul><li>passando o parametro <code>workspace [name]</code> antes do comando.</li></ul></li><li>e depois rodar o script que criamos.<figure class="highlight plain"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn workspace hello-service install</span><br><span class="line">$ yarn hsvc:dev</span><br></pre></td></tr></table></figure></li></ul><blockquote><p> <a href="http://localhost:3000](http://localhost:3000)" target="_blank" rel="noopener">http://localhost:3000](http://localhost:3000)</a><br> conferir o “Hello Word” do NestJs.</p></blockquote><p>O segundo commit traz o service<br><figure class="highlight plain"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add packages</span><br><span class="line">$ git commit -m &quot;feat(hello): new nestjs project as hello service package&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>Ops<br>Para funcionar com o intelisense, precisamos instalar algumas dependencias no nosso projeto yarn. Os comandos abaixo instalam, como devDependencies, no projeto-raíz:<br><figure class="highlight plain"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D typescript</span><br><span class="line">$ yarn add -D prettier</span><br><span class="line">$ yarn add -D ts-node</span><br><span class="line">$ yarn dlx @yarnpkg/sdks vscode</span><br></pre></td></tr></table></figure></p></blockquote><p>Depois, vamos criar/editar uma configuração para o nosso Workspace<br><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"typescript.tsdk"</span>: <span class="string">".yarn/sdks/typescript/lib"</span>,</span><br><span class="line">  <span class="attr">"search.exclude"</span>: &#123;</span><br><span class="line">    <span class="attr">"**/.yarn"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/.pnp.*"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>após essas alterações, reload a janela: ctrl/command shift p : reload window [enter].<br>Se pedir para instalar o plugin ZipFs, aceitar</p></blockquote><ul><li><p>Se algum arquivo estiver com erro nos imports, pode ser queo Vscode esteja interpretando o arquivo com a versão errada do TS. Ajuste assim:</p><figure class="highlight plain"><figcaption><span>vscode</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctrl + shift + p</span><br><span class="line">&gt;TypeScript: Select TypeScript Version</span><br><span class="line"></span><br><span class="line">--&gt; escolha `Workspace Version`</span><br></pre></td></tr></table></figure></li><li><p>Uma vez que não haja mais erro, podemos commitar - mas só o que não estiver na pasta packages</p><figure class="highlight plain"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add &apos;:!packages&apos; # adiciona tudo que não está na pasta packages</span><br><span class="line">$ git commit -m &quot;chore(yarn): add ts, prettier and ts-node&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Passo-4-Plug-n-Play-Zero-Install-MESMO"><a href="#Passo-4-Plug-n-Play-Zero-Install-MESMO" class="headerlink" title="Passo 4: Plug n Play Zero Install MESMO?"></a>Passo 4: Plug n Play Zero Install MESMO?</h2><ul><li>Clone seu repositório em outra pasta, e rode diretamente (sem rodar install)<figure class="highlight plain"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn install</span><br><span class="line">$ yarn hsvc:dev</span><br></pre></td></tr></table></figure></li></ul><p>Bom, a gente até rodou <code>yarn install</code>, mas veja que nada foi baixado. Apenas a dependência <code>@nestjs/core</code> foi buildada, a partir da própria <code>.yarn/cache</code>.</p><h1 id="E-Vale-a-Pena"><a href="#E-Vale-a-Pena" class="headerlink" title="E Vale a Pena?"></a>E Vale a Pena?</h1><p>Olha, pra comparar eu usei o <code>npm install</code> no mesmo projeto, e olha só o tamanho da pasta node_modules</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ du -hs node_modules/</span><br><span class="line">339M    node_modules/</span><br></pre></td></tr></table></figure><p>Levando em conta que o projeto <code>zero-installs</code> foi upado comprimido ao git com 70mb com todas as dependências, e apenas buildou o @nestjs/core localmente… O que vc achou?</p><p>Diz aí nos comentários.</p><hr><h2 id="Aviso-Consideracoes-de-seguranca"><a href="#Aviso-Consideracoes-de-seguranca" class="headerlink" title="Aviso: Considerações de segurança."></a>Aviso: Considerações de segurança.</h2><p>Conforme avisa o site do <a href="https://yarnpkg.com/features/zero-installs#does-it-have-security-implications" target="_blank" rel="noopener">Yarn</a>, se o projeto receber PRs de pessoas externas ao time, vale rodar um passo adicionar durante a <em>Pipeline</em>: <code>$ yarn install --check-cache</code>. Com isso, yarn baixa novamente as dependências pra conferir o checksum, emitindo um alerta caso algo suspeito.</p><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>Bom, essa é a estrutura do MonoRepo usando Yarn Workspaces.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── package.json</span><br><span class="line">├── packages</span><br><span class="line">|  ├── Service1</span><br><span class="line">|  ├── Service2</span><br><span class="line">|  ├── AlgumaLib</span><br><span class="line">|  ├── Front01</span><br><span class="line">|  ├── Front02</span><br><span class="line">└── yarn.lock</span><br><span class="line"></span><br><span class="line"># e mais os *dotfiles/folders*</span><br><span class="line">└── .editorconfig</span><br><span class="line">└── .gitignore</span><br><span class="line">└── .pnp.cjs</span><br><span class="line">└── .pnp.loader.mjs</span><br><span class="line">└── .yarn</span><br><span class="line">└── .yarnrc.yml</span><br></pre></td></tr></table></figure></p><p>Utilizando a funcionalidade de <a href="https://yarnpkg.com/features/workspaces" target="_blank" rel="noopener"><em>workspaces</em> do Yarn</a> conseguimos ter todos os diferentes pacotes do nosso projeto unificados em um único repositório de projeto.</p><p>Existem algumas outras características ao trabalhar com workspaces, mas cobrí-las foge do objetivo desta série.</p><p>Outra feature bacaníssima do modo “Plug and Play” de pensar é a chamada <a href="https://yarnpkg.com/features/zero-installs" target="_blank" rel="noopener"><em>Zero-Installs</em></a>, onde nossas dependências são curadas e adicionadas ao GIT, não sendo necessario rodar Install após clonar o projeto.</p><p>Segundo Yarn, não ocupa muito espaço, pois são salvos apenas binários das dependências, e não todo o projeto, como quando usamos a boa e velha  <code>node_modules</code>.</p><p>Eventualmente pode ser necessário reinstalar uma dependência, com ou sem comittar ao GIT - por ex, se trabalhando em outro Sistema Operacional -, e há opções para isso.</p><blockquote><p>Image by <a href="https://br.freepik.com/fotos-gratis/cara-de-tiro-completo-tricotando-com-fio-vermelho_23404505.htm#page=2&query=knitting&position=5&from_view=search" target="_blank" rel="noopener">Freepik</a></p></blockquote><blockquote><p>Image by <a href="https://br.freepik.com/fotos-gratis/vista-superior-do-conjunto-de-croche-com-espaco-de-copia-e-fios_12061665.htm#query=knitting&position=20&from_view=search" target="_blank" rel="noopener">Freepik</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;yarn-3-monorepo-com-zero-install.jpg&quot; alt=&quot;yarn-3-monorepo-com-zero-install&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;A-demanda&quot;&gt;&lt;a href=&quot;#A-demanda&quot; class
      
    
    </summary>
    
    
      <category term="rapidinha" scheme="http://rcdevlabs.github.io/tags/rapidinha/"/>
    
      <category term="wokflow" scheme="http://rcdevlabs.github.io/tags/wokflow/"/>
    
      <category term="yarn" scheme="http://rcdevlabs.github.io/tags/yarn/"/>
    
      <category term="monorepo" scheme="http://rcdevlabs.github.io/tags/monorepo/"/>
    
  </entry>
  
  <entry>
    <title>Realidade Aumentada facil e rapida com AR.js - Gincana de Pascoa com AR</title>
    <link href="http://rcdevlabs.github.io/2019/05/01/realidade-aumentada-facil-e-rapida-com-ar-js-gincana-de-pascoa-com-ar/"/>
    <id>http://rcdevlabs.github.io/2019/05/01/realidade-aumentada-facil-e-rapida-com-ar-js-gincana-de-pascoa-com-ar/</id>
    <published>2019-05-01T14:04:54.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./realidade-aumentada-facil-e-rapida-com-ar-js-gincana-de-pascoa-com-ar.jpg" alt="Realidade Aumentada fácil e rápida com AR.js - Gincana de Páscoa com AR"></p><p>Oi pessoal, eu programei um app bem simples pra uma  ‘gincana de páscoa’, e o pessoal curtiu, então queria compartilhar com vcs</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>Marcadores</strong></td><td><a href="https://github.com/romuloctba/arhunt/tree/master/_markers" target="_blank" rel="noopener">https://github.com/romuloctba/arhunt/tree/master/_markers</a></td></tr><tr><td><strong>APP para jogar</strong></td><td><a href="https://romuloctba.github.io/arhunt" target="_blank" rel="noopener">https://romuloctba.github.io/arhunt</a></td></tr><tr><td><strong>Codigo Fonte</strong></td><td><a href="https://github.com/romuloctba/arhunt" target="_blank" rel="noopener">https://github.com/romuloctba/arhunt</a></td></tr></tbody></table><h2 id="A-Demanda"><a href="#A-Demanda" class="headerlink" title="A Demanda"></a>A Demanda</h2><p>A idéia era criar uma forma de ‘caçada aos ovos’ com AR.</p><p><strong>Funciona Assim</strong></p><ul><li>10 marcadores são impressos e espalhados pelo escritório</li><li>O usuário abre o APP e ‘captura’ os marcadores com a câmera</li><li>Cada marcador traz uma letra, ou nenhuma </li><li>Ao coletar todas as letras, o usuário recebe um aviso</li><li>WIN</li></ul><blockquote><p>WIN: No nosso caso, o usuário mostrava que capturou as pistas necessárias, e advinhava a senha e ganhava uns chocolates heheh</p></blockquote><blockquote><p>(Obs: No dia da gincana, o APP estava apenas em pt-BR. Adicionei a internacionalização depois)</p></blockquote><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><ul><li>Webpack</li><li>Templates pug</li><li>Sass (mal usei, vai)</li><li>i18n - Internacionalização</li><li>Ar.JS </li><li>jQuery</li></ul><p>Eis as razões:</p><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>Dizem que ele é um gerador de Bundles -e não tá errado, mas na prática, ele é um importante gerenciador de tarefas, é isso que ele é. </p><p>Permite gerar ‘bundles’ otimizados, processar os arquivos, minificar CSS e JS, e por aí vai… Além de ser usado durante o desenvolvimento, com o live-reload.</p><h3 id="Templates-pug"><a href="#Templates-pug" class="headerlink" title="Templates pug"></a>Templates pug</h3><p>Ora conhecido por <code>jade</code>, os templates <code>pug</code> são uma maneira legal de escrever menos código para template.<br>Permite usar variáveis, includes, blocos e mixins, reutilizar código, e escrever HTML quase como se fossem ‘seletores CSS’.</p><h3 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h3><p>Nesse projeto eu mal usei o potencial do Sass, mas gosto das variáveis e includes - que permitem modularizar legal o projeto, deixando tudo bem organizadinho</p><h3 id="i18n-Internacionalizacao"><a href="#i18n-Internacionalizacao" class="headerlink" title="i18n - Internacionalização"></a>i18n - Internacionalização</h3><p>Foi bem fácil implementar uma i18n engine do 0, e bastante divertido. Ficou simples, mas fiz por remorso (no dia em que o APP foi usado LIVE, não tinha internacionalizado ainda, e ficou só em pt-BR. Alguns colegas e visitantes de fora precisaram de ajuda pra jogar :( ))</p><h3 id="Ar-JS"><a href="#Ar-JS" class="headerlink" title="Ar.JS"></a>Ar.JS</h3><p>É a grande estrela do projeto, e promete 60fps até em dispositivos antigos.<br>Ele basicamente une o Three.js - conhecido framework 3D para Javascript com o a-frame - Framework de realidade virtual e o ARToolkit (buildaram do C pro JS usando emscripten e asm.js)</p><p>O projeto está disponível no <a href="https://github.com/jeromeetienne/AR.js" target="_blank" rel="noopener">Github</a> e cheio de exemplos por aí. <a href="https://stemkoski.github.io/AR-Examples/" target="_blank" rel="noopener">Aqui tem um excelente GithubPages com Exemplos do AR.js</a></p><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>Nossa Rômulo, usando jQuery em 2019?</p><p>É, ué.</p><hr><h2 id="Implementacao"><a href="#Implementacao" class="headerlink" title="Implementação"></a>Implementação</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>Marcadores</strong></td><td><a href="https://github.com/romuloctba/arhunt/tree/master/_markers" target="_blank" rel="noopener">https://github.com/romuloctba/arhunt/tree/master/_markers</a></td></tr></tbody></table><p>Achei bem interessante como usar o AR.js. Fiz com imagens PNG, mas usar modelos 3d é relativamente fácil tb, porém só encontrei uns arquivos pesados, e ficaria ruim pro pessoal baixar na internet móvel.</p><p>Procurei manter a UI mais enxuta possível. Ficou um pouco parecido com Pokemon GO, mas nada proposital :)</p><p>O “segredo” está neste trecho:</p><p><strong>Main-scene.pug</strong><br><a href="https://github.com/romuloctba/arhunt/blob/master/src/_partials/_main-scene.pug" target="_blank" rel="noopener">https://github.com/romuloctba/arhunt/blob/master/src/_partials/_main-scene.pug</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a-scene(embedded, vr-mode-ui=&quot;enabled: false&quot;, arjs=&quot;trackingMethod: best; sourceType: webcam; detectionMode: mono_and_matrix; matrixCodeType: 3x3; debugUIEnabled: false; changeMatrixMode: cameraTransformMatrix&quot;)</span><br><span class="line">  a-entity(camera)</span><br><span class="line">    a-marker#marker1.game-marker(type=&quot;barcode&quot;, data-code=&quot;1&quot;, value=&quot;1&quot;, registerevents=&quot;true&quot;)</span><br><span class="line">      a-image(src=&quot;./images/clues/dracula.png&quot;, width=&quot;3&quot;, height=&quot;3&quot; rotation=&quot;-90 0 0&quot;, position=&quot;0 0 -1.5 -5&quot;, scale=&quot;2 2 2 2&quot;, transparent=true)</span><br><span class="line">    a-marker#marker2.game-marker(type=&quot;barcode&quot;, data-code=&quot;2&quot;, value=&quot;2&quot;, registerevents=&quot;true&quot;)</span><br></pre></td></tr></table></figure></p><p>O <code>a-scene</code> contém as configurações necessárias. Peguei do DEMO do AR.js, basicamente dizemos que a <code>detectionMode</code> seria <code>mono_and_matrix;</code> com <code>matrixCodeType: 3x3</code></p><p>É importante notar que todos os marcadores estão <em>dentro de uma única <code>a-entity(camera)</code></em>. Isso é importante, e evita erros de renderização.</p><p>E, conforme dá pra perceber no código, cada marcador é um <code>a-marker</code> e tem seu valor definido pelo <code>data-code</code> e <code>value</code>.</p><p>O conteúdo de está dentro do marcador (aqui uso apenas uma <code>a-image</code>, em PNG,  com o personagem) ficará visível enquanto o marcador for lido pela câmera.<br>Além de exibir o conteúdo, um evento <code>&#39;markerFound&#39;</code>, que leio e uso para adicionar na lista de pistas encontradas, etc… O event listener está no <a href="https://github.com/romuloctba/arhunt/blob/master/src/js/main.js#L19" target="_blank" rel="noopener">main.js</a> e chama o <code>GAME_API.markerFound</code>.</p><p>Toda lógica restante ficou no <a href="https://github.com/romuloctba/arhunt/blob/master/src/js/gameAPI.js" target="_blank" rel="noopener">GAME API</a>. Apesar de não ser a melhor prática… Eu avisei que escolhas foram feitas hehe</p><p>Bom, por hoje é isso. Se quiserem que eu explique algum detalhe específico do APP, por favor, avisa aí :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;./realidade-aumentada-facil-e-rapida-com-ar-js-gincana-de-pascoa-com-ar.jpg&quot; alt=&quot;Realidade Aumentada fácil e rápida com AR.js 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ambiente Docker para desenvolvimento NodeJS - Rapidinha</title>
    <link href="http://rcdevlabs.github.io/2018/12/03/ambiente-docker-para-desenvolvimento-nodejs-rapidinha/"/>
    <id>http://rcdevlabs.github.io/2018/12/03/ambiente-docker-para-desenvolvimento-nodejs-rapidinha/</id>
    <published>2018-12-03T12:27:43.000Z</published>
    <updated>2022-02-09T04:05:07.450Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/ambiente-desenvolvimento-nodejs-angular-com-docker.jpg" alt="ambiente-desenvolvimento-nodejs-angular-com-docker"></p><p>Bem vindo à rapidinha de hoje.</p><p>Supondo que esteja com o Docker instalado, e os Docker Volumes Estejam funcionando corretamente:</p><hr><blockquote><p>Disclaimer: A baleia está errada.<br>E imagens de orca são abundantes</p></blockquote><hr><h2 id="Ambiente-Docker-para-desenvolvimento-NodeJS"><a href="#Ambiente-Docker-para-desenvolvimento-NodeJS" class="headerlink" title="Ambiente Docker para desenvolvimento NodeJS"></a>Ambiente Docker para desenvolvimento NodeJS</h2><ul><li><p>Crie a pasta do seu projeto. Dentro, crie a pasta <code>/application</code>.</p></li><li><p>Na raiz do projeto, rode:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it -w=&quot;/usr/src/app&quot; -p 4200:4200 -v $PWD/application:/usr/src/app:z --user $(id -u):$(id -g) node bash</span><br></pre></td></tr></table></figure><ul><li>Atenção: <code>-p 4200:4200</code> irá expor a porta 4200 do docker, na 4200 na sua máquina (host).<br>Troque ou adicione <code>-p num_porta_na_sua_maquina:num_porta_no_docker</code> de acordo com oq precisar.</li></ul><ul><li><p>Dentro do container, use o <code>npm init</code> para iniciar um novo projeto, ou siga os passos abaixo para criar um projeto Angular:</p></li><li></li></ul><hr><h1 id="Dica-Extra"><a href="#Dica-Extra" class="headerlink" title="Dica Extra"></a>Dica Extra</h1><h2 id="Criando-um-Projeto-com-Angular-Cli-dentro-do-Container-Docker"><a href="#Criando-um-Projeto-com-Angular-Cli-dentro-do-Container-Docker" class="headerlink" title="Criando um Projeto com @Angular/Cli dentro do Container Docker"></a>Criando um Projeto com @Angular/Cli dentro do Container Docker</h2><ul><li><p>Dentro do container, rode:<br><code>npx @angular/cli new MeuApp</code></p></li><li><p>Responda as perguntas de acordo. Eu gosto de usar styles=sass e o restante deixar padrão.</p></li><li><p>Após a instalação: <code>cd meuApp</code>e <code>npm run ng serve</code></p></li><li><p>Agora, no seu navegador <code>localhost:4200</code> deve abrir sua aplicação.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/ambiente-desenvolvimento-nodejs-angular-com-docker.jpg&quot; alt=&quot;ambiente-desenvolvimento-nodejs-angular-com-docker&quot;&gt;&lt;/p&gt;
&lt;p&gt;Bem v
      
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://rcdevlabs.github.io/tags/nodejs/"/>
    
      <category term="Docker" scheme="http://rcdevlabs.github.io/tags/docker/"/>
    
      <category term="Workspace" scheme="http://rcdevlabs.github.io/tags/workspace/"/>
    
  </entry>
  
  <entry>
    <title>Removendo linhas extras irritantes em arquivos transferidos via FTP</title>
    <link href="http://rcdevlabs.github.io/2015/11/07/removendo-linhas-extras-irritantes-em-arquivos-transferidos-via-ftp/"/>
    <id>http://rcdevlabs.github.io/2015/11/07/removendo-linhas-extras-irritantes-em-arquivos-transferidos-via-ftp/</id>
    <published>2015-11-07T18:12:57.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./removendo-linhas-extras-irritantes-em-arquivos-transferidos-via-ftp.jpg" alt="Removendo linhas extras irritantes em arquivos transferidos via FTP"></p><p>Já passou pela tristeza de baixar um arquivo via FTP e, ao editá-lo, encontrar linhas extras, parágrafos duplos, quebras de linhas em excesso, e um MONTE de espaço vazio?</p><p>Pois é, amiguinhos, isso não é muito comum mesmo. Mas só quem já passou por isso pode entender o suplício que é! </p><p>Normalmente, quando isso acontece, o arquivo a +1 linha extra, para cada linha vazia já existente nele, em cada transferência! :/</p><p>Ou seja: você pode começar com um arquivo de 30 linhas, e em alguns uploads e downloads, estar com 180, 240, 360 linhas!!!</p><h3 id="Por-que-isso-acontece"><a href="#Por-que-isso-acontece" class="headerlink" title="Por que isso acontece?"></a>Por que isso acontece?</h3><p>Bom, eu já pesquisei um bocado para tentar entender o motivo disso.<br>Uma das razões propostas é que poderia ser pelo encoding.<br>Existe o UTF-8, nosso querido e amado topa-tudo. Mas alguns editores e SO’s salvam os arquivos com um negócio chamado <em>BOM</em>, ou seja: <em>UTF-8 with BOM</em>.</p><blockquote><p>O <em>BOM</em> é um caracter unicode que indica aos arquivo UTF-8 a <strong>extremidade</strong> de um arquivo de texto ou de dados. <a href="https://pt.wikipedia.org/wiki/Marca_de_ordem_de_byte" target="_blank" rel="noopener">Wikipedia</a>.</p></blockquote><p>Para salvar sem o BOM, é bem simples. No próprio Sublime Text, temos como selecionar o “Reopen with Encoding” para UTF-8, e isso reabrirá o arquivo sem o BOM.</p><h3 id="Mas-nao-adiantou…"><a href="#Mas-nao-adiantou…" class="headerlink" title="Mas não adiantou…."></a>Mas não adiantou….</h3><p>Pois é, se você tentou, deve ter resolvido, OU NÃO.<br>Pra mim, nunca resolveu. Ví muitos relatos felizes em fórums, mas meu testemunho essa técnica não tem.</p><hr><h3 id="Caramba-Romulo-entao-como-eu-tiro-essas-malditas-linhas-extras-Nao-te-pago-pra-contar-historinha"><a href="#Caramba-Romulo-entao-como-eu-tiro-essas-malditas-linhas-extras-Nao-te-pago-pra-contar-historinha" class="headerlink" title="Caramba, Rômulo, então como eu tiro essas malditas linhas extras?!! Não te pago pra contar histórinha!"></a>Caramba, Rômulo, então como eu tiro essas malditas linhas extras?!! Não te pago pra contar histórinha!</h3><p>Bom, é verdade, vc não me paga. hehe<br>Bom, eu resolvi dum jeito muito bacana!</p><blockquote><p>Fazendo uma busca por uma <em>Regular Expression</em> e substituindo por um <code>/n</code>.</p></blockquote><h3 id="Find-and-Replace-com-REGEX-para-remover-linhas-extras"><a href="#Find-and-Replace-com-REGEX-para-remover-linhas-extras" class="headerlink" title="Find and Replace com REGEX para remover linhas extras."></a>Find and Replace com REGEX para remover linhas extras.</h3><p>Com o nosso arquivo zica aberto no <em>Sublime Text 3</em>, vamos em Find -&gt; Replace (ou Command+H (max), Ctrl+H (win, linux)), preenchendo da seguinte forma:</p><p><img src="./find-replace-extra-lines-sublime.jpg" alt="Find and Replace Extra Lines no Sublime com Regex"></p><p>Note que o sinal de soma, que parece um 3 ou um E, enfim… Ele é o botão que vai ativar a busca por Regular Expressions, o REGEX.</p><p>Usaremos o REGEX <code>[\r\n]{2,}</code> que irá identificar todas as quebras de linhas repetidas, substituindo por apenas uma <code>\n</code>.</p><p>Clique em <em>Replace All</em>, e seja feliz!</p><h3 id="Arquivo-novo-vida-nova"><a href="#Arquivo-novo-vida-nova" class="headerlink" title="Arquivo novo, vida nova."></a>Arquivo novo, vida nova.</h3><p>É isso aí pessoal, espero ter ajudado.</p><p>Eu tive esse problema pela primeira vez em 2011, quando lidava em alguns arquivos gerados em um Mac, enviados para um servidor VPS com configuração duvidosa, e baixados em meu lindo Windows 7, à época. Arquivos com 30 linhas de código tinham 90, depois 120, 150, e por aí vai, de acordo com que eu <em>upava</em> para o servidor.</p><p>Alguns meses atráz tive novamente essa situação, embora em OS e circunstâncias diferentes. Até criei <a href="https://gist.github.com/romuloctba/759bfd227e7ee768d9c3" target="_blank" rel="noopener">Este GIST</a>, que me ajuda toda vez que preciso resolver essa situação!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;./removendo-linhas-extras-irritantes-em-arquivos-transferidos-via-ftp.jpg&quot; alt=&quot;Removendo linhas extras irritantes em arquivos 
      
    
    </summary>
    
    
      <category term="dicas, sublime, ftp" scheme="http://rcdevlabs.github.io/tags/dicas-sublime-ftp/"/>
    
  </entry>
  
  <entry>
    <title>Testando o pré-release do Ionic Material: Material Design em seu App Híbrido</title>
    <link href="http://rcdevlabs.github.io/2015/06/26/testando-o-pre-release-do-ionic-material-material-design-em-seu-app-hibrido/"/>
    <id>http://rcdevlabs.github.io/2015/06/26/testando-o-pre-release-do-ionic-material-material-design-em-seu-app-hibrido/</id>
    <published>2015-06-26T18:12:14.000Z</published>
    <updated>2022-02-09T04:05:07.470Z</updated>
    
    <content type="html"><![CDATA[<img src="/2015/06/26/testando-o-pre-release-do-ionic-material-material-design-em-seu-app-hibrido/testando-o-pre-release-do-ionic-material-material-design-em-seu-app-hibrido.jpg" title="testando-o-pre-release-do-ionic-material-material-design-em-seu-app-hibrido"><p>O Ionic Framework é uma das soluções preferidas dos caras legais para projetos de Apps Híbridos ou multi-dispositivos.<br>Outro que tá suuuper na moda também é o tal do Material Design. Hoje, teremos um <em>mix</em> dos dois, com Ionic Material!</p><p>Vamos juntos passear por um <strong>demo</strong> muito bacana do Ionic Material e entender como utilizar esse cara que parece tão promissor!</p><p>Neste artigo, passearemos juntos pelo código do projeto Demo, prestando atenção especial à alguns itens básicos que nos farão entender o funcionamento e proposta do Ionic Material.</p><p>&nbsp;</p><h3 id="Material-Design-O-que-e-de-onde-veio-para-que-serve"><a href="#Material-Design-O-que-e-de-onde-veio-para-que-serve" class="headerlink" title="Material Design: O que é, de onde veio, para que serve?"></a>Material Design: O que é, de onde veio, para que serve?</h3><hr><p>Aqueeeeele design concept muito louco do Google que tem a a <em>pequena</em> pretensão de guiar a próxima geração de User Interfaces de Apps Móveis parece estar agradando, e ganhando adeptos em vários segmentos.</p><p>Foi anunciada em Junho de 2014, na Google I/O e poderia ser utilizada em dispositivos com Android lançados após 2009, com uso da v7 app compat library, existente nos aparelhos lançados desde aquele ano.</p><p>Criada pelo <em>Design team</em> do Google, teve <a href="https://en.wikipedia.org/wiki/Mat%C3%ADas_Duarte" target="_blank" rel="noopener">Matias Duarte</a> como Lead Designer e mentor do projeto.</p><p>&nbsp;</p><h3 id="Ionic-Framework-O-que-faz-como-faz-e-para-que-faz"><a href="#Ionic-Framework-O-que-faz-como-faz-e-para-que-faz" class="headerlink" title="Ionic Framework: O que faz, como faz e para que faz?"></a>Ionic Framework: O que faz, como faz e para que faz?</h3><hr><p>Lançado em 2013, é um dos Frameworks mais populares para desenvolvimento de Aplicativos Móveis híbridos. Com a missão de integrar-se ao máximo com a plataforma nativa, busca sempre o <strong>native-feel</strong>.</p><p>Utiliza AngularJs como framework principal para tratamento dos dados, o que permite utilizar-se de aceleração por Hardware, ao invés de manipulação do DOM direta.</p><p>Além disso, o CSS é pensado e cuidado para melhor desempenho móvel. Ao final, utiliza-se do Phonegap/Cordova para empacotar a aplicação, seja para iOS, Android ou WindowsPhone.</p><p>Além das bibliotecas css e javascript do Ionic para o desenvolvimento, contamos também o uma <strong>cli interface</strong> de linha de comando muito bacana e útil.</p><p>Ele nos oferece ferramentas para publicação, teste, criação de icones e splash screens, push notifications e muito mais, atravéz da sua linha de comando.</p><p>Pra instalar o Ionic Framework é necessário ter o <a href="http://nodejs.org" target="_blank" rel="noopener">NodeJs</a> e executar os comando <code>npm install -g cordova</code>, depois  <code>npm install -g ionic</code>.</p><p>&nbsp;</p><h3 id="Maos-a-obra-Usando-o-Ionic-Material"><a href="#Maos-a-obra-Usando-o-Ionic-Material" class="headerlink" title="Mãos à obra: Usando o Ionic Material"></a>Mãos à obra: Usando o Ionic Material</h3><hr><p>O Ionic Material está disponível no <a href="http://ionicmaterial.com" target="_blank" rel="noopener">site oficial</a>, atualmente em versão pré-release.</p><p>Depois você pode curtir o site e exemplos nele disponíveis, mas, agora, <strong>clique em <a href="https://github.com/zachsoft/Ionic-Material/archive/master.zip" target="_blank" rel="noopener">Download</a></strong> para baixar o source</p><p>Dentro do arquivo <em>.zip</em>, vamos abrir a pasta <code>ionic-material-master/demo</code>.<br>Extraia o conteúdo dela para uma pasta onde iremos trabalhar.</p><p>Acesse a pasta para onde extraiu o conteúdo da <code>ionic-material-master/demo</code>. </p><p>Com o terminal, nela, vamos instalar as dependencias com o npm<br><figure class="highlight plain"><figcaption><span>~dev/exemplo-ionic-material</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>Agora, rodamos o servidor do ionic com o <code>ionic serve</code></p><figure class="highlight plain"><figcaption><span>~dev/exemplo-ionic-material</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ionic serve</span><br></pre></td></tr></table></figure><p>Após alguns segundos, o Ionic deve abrir o servidor de desenvolvimento na url <a href="http://localhost:8100/" target="_blank" rel="noopener">http://localhost:8100/</a>. </p><p><strong>Caso abra a página em branco, com erro no Console</strong>, é por que a versão do <em>demo</em> do Ionic Material estava com problema (até hoje 26-06-2015).<br>Pra resolver é bem fácil: Extraia o conteúdo da pasta <code>/dist</code> do arquivo Ionic-Material-master.zip para <code>exemplo-ionic-material/lib/ionic-material</code> no seu projeto.</p><p>Isso deve, automagicamente, recarregar a página - desta vez com tudo em ordem:</p><p><img src="demo-ionic-material.jpg" alt="demo-ionic-material"></p><p>&nbsp;</p><h3 id="Analisando-o-Codigo-do-Ionic-Material"><a href="#Analisando-o-Codigo-do-Ionic-Material" class="headerlink" title="Analisando o Código do Ionic Material"></a>Analisando o Código do Ionic Material</h3><hr><p>Bom, o Ionic Material ainda está em fase de pré-lançamento. Imagino que tenham lançado para não <em>perder o timing</em>, já que Material Design tá suuuuper na moda.</p><p>Mas, independente da usabilidade do framework, a questão é que não há documentação no momento.</p><p>Por isso é tão importante o projeto demo, para que tenhamos acesso à um pouco do código.</p><p>Vou listar abaixo algumas diretivas e classes que achei interessantes ao experimentar este demo.</p><p>&nbsp;</p><h4 id="Custom-CSS-e-Mudando-a-fonte-padrao-do-Ionic-Material"><a href="#Custom-CSS-e-Mudando-a-fonte-padrao-do-Ionic-Material" class="headerlink" title="Custom CSS e Mudando a fonte padrão do Ionic Material"></a>Custom CSS e Mudando a fonte padrão do Ionic Material</h4><hr><p>Bom, para todos os efeitos, temos um projeto Ionic normal, que conta com as funcionalidades adicionais do Ionic Material.</p><p>Vamos conferir isso, alterando a fonte padrão do App.</p><p>Edite o arquivo <code>exemplo-ionic-material/www/css/style.css</code>, adicionando o seguinte:</p><figure class="highlight css"><figcaption><span>~dev/exemplo-ionic-material/www/css/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> url(http://fonts.googleapis.com/css?family=Open+Sans+Condensed:<span class="number">300</span>,<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">button</span>, <span class="selector-tag">label</span>, <span class="selector-tag">input</span>, <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Open Sans Condensed'</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Salve. O LiveReload do Ionic já deve carregar a fonte nova no app.<br>Note que o CSS do Ionic é bastante específico em algumas partes, e que as alterações na fonte das Tabs, por exemplo, precisariam da classe <code>.tab-item</code>.</p><p>Vamos alterar a fonte da tab e dos itens do menu:</p><figure class="highlight css"><figcaption><span>~dev/exemplo-ionic-material/www/css/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="selector-class">.title</span>, <span class="selector-class">.tab-item</span>, <span class="selector-class">.item-content</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Open Sans Condensed'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Até aí, nada novo. Fariamos isso (ou quase :P) com um app Ionic Framework normalmente.</p><p>Vamos para um elemento mais ‘específico’ do material design: o Hero Header, com sua animação elegante e fade-in rotativo da imagem de perfil:</p><p>&nbsp;</p><h2 id="Hero-e-animacao-de-transicao-do-Ionic-Material"><a href="#Hero-e-animacao-de-transicao-do-Ionic-Material" class="headerlink" title="Hero e animação de transição do Ionic Material"></a>Hero e animação de transição do Ionic Material</h2><hr><p>O fundo que surge progressivamente e sua transição característica do Material Design - normalmente após interagir com um Card - está no projeto demo:</p><p><img src="demo-ionic-material-hero-bg.jpg" alt="demo-ionic-material-hero-bg"></p><p>Editando o arquivo <code>exemplo-ionic-material/www/templates/profile.html</code>, notamos o trecho abaixo:</p><figure class="highlight html"><figcaption><span>~dev/exemplo-ionic-material/www/templates/profile.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hero slide-up"</span> <span class="attr">style</span>=<span class="string">"background-image: url('img/profile-bg.jpg');"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"avatar"</span> <span class="attr">style</span>=<span class="string">"background-image: url('img/daenerys.jpg');"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"light"</span>&gt;</span>Daenerys Targaryen<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>dragon_mommy<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>De cara, já não gostei de definir o <code>background-image</code> inline. Mas tudo bem, neste vasto mundo de App Móveis, usar estilos inline as vezes não é um pecado mortal.</p><p>Aposto que logo teremos a opção de adicionar a imagem via diretiva.</p><p>Achei bacana que se vc inserir o <em>snippet</em> acima em outra parte do seu app, o efeito é o mesmo.<br>Inclusive, funciona para mais de um elemento por página, sem necessariamente que o elemento seja o cabeçalho da tela atual.</p><p>&nbsp;</p><h2 id="Botao-caracteristico-da-View-do-Ionic-Material"><a href="#Botao-caracteristico-da-View-do-Ionic-Material" class="headerlink" title="Botão característico da View do Ionic Material"></a>Botão característico da View do Ionic Material</h2><hr><p>O botão abaixo é um dos pontos mais marcantes dos specs do Material Design.<br>Além da transição característica ao aparecer na página, ele também <em>responde e reage à posição do toque</em> com seu background!</p><p><img src="ionic-material-editar-bota-fabcontent-redondo.jpg" alt="ionic-material-editar-bota-fabcontent-redondo"></p><p>No Ionic Material utiliza-se uma abordagem bastante interessante, IMHO, pra lidar com esse botãozinho tão especial:</p><p><strong>Os botões fabContent são definidos com os States da aplicação</strong>, e podem ser adicionados como uma view do estado, levando os parâmetros: <code>template</code>, uma string, e <code>controller</code>, uma função.</p><p>Saca só que maneirinho:</p><p>No exemplo abaixo, do estado <code>app.friends</code>, carregamos a view <code>fabContent</code>, cujo <code>template</code> é o HTML do botão, (e suas classes) e <code>controller</code> uma function de <code>$timeout</code>, responsável por adicionar a classe <code>.on</code> após 900ms em nosso botão, finalizando o efeito transitório:</p><figure class="highlight javascript"><figcaption><span>~dev/exemplo-ionic-material/www/js/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.state(<span class="string">'app.friends'</span>, &#123;</span><br><span class="line">  url: <span class="string">'/friends'</span>,</span><br><span class="line">  views:</span><br><span class="line">  &#123;...&#125;,</span><br><span class="line">  <span class="string">'fabContent'</span>: &#123;</span><br><span class="line">    template: <span class="string">'&lt;button id="fab-friends" class="button button-fab button-fab-top-left expanded button-energized-900 spin"&gt;&lt;strong&gt;RCDevLabs&lt;/strong&gt;&lt;/button&gt;'</span>,</span><br><span class="line">    controller: <span class="function"><span class="keyword">function</span> (<span class="params">$timeout</span>) </span>&#123;</span><br><span class="line">      $timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'fab-friends'</span>).classList.toggle(<span class="string">'on'</span>);</span><br><span class="line">      &#125;, <span class="number">900</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>Para editar o botão redondinho do Material Design no Ionic Material, basta editar o view fabContent, alterado o <code>template</code> na declaração do State() da tela desejada.</strong></p></blockquote><p>As classes para o botão fabContent são: <code>.button-fab-top-right</code>, <code>.button-fab-top-left</code>, <code>button-fab-bottom-right</code> e <code>.button-fab-bottom left</code>. Elas controlam a posição, sendo superior direito, esquerdo e inferior direito e esquerdo respectivamente.</p><p><img src="editando-titulo-da-view-e-texto-do-botao-material-ionic.jpg" alt="editando-titulo-da-view-e-texto-do-botao-material-ionic">[Demonstrando como controlar o conteúdo do botão Material no app.js, e editar o texto do Title da View no friends.html]</p><p>&nbsp;</p><h3 id="Input-e-Labels-do-Material-Design-com-Ionic-Material"><a href="#Input-e-Labels-do-Material-Design-com-Ionic-Material" class="headerlink" title="Input e Labels do Material Design com Ionic Material"></a>Input e Labels do Material Design com Ionic Material</h3><hr><p>Logo na tela de Login temos um exemplo de form com Material Design style :)</p><p>Para utilizar o elemento, chamado <code>input-md</code>, é bem simples. Basta inserir na view:</p><figure class="highlight html"><figcaption><span>~dev/exemplo-ionic-material/www/templates/login.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-md-input</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">highlight-color</span>=<span class="string">"balanced"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-md-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-md-input</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">highlight-color</span>=<span class="string">"energized"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-md-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Meio triste, porém, que para utilizar esses inputs, é necessário injetar <code>ionMdInput</code> (além do <code>ionic-material</code>, claro) nas dependencias do app:</p><figure class="highlight javascript"><figcaption><span>~dev/exemplo-ionic-material/www/js/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">angular.module(<span class="string">'starter'</span>, [<span class="string">'ionic'</span>, <span class="string">'starter.controllers'</span>, <span class="string">'ionic-material'</span>, <span class="string">'ionMdInput'</span>])</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>e inserir o script e o css: <code>ion-md-input.min.js</code> e <code>ion-md-input.min.css</code><br>&nbsp;</p><h3 id="Itens-e-outras-classes-CSS-do-Ionic"><a href="#Itens-e-outras-classes-CSS-do-Ionic" class="headerlink" title="Itens e outras classes CSS do Ionic"></a>Itens e outras classes CSS do Ionic</h3><hr><p>Uma das vantagens do Ionic Material é que ele <strong>extende as classes originais do Ionic Framework</strong>. Isso quer dizer que, exceto alguns elementos específicos, a maioria dos elementos oferecidos originalmente já estão preparados para o Material Design.</p><p>Veja no exemplo abaixo o elemento Item, inserido usando a classe <code>.item</code><br><img src="item-css-ionic-material-ionic-framework.jpg" alt="item-css-ionic-material-ionic-framework"></p><figure class="highlight html"><figcaption><span>~dev/exemplo-ionic-material/www/templates/friends.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list animate-fade-slide-in-right"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/app/profile"</span> <span class="attr">class</span>=<span class="string">"item item-avatar item-icon-right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jon-snow.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Jon Snow<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Da illest illegitimate<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon ion-chatbubble muted"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Bom, os principais benefícios do framework, segundo seus criadores são:</p><ul><li>Interact for ink effects (Interação para efeitos de tinta)</li><li>Extends Ionic classes (Extende as classes do Ionic)</li><li>Integrates with directives (Integra com as diretivas)</li><li>Fully themeable (Preparado para customizar o tema)</li></ul><p>Isso significa que a curva de aprendizado deve ser quase nula, bastando sacar algumas diretivas e classes adicionais, porém esperando que os elementos já utilizados normalmente em projetos Ionic sejam adaptados automaticamente para o Material Design.</p><p>&nbsp;</p><h2 id="Noffa-Romulo-que-legal-entao-posso-sair-usando-em-meus-projetos"><a href="#Noffa-Romulo-que-legal-entao-posso-sair-usando-em-meus-projetos" class="headerlink" title="Noffa Romulo, que legal, então posso sair usando em meus projetos?"></a>Noffa Romulo, que legal, então posso sair usando em meus projetos?</h2><hr><p>Fico feliz que vc tenha perguntado :)</p><p>Eu gostei bastante da proposta e resultado do Ionic Material.<br>Isso, porém, não é o suficiente para que eu o indique - por enquanto.</p><p>Acho que o projeto ainda está um tanto crú, e foi lançado um pouco antecipadamente por jogada de posicionamento no mercado:<br>Se esperassem mais, ia acabar surgindo outro.</p><p>O futuro, porém, parece bastante promissor. Imagino que nas próximas semanas deva sair uma versão mais estável e que permita trabalhar com mais confiança no Ionic Material.</p><p>Por enquanto, #ficaADica para quem quiser ou precisar usar Material Design em seus projetos de apps Híbridos: Independente da versão, o Ionic Material é bastante fácil de implementar e utilizar.</p><p>Herda as classes existentes, e disponibiliza o diferencial para que possamos utilizar os specs - segundo eles, cuidadosamente seguidos - do Google para a tendência do Material Design.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2015/06/26/testando-o-pre-release-do-ionic-material-material-design-em-seu-app-hibrido/testando-o-pre-release-do-ionic-material-m
      
    
    </summary>
    
    
      <category term="Mobile" scheme="http://rcdevlabs.github.io/tags/mobile/"/>
    
      <category term="Ionic Framewokr" scheme="http://rcdevlabs.github.io/tags/ionic-framewokr/"/>
    
      <category term="Material Design" scheme="http://rcdevlabs.github.io/tags/material-design/"/>
    
      <category term="Híbridos" scheme="http://rcdevlabs.github.io/tags/hibridos/"/>
    
      <category term="App" scheme="http://rcdevlabs.github.io/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>Porque meu APP não carrega dados externos? (Lidando com CORS e Origins Externas)</title>
    <link href="http://rcdevlabs.github.io/2015/06/25/porque-meu-app-nao-carrega-dados-externos-lidando-com-cors-e-origins-externas/"/>
    <id>http://rcdevlabs.github.io/2015/06/25/porque-meu-app-nao-carrega-dados-externos-lidando-com-cors-e-origins-externas/</id>
    <published>2015-06-25T18:50:13.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./porque-meu-app-nao-carrega-dados-externos-lidando-com-cors-e-origins-externas.jpg" alt="porque-meu-app-nao-carrega-dados-externos-lidando-com-cors-e-origins-externas"></p><p>Hoje temos uma rápida, porém essencial dica: Por que um app não carrega dados externos? Como resolver o Cross Origin Resource Sharing (CORS) policy error? </p><p>Se você, meu amigo, minha amiga, desenvolvedor já precisou consumir dados estando fora do servidor (Por exemplo, consumir uma API REST que sirva o conteúdo em JSON à partir de uma aplicação com AngularJS ou Ionic Framework), então é provável que tenha se deparado com erro do CORS.</p><p>Ao fazer o deploy do webservice para um servidor remoto (de desenvolvimento ou produção), o frontend <em>misteriosamente</em> pára de funcionar.</p><p>Todas aquelas lindas requisições XHR abstraídas em $.ajax, ou nos $http e $resource da vida, ou qualquer outra forma de pegar os dados da sua API páram de funcionar quando os <em>rescursos</em> do servidor e o front já não estão na mesma <em>oirigin</em></p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><h4 id="Pra-resolver-comece-identificando-a-causa"><a href="#Pra-resolver-comece-identificando-a-causa" class="headerlink" title="Pra resolver, comece identificando a causa"></a><em>Pra resolver, comece identificando a causa</em></h4><hr><p>Primeiro, temos de entender o que significa CORS. Cross Origin Resource Sharing é o quando precisamos interagir com recursos fora do servidor. Por medidas de segurança, navegadores desktop , e algumas versões de sistemas operacionais Android e iOS exigem que seja <strong>declarado no servidor de origem os clients autorizados a consumir os dados</strong>.</p><p>Vou comentar agora <strong>duas formas difernetes</strong>, sendo uma para <em>desenvolvimento</em>, e outra mais adequada para produção.<br>&nbsp;</p><h2 id="Quebrando-um-galho"><a href="#Quebrando-um-galho" class="headerlink" title="Quebrando um galho:"></a>Quebrando um galho:</h2><h4 id="Enganando-seu-navegador-para-burlar-CORS-Bypassing-CORS"><a href="#Enganando-seu-navegador-para-burlar-CORS-Bypassing-CORS" class="headerlink" title="Enganando seu navegador para burlar CORS. (Bypassing CORS)"></a><em>Enganando seu navegador para burlar CORS. (Bypassing CORS)</em></h4><hr><p>Bom, como para permitir a conexão em diferentes origens é necessário apenas um Header autorizando isso explicitamente, existe uma forma bem simples à lá <em>gambiarration</em>, que é interceptar as requisições antes do navegador, inserindo o Header permissivo nelas.</p><p>Isso pode ser feito para Google Chrome, com <a href="https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi" target="_blank" rel="noopener">Esta extensão maneira</a></p><h4 id="Interceptando-com-um-proxy"><a href="#Interceptando-com-um-proxy" class="headerlink" title="Interceptando com um proxy"></a>Interceptando com um proxy</h4><hr><p>Você pode criar um proxy para enviar o header. Sorte que sua que o camarada <a href="http://nomadev.com.br" target="_blank" rel="noopener">@suissa</a> já fez isso pra vc:</p><p><a href="http://cors-server.getup.io/" target="_blank" rel="noopener">http://cors-server.getup.io/url/:SUAURLPARACORS</a> permite que vc insira :SUAURLPARACORS alí na url e tenha o header adicionado à sua requisição.</p><p>NÃO OBSTANTE QUEBRAR O SEU GALHO, ainda tá OpenSource este pequeno server: <a href="https://github.com/suissa/cors-server" target="_blank" rel="noopener">https://github.com/suissa/cors-server</a></p><p>&nbsp;    </p><h1 id="O-jeito-certo"><a href="#O-jeito-certo" class="headerlink" title="O jeito certo"></a>O jeito certo</h1><h4 id="declarando-no-servidor-os-clients-autorizados-a-consumir-os-dados"><a href="#declarando-no-servidor-os-clients-autorizados-a-consumir-os-dados" class="headerlink" title="declarando no servidor os clients autorizados à consumir os dados"></a><em>declarando no servidor os clients autorizados à consumir os dados</em></h4><hr><p>O erro de segurança do CORS é justamente por que o navegador quer, antes de consumir os dados, ter certeza que o servidor está ciente que ele está fazendo isso.</p><blockquote><p>É necessário declarar no header <code>Access-Control-Allow-Origin</code> do server os <strong>clients que tem permissão</strong> para consumir os dados</p></blockquote><p>Definimos as <em>origins</em> permitidas com seu hostname, ou wildcards, por exemplo:</p><ul><li><code>localhost</code></li><li><code>192.189.200.**</code></li></ul><p>Para um wildcard geral e genérico (não muito indicado), usamos <code>*</code>. Veja algumas formas de definir este cabeçalho:</p><p>&nbsp;  </p><h2 id="No-Apache-Web-Server"><a href="#No-Apache-Web-Server" class="headerlink" title="No Apache Web Server"></a>No Apache Web Server</h2><h4 id="Usando-headers-para-evitar-problemas-com-CORS"><a href="#Usando-headers-para-evitar-problemas-com-CORS" class="headerlink" title="Usando headers para evitar problemas com CORS"></a><em>Usando headers para evitar problemas com CORS</em></h4><hr><p>No servidor Apache podemos usar um arquivo <code>.htaccess</code> com o seguinte conteúdo:</p><figure class="highlight plain"><figcaption><span>.htaccess [Setando o header Access-Control-Allow-Origin para *]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header set Access-Control-Allow-Origin &quot;*&quot;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="Com-nGinx-Server"><a href="#Com-nGinx-Server" class="headerlink" title="Com nGinx Server"></a>Com nGinx Server</h2><h4 id="setando-header-server-wide-no-nGinx"><a href="#setando-header-server-wide-no-nGinx" class="headerlink" title="setando header server-wide no nGinx"></a><strong>setando header server-wide no nGinx</strong></h4><hr><p>No nginX (o servidor que vc precisa conhecer, se ainda não conhece), a configuração site-wide pode ser feita diretamente no arquivo .vhost.</p><figure class="highlight plain"><figcaption><span>seudominio.vhost</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="Com-PHP"><a href="#Com-PHP" class="headerlink" title="Com PHP"></a>Com PHP</h2><h4 id="setando-headers-diretamente-com-PHP-para-evitar-problemas-de-CORS"><a href="#setando-headers-diretamente-com-PHP-para-evitar-problemas-de-CORS" class="headerlink" title="setando headers diretamente com PHP, para evitar problemas de CORS"></a><em>setando headers diretamente com PHP, para evitar problemas de CORS</em></h4><hr><p>Caso as configurações de segurança do seu servidor permitam, é possível fazer pelo PHP, mesmo sem acesso ao .htacces.<br>Lembrando que definir os header via php deve ser sempre feito em uma vez só, preferencialmente em um mesmo arquivo, para evitar erros de <code>header already sent</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> header(<span class="string">"Access-Control-Allow-Origin: *"</span>);</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="Com-NodeJS-Express-js"><a href="#Com-NodeJS-Express-js" class="headerlink" title="Com NodeJS (Express.js)"></a>Com NodeJS (Express.js)</h2><h4 id="setando-headers-com-NodeJS-para-que-a-API-sirva-o-cabecalho-necessario"><a href="#setando-headers-com-NodeJS-para-que-a-API-sirva-o-cabecalho-necessario" class="headerlink" title="setando headers com NodeJS, para que a API sirva o cabeçalho necessário"></a><em>setando headers com NodeJS, para que a API sirva o cabeçalho necessário</em></h4><hr><p>Basta criar um middleware que adicione à response o header. Isso é feito com <code>res.header()</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="Para-ASP-net"><a href="#Para-ASP-net" class="headerlink" title="Para ASP.net"></a>Para ASP.net</h2><h4 id="se-vc-usa-asp-net-pode-fazer-assim-para-definir-os-headers-do-seu-servidor"><a href="#se-vc-usa-asp-net-pode-fazer-assim-para-definir-os-headers-do-seu-servidor" class="headerlink" title="*se vc usa asp.net, pode fazer assim para definir os headers do seu servidor**"></a>*se vc usa asp.net, pode fazer assim para definir os headers do seu servidor**</h4><hr><p>Se não tiver acesso às configurações do ISS, pode tentar definir o header diretamente no seu código:<br><figure class="highlight plain"><figcaption><span>arquivo.asp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response.AppendHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br></pre></td></tr></table></figure></p><h3 id="Outras-opcoes-para-resolver-problema-de-CORS-server-side"><a href="#Outras-opcoes-para-resolver-problema-de-CORS-server-side" class="headerlink" title="Outras opções para resolver problema de CORS, server side:"></a>Outras opções para resolver problema de CORS, server side:</h3><p>Para ver uma boa lista com dicas de como configurar os Headers necessários para seu servidor servir o conteúdo sem esbarrar no CORS Policy error, dê uma conferida no <a href="http://enable-cors.org/server.html" target="_blank" rel="noopener">http://enable-cors.org</a></p><p>&nbsp;</p><p>##Para Phonegap/Cordova/Ionic Framework:</p><h4 id="Declarando-no-Config-XML-da-sua-aplicacao-PhoneGap-Cordova-Ionic-as-Origins-permitidas"><a href="#Declarando-no-Config-XML-da-sua-aplicacao-PhoneGap-Cordova-Ionic-as-Origins-permitidas" class="headerlink" title="Declarando no Config.XML da sua aplicação PhoneGap/Cordova/Ionic as Origins permitidas."></a>Declarando no Config.XML da sua aplicação PhoneGap/Cordova/Ionic as Origins permitidas.</h4><hr><p>Para versões mais recentes do Android (à partir do kitkat, eu acho :P ), trounou-se necessário declarar permissão de acesso à recursos externos no arquivo config.xml.</p><p>Antes isso não era obrigatório, então era possível usar o <strong>tweak</strong> da extensão do Chrome durante o desenvolvimento, e depois apenas empacotar seu .apk que tudo ficaria bem.</p><p>Hoje, basta instalar o plugin <a href="https://github.com/apache/cordova-plugin-whitelist" target="_blank" rel="noopener">Corvoda Plugin WhiteList</a> via terminal:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Cordova)</span><br><span class="line">$ cordova plugin add https://github.com/apache/cordova-plugin-whitelist</span><br><span class="line">(Phonegap)</span><br><span class="line">$ phonegap plugin add https://github.com/apache/cordova-plugin-whitelist</span><br><span class="line">(Ionic Framework)</span><br><span class="line">$ ionic plugin add https://github.com/apache/cordova-plugin-whitelist</span><br></pre></td></tr></table></figure><p>E, uma vez instalado, declarar no arquivo CONFIG.XML do projeto as origens permitidas.</p><p>São 2 parâmetros: <code>access origin</code> e <code>allow-navigation</code>. O Access origin permite interação com a url ou domínio, ou wildcard inserido. O Allow-navigation especifica quais domínios ou sites/wildcard podem ser abertos por um link da sua aplicação.</p><figure class="highlight xml"><figcaption><span>(projetoMobile/config.xml)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">access</span> <span class="attr">origin</span>=<span class="string">"*://*.urldaSuaAPI.com/*"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-navigation</span> <span class="attr">href</span>=<span class="string">"*://*.linksExternosPermitidosViaApp.com/*"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Além da declaração do <code>header</code> no server-side, declarar <code>access origin</code> no CONFIG.XML do seu APP pode ser necessário</p></blockquote><p>&nbsp;</p><h1 id="Resumindo-e-Concluindo-os-paranaue"><a href="#Resumindo-e-Concluindo-os-paranaue" class="headerlink" title="Resumindo e Concluindo os paranauê"></a>Resumindo e Concluindo os paranauê</h1><p>Então é o seguinte: CORS é o nome da requisição feita de locais/servidores diferentes. Quando vc está local e baixa dados do localhost, não há Cors. Pois não fere a <code>same origin policy</code>, dos navegadores.</p><p>Quando é feita uma requisição externa, o servidor deve declarar permissão para a origem, ou wildcard, permitindo o acesso.</p><p>Caso isso não seja possível em uma das 20 formas diferentes em linguagens diferentes e ambientes distintos, vc pode sempre usar uma extensão que intercepte suas requisições e adicione o <code>Access-Control-Allow-Origin</code> à elas.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;./porque-meu-app-nao-carrega-dados-externos-lidando-com-cors-e-origins-externas.jpg&quot; alt=&quot;porque-meu-app-nao-carrega-dados-exte
      
    
    </summary>
    
    
      <category term="API" scheme="http://rcdevlabs.github.io/tags/api/"/>
    
      <category term="APP" scheme="http://rcdevlabs.github.io/tags/app/"/>
    
      <category term="CORS" scheme="http://rcdevlabs.github.io/tags/cors/"/>
    
      <category term="Ionic" scheme="http://rcdevlabs.github.io/tags/ionic/"/>
    
      <category term="Phonegap" scheme="http://rcdevlabs.github.io/tags/phonegap/"/>
    
      <category term="Mobile" scheme="http://rcdevlabs.github.io/tags/mobile/"/>
    
      <category term="AngularJs" scheme="http://rcdevlabs.github.io/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>Colorindo icones svg com css, à partir de uma spritesheet usando svg Masks</title>
    <link href="http://rcdevlabs.github.io/2015/06/21/colorindo-icones-svg-com-css-a-partir-de-uma-spritesheet-usando-svg-masks/"/>
    <id>http://rcdevlabs.github.io/2015/06/21/colorindo-icones-svg-com-css-a-partir-de-uma-spritesheet-usando-svg-masks/</id>
    <published>2015-06-21T14:43:53.000Z</published>
    <updated>2022-02-09T04:05:07.450Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./colorindo-icones-svg-com-css-a-partir-de-uma-spritesheet-usando-svg-masks.jpg" alt="colorindo-icones-svg-com-css-a-partir-de-uma-spritesheet-usando-svg-masks"></p><p>Este post é uma montanha russa: Para usarmos ícones SVG coloridos, vamos criar uma aplicativo Desktop com base num projeto OpenSource HTML para slicear uma spritesheet SVG! Vem ver:</p><h2 id="Analisando-a-demanda"><a href="#Analisando-a-demanda" class="headerlink" title="Analisando a demanda:"></a>Analisando a demanda:</h2><hr><p>Tive um problema em um projeto recente, onde o Designer enviou o layout em .PSD, mas os ícones eram todos smart objects rasterizados!<br>Isso quer dizer que eu poderia ter salvado eles como .png ou .jpg e inserido como <code>background-image</code> ou mesmo <code>&lt;img src=&quot;&quot;&gt;</code>.</p><p>O problema é que isso simplesmente não parece certo.</p><p>Aí, acabei usando os icones to <a href="http://flaticon.com" target="_blank" rel="noopener">FlatIcon</a>, mas - conforme eu esperava - o Designer reclamou. :P</p><p>Bom, só ai que eu percebi que havia um .svg nos arquivos que ele me enviou. À questão é que o arquivo svg era um sprite de quase uma centena de icones.</p><p>Bom, na verdade não era um SVG, era um .Ai que eu converti para SVG… vai sacando :P</p><h3 id="Qual-melhor-forma-de-trabalhar-com-SVG-Sprites"><a href="#Qual-melhor-forma-de-trabalhar-com-SVG-Sprites" class="headerlink" title="Qual melhor forma de trabalhar com SVG Sprites?"></a>Qual melhor forma de trabalhar com SVG Sprites?</h3><p>Bom, acho que não serei eu a dar a resposta absoluta, a MELHOR forma…<br>Mas funcionou legal o aproach de <strong>svg Masks</strong> e filters para colorir os ícones, inseridos com css background e background-position.</p><p>Para pegar a localização exata dos icones dentro da SpriteSheet, usei o Sprite-Cow.<br>Ele é uma solução online, mas de código aberto.</p><p><strong>Veja, abaixo, como é o Serviço online do SpriteCow:</strong><br><img src="./spritecow-original.JPG" alt="Sprite-Cow.com"></p><h3 id="Criando-um-APP-Desktop-para-slicear-os-icones"><a href="#Criando-um-APP-Desktop-para-slicear-os-icones" class="headerlink" title="Criando um APP Desktop para slicear os icones"></a>Criando um APP Desktop para slicear os icones</h3><p>Para tornar mais prático o fluxo de trabalho, aproveitei que o sprite-cow tem (código aberto no Github)[<a href="https://github.com/jakearchibald/sprite-cow]" target="_blank" rel="noopener">https://github.com/jakearchibald/sprite-cow]</a>, e decidi empacotar o app em uma Aplicação Desktop!</p><p>Oque fiz foi baixar o source deles, fazer algumas pequenas alterações e <em>empacotei</em> com nw.js</p><blockquote><p>Para empacotar o spritecow em um executável, fazemos o processo do nw.js na pasta <code>/www</code></p></blockquote><p><a href="https://github.com/romuloctba/FatiadorRcDev" target="_blank" rel="noopener">Acesse o repositório já modificado que usei para empacotar AQUI</a></p><p>Após empacotamento com NW.js, temos um executável que nos permite abrir a nossa versão modificada do SpriteCow diretamente na área de trabalho.</p><p><img src="./aplicativo-desktop-empacotado-com-nw-js-html5.JPG" alt="aplicativo-desktop-empacotado-com-nw-js-html5"></p><h3 id="Criando-um-instalador-profissional-com-Winrar"><a href="#Criando-um-instalador-profissional-com-Winrar" class="headerlink" title="Criando um instalador profissional com Winrar"></a>Criando um instalador profissional com Winrar</h3><p>Não vou entrar em muitos detalhes deste processo, pois é legal que seja surpresa :) Usei o Winrar para criar um instalador customizado que, além de compactar os arquivos necessários pra rodar o executável, faz a extração para program files, bem como cria atalhos com ícones, e o próprio instalador tem um ícone customizável.</p><p>Você pode baixar e conferir o resultado,  <a href="https://drive.google.com/file/d/0B-qICzBejuRyNGhZWXZ1eXJodjA/view?usp=sharing" target="_blank" rel="noopener">Baixando o instalador para Windows Aqui</a></p><p>Confira como ficou o instalador e o fluxo de instalação:</p><p><strong>O instalador desktop, criado com o Winrar:</strong><br><img src="instalador-desktop-criado-com-winrar.jpg" alt="Instalador Desktop Criado com Winrar"></p><p><strong>A primeira tela do instalador, que é a tela da Licença/Termos de Serviço</strong><br><img src="tela-termos-de-servico-do-instalador-desktop-gerado-com-winrar.jpg" alt="tela-termos-de-servico-do-instalador-desktop-gerado-com-winrar"></p><p><strong>Tela de instalação, onde o instalador oferece para extrair na program/files</strong><br><img src="tela-do-instalador-desktop-gerado-com-winrar.jpg" alt="tela-do-instalador-desktop-gerado-com-winrar"></p><p><strong>Atalho automático na área de trabalho, com ícone personalizado:</strong><br><img src="atalho-na-area-de-trabalho-do-instalador-gerado-com-winrar.jpg" alt="atalho-na-area-de-trabalho-do-instalador-gerado-com-winrar"></p><h2 id="Usando-o-Fatiador-para-pegar-os-sprites"><a href="#Usando-o-Fatiador-para-pegar-os-sprites" class="headerlink" title="Usando o Fatiador para pegar os sprites"></a>Usando o Fatiador para pegar os sprites</h2><hr><p>Abrindo o arquivo SVG com o nosso recém criado Aplicativo Desktop, temos uma simples interface que nos ajudará à selecionar o ícone desejado.<br>Ao selecioná-lo, o código CSS é gerado abaixo.</p><p><img src="usando-o-fatiador-para-pegar-o-sprite.jpg" alt="usando-o-fatiador-para-pegar-o-sprite"></p><h2 id="Colorindo-os-Sprites-SVG"><a href="#Colorindo-os-Sprites-SVG" class="headerlink" title="Colorindo os Sprites SVG"></a>Colorindo os Sprites SVG</h2><hr><p>Para Colorir SVG que está sendo inserido via CSS não podemos simplesmente usar o atributo <code>color</code>, nem mesmo o <code>stroke</code> ou <code>path</code>.</p><p>Pelo fato do arquivo estar sendo inserido via <code>url()</code>, em nosso CSS, ao invés de ‘embedado’ direto no HTML, propriedades que <strong>modifiquem o svg em sí</strong> não são aceitas.</p><p>Por isso vamos usar SVG MASKs.</p><h3 id="O-que-e-uma-Mascara-MASK"><a href="#O-que-e-uma-Mascara-MASK" class="headerlink" title="O que é uma Mascara? (MASK)"></a>O que é uma Mascara? (MASK)</h3><p>Uma máscara é um conceito já antigo no design. É uma representação de espaço que será preservado ou excluído. Uma máscara nada mais é do que uma seleção.</p><p>Então se temos uma máscara no formato do ícone SVG, temos uma seleção naquele formato.</p><p>O que precisamos fazer, é pintar essa seleção. Pintar <strong>o background</strong> dessa seleção. </p><p>Saca só:</p><p>O código de um sprite selecionado é mais ou menos assim:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sprite</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../lib/images/icones.svg'</span>) no-repeat -<span class="number">156px</span> -<span class="number">93px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">23px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vamos alterar o código acima. Primeiro, um nome específico para o ícone. Depois, o <code>background</code> vira <code>mask</code> e <code>-webkit-mask</code>.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.iconeDash</span> &#123;</span><br><span class="line">  <span class="attribute">mask</span>: <span class="built_in">url</span>(<span class="string">'../lib/images/icones.svg'</span>) no-repeat -<span class="number">156px</span> -<span class="number">93px</span>;</span><br><span class="line">  <span class="attribute">-webkit-mask</span>: <span class="built_in">url</span>(<span class="string">'../lib/images/icones.svg'</span>) no-repeat -<span class="number">156px</span> -<span class="number">93px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">23px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Agora podemos estilizar ele usando classes de cor. </p><p>Essas classes de cor serão, nada mais, que classes com o <code>background-color</code> setado para a cor desejada.</p><p>Aproveito, também, para definir umas regras que pertencerão à todos os ícones (na classe <code>.icone</code>. A classe <code>.redIcon</code> é um exemplo de como colorir:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icone</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">text-index</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.redIcon</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Portanto, acima, temos a classe <code>.icone</code> que serve de parâmetro para todos os ícones, e a classe <code>.redIcon</code> que contém a propriedade <code>background-color</code> que dará cor ao elemento.</p><p>Para usarmos nosso ícone, nosso HTML será assim:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icone iconeDash redIcon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Dessa forma, o ícone aparecerá vermelho em nossa página.</p><p>Mas é importante lembrar que <strong>não pintamos o ícone</strong>.</p><p>Como usamos MASKS, o formato do ícone, no arquivo SVG, é usado como máscara. Por isso a cor de fundo do elemento que tem a máscara aplicada funciona como parâmetro de colorir ;)</p><p>Então se usarmos, ao invés de <code>.redIcon</code> , uma classe que contenha uma foto como background, o resultado será um ícone com a textura da foto escolhida. ;)</p><p>Essa técnica de máscaras nos permite um leque imenso de opções, mas que ficarão para comentários ou próximos posts.</p><p>Por hoje é isso, obrigado por ter vindo :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;./colorindo-icones-svg-com-css-a-partir-de-uma-spritesheet-usando-svg-masks.jpg&quot; alt=&quot;colorindo-icones-svg-com-css-a-partir-de-
      
    
    </summary>
    
    
      <category term="SVG" scheme="http://rcdevlabs.github.io/tags/svg/"/>
    
      <category term="CSS" scheme="http://rcdevlabs.github.io/tags/css/"/>
    
      <category term="SpriteSheet" scheme="http://rcdevlabs.github.io/tags/spritesheet/"/>
    
  </entry>
  
  <entry>
    <title>WorkShop: Criando Apps Multidispositivos e Servindo o conteúdo com Wordpress, no WordCamp BH #wordcampbh</title>
    <link href="http://rcdevlabs.github.io/2015/06/17/meu-workshop-criando-apps-multidispositivos-e-servindo-o-conteudo-com-wordpress-no-wordcamp-bh-wordcampbh/"/>
    <id>http://rcdevlabs.github.io/2015/06/17/meu-workshop-criando-apps-multidispositivos-e-servindo-o-conteudo-com-wordpress-no-wordcamp-bh-wordcampbh/</id>
    <published>2015-06-17T16:12:39.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/meu-workshop-criando-apps-multidispositivos-e-servindo-o-conteudo-com-wordpress-no-wordcamp-bh-wordcampbh.jpg" alt="meu-workshop-criando-apps-multidispositivos-e-servindo-o-conteudo-com-wordpress-no-wordcamp-bh-wordcampbh"></p><p>Neste dia 13 de Junho foi realizado o <a href="belohorizonte.wordcamp.org">WordCamp Belo Horizonte 2015</a>, no teatro Ney Soares - da UniBH.</p><p>Neste post quero fazer um resumo do WorkShop que tive a alegria de ministrar no evento, chamado: “Criando Apps Multidispositivos e Servindo o conteúdo com Wordpress”.</p><hr><blockquote><p>Aliás, tiro um minuto pra agradecer à organização do WordCamp BH e à Digital Ocean, que presenteou todos os participantes com <strong>U$$40</strong> de bônus na DO!! Tendo em vista que vai uns U$5 por Mês, temos aí praticamente 8 meses de servidor VPS grátis <em>-</em> Valeu, galere!</p></blockquote><hr><h2 id="WordPress-como-API-REST"><a href="#WordPress-como-API-REST" class="headerlink" title="WordPress como API REST?"></a>WordPress como API REST?</h2><p>Para meus queridos leitores e Javascripters, a idéia de usar WordPress para servir a API pode soar um tanto estranha. “Por que não Node?”, diriam alguns.</p><p>A questão é que em grande parte das vezes, WordPress já é o sistema de gerenciamento de conteúdo do site do seu cliente.</p><p>Além de que, como dizem os colegas do #WordpressBrasil no Slack, <strong>“WordPress Instala até em geladeira”</strong>… Qualquer host compartilhado (inclusive muitos gratuitos) suporta o nosso amigo WP. Não precisamos de acesso root ou ssh para instalar pacotes e dependências especificas. O bom e velho LAMP ou WAMP resolve qualquer parada. (E sim, WordPress roda lindamente com nGinx!)</p><p>Agora, sem querer definir como a solução ideal para 100% dos casos, é seguro dizer que a agilidade alcançada no método de criação de APIs com WordPress é muito útil para MVPs e outras situações em que não se tem à disposição muito tempo ou recursos.</p><p>Sem mais delongas, vamos ver como funciona essa belezinha.</p><hr><h2 id="1-2-3-e-pronto"><a href="#1-2-3-e-pronto" class="headerlink" title="1, 2, 3 e pronto!"></a>1, 2, 3 e pronto!</h2><p>No WorkShop, quis apresentar meu método “1, 2, 3” de criação de Apps Multi-Dispositivos, sendo que os passos são:</p><ol><li>Backend/Arquitetura da Informação e API REST</li><li>FrontEnd/Consumo dos dados</li><li>Empacotar e lançar!</li></ol><p>Essa abstração demonstra como é simples o caminho de lançamento de um aplicativo que pode ser usado em diversos dispositivos.</p><h3 id="Passo-1-Criando-a-API"><a href="#Passo-1-Criando-a-API" class="headerlink" title="Passo 1: Criando a API."></a>Passo 1: Criando a API.</h3><p>No método que usa WordPress, fazemos a API com a ajuda do CMS e um plugin especial, chamado <a href="http://wp-api.org" target="_blank" rel="noopener">WP-API</a>, mas <strong>atenção: no repositório oficial chama-se WP REST API</strong>.</p><p>A estruturação do Conteúdo pode ser feita através dos nativos Custom Post Types e Custom Fields, com, ou sem, ajuda de plugins.</p><p>No WorkShop recomendei o <a href="https://wordpress.org/plugins/types/" target="_blank" rel="noopener">Types</a>, por uma questão de agilidade. Com ele, em alguns clicks, criamos os Post Types e Custom Fields, mas poderia ser tudo feito ‘na unha’, ou com outro plugin.</p><p>Ao terminar essa fase, temos disponível o caminho <code>urldosite.com.br/wp-json</code>, que expõe os endpoints disponíveis, como o que usaremos no teste: /posts.</p><p><strong>Pra quem nunca trabalhou com JSON</strong>, recomendei MANTER A CALMA e a cabeça aberta. hehe. Ah, e também usar este <a href="http://json.parser.online.fr/" target="_blank" rel="noopener">Json Parser</a>, que ajuda MUITO a entender a estrutura e conteúdo do JSON que nossa API nos retorna.</p><h3 id="Passo-2-Consumindo-os-Dados-da-API"><a href="#Passo-2-Consumindo-os-Dados-da-API" class="headerlink" title="Passo 2: Consumindo os Dados da API"></a>Passo 2: Consumindo os Dados da API</h3><p>Apesar de ser possível utilizar qualquer método para consumir os dados, gosto de apresentar o <a href="http://ionicframework.com" target="_blank" rel="noopener">Ionic Framework</a> para quem ainda não conhece.</p><p>Ele traz o melhor do Cordova/Phonegap e AngularJS com vários <em>tweaks</em> para mobile development. Além de um cli fora do normal de bem feito, que nos permite desenvolver em Live Reload e servidor com entrada externa.</p><p>Com o <em>$http</em> do AngularJS, consumimos a api, deixando os dados retornados no endpoint <strong>/posts</strong> na variável $scope.data.</p><p>Dessa forma, com o ng-repeat, fazemos um loop nela, que nos permite listar o título de cada um dos posts. Veja só como fazemos em nosso controller:</p><figure class="highlight javascript"><figcaption><span>[nomeDoApp/www/js/controllers.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'starter.controllers'</span>, [])</span><br><span class="line"><span class="comment">//vamos editar apenas este controller:</span></span><br><span class="line">.controller(<span class="string">'DashCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http</span>) </span>&#123;</span><br><span class="line">    $http.get(<span class="string">'http://localhost/MeuWordPress/wp-json/posts'</span>)</span><br><span class="line">      .success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        $scope.posts = data; </span><br><span class="line">      &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>Agora, basta executar o Loop com Ng-repeat no HTML:</p><figure class="highlight html"><figcaption><span>[nomeDoApp/www/templates/tabs-dash.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- (após o &lt;ion-content class="padding"&gt;) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"post in posts"</span>&gt;</span></span><br><span class="line">      &#123;&#123;post.title&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Com apenas isso, temos o exemplo mais simplista possível de consumo da API REST.</p><h2 id="3-Empacotar-e-Publicar"><a href="#3-Empacotar-e-Publicar" class="headerlink" title="3. Empacotar e Publicar"></a>3. Empacotar e Publicar</h2><p>No WorkShop, indiquei algumas formas de Empacotar nossa aplicação, como:</p><ul><li>Phonegap Build, ou o próprio Ionic para empacotar para Android, iOS e Windows Phone.</li><li>nw.js e sua versão GUI para Desktop (Linux, Windows ou Mac)</li><li>Os SDKs específicos dos fabricantes de SmartTvs, que nos permitem empacotar aplicações para televisão</li></ul><hr><h2 id="Resultado"><a href="#Resultado" class="headerlink" title="Resultado:"></a>Resultado:</h2><p>Apesar do tempo reduzido ter nos levado à um exemplo bem simplista, temos tudo necessário para criar aplicações incríveis de forma facílima e prática.</p><p>Vimos como criar a API sem nenhuma linha de código (lol :P), e como consumir de forma fácil.</p><p>À partir daí, temos um imenso leque de possibilidades, onde o limite vai ser a criatividade de cada um.</p><h3 id="A-Colinha-CheatSheet-do-Wokshop-Criando-Apps-Multi-Dispositivos-e-servindo-o-conteudo-com-WordPress"><a href="#A-Colinha-CheatSheet-do-Wokshop-Criando-Apps-Multi-Dispositivos-e-servindo-o-conteudo-com-WordPress" class="headerlink" title="A Colinha: CheatSheet do Wokshop Criando Apps Multi Dispositivos e servindo o conteúdo com WordPress:"></a>A Colinha: CheatSheet do Wokshop Criando Apps Multi Dispositivos e servindo o conteúdo com WordPress:</h3><p><iframe src="//pt.slideshare.net/slideshow/embed_code/key/7pql4vRNiRJNB0" width="100%" height="460" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//pt.slideshare.net/romulozoch/cheatsheet-workshop-criando-apps-multidispositivos-e-servindo-contedo-com-wordpress" title="Cheatsheet - Workshop ­ Criando APPs Multi­dispositivos e servindo conteúdo com WordPress" target="_blank">Cheatsheet - Workshop ­ Criando APPs Multi­dispositivos e servindo conteúdo com WordPress</a> </strong> from <strong><a href="//www.slideshare.net/romulozoch" target="_blank">Rômulo Zoch</a></strong> </div></p><h3 id="E-no-final…"><a href="#E-no-final…" class="headerlink" title="E no final…."></a>E no final….</h3><p>O evento foi muito maneiro e a organização excelente, mas isso, claro, não impediu alguns probleminhas. </p><p>Eu fui sortudo e me deparei com o Wifi estragado na sala de Workshops, o que acabou gerando transferência para um andar inferior, e tomou bastante tempo, diminuindo um pouco o tempo hábil que havia planejado para este WorkShop.</p><p>Como reparação para nossos queridos WordCampers, ofereci à quem me mandou e-mail um convite/link para o Hangout Especial, que farei como Bônus para quem participou.<br>Nele, veremos na prática bastante além do básicos dos passos 1, 2 e 3, e faremos uma App com guia de receitas, distribuida para Mobile e Desktop. (Com instalador!)</p><p>Então quem esteve no WorkShop e mandou e-mail vai poder não só revisar o conteúdo, como tirar eventuais dúvidas que surgiram ao longo da semana, e aprender algumas outras técnicas interessantes para o nosso processo de criação de Apps Multi dispositivos, com conteúdo servido via WordPress.</p><p>(aguardem o link, hoje dia 17/06 ainda não enviei)</p><p>:)</p><hr><h2 id="Agradecimentos"><a href="#Agradecimentos" class="headerlink" title="Agradecimentos:"></a>Agradecimentos:</h2><p>Quero agradecer à organização do WordCamp BH - em especial ao Valério Souza - pelo convite, e à todos que foram prestigiar o evento e também meu WorkShop.</p><p><strong>Agradecimento super especial</strong><br>Para o grande mestre <a href="http://blog.da2k.com.br/" target="_blank" rel="noopener">Daciuk</a> que me ajudou demás com o meu netbook após o problema da internet, e ao excelentíssimo sr. @nicholas_io, que me permitiu utilizar o seu lindo Mac Book para apresentação (Nunca mais lavo minha mão :O)</p><p>Também à todos que mandaram feedback para mim ou para organização, e à todos que puderem aproveitar o que eu passei, de forma prática em suas vidas.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/meu-workshop-criando-apps-multidispositivos-e-servindo-o-conteudo-com-wordpress-no-wordcamp-bh-wordcampbh.jpg&quot; alt=&quot;meu-worksh
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://rcdevlabs.github.io/tags/javascript/"/>
    
      <category term="REST" scheme="http://rcdevlabs.github.io/tags/rest/"/>
    
      <category term="API" scheme="http://rcdevlabs.github.io/tags/api/"/>
    
      <category term="APP" scheme="http://rcdevlabs.github.io/tags/app/"/>
    
      <category term="WordPress" scheme="http://rcdevlabs.github.io/tags/wordpress/"/>
    
      <category term="WordCamp" scheme="http://rcdevlabs.github.io/tags/wordcamp/"/>
    
      <category term="WorkShop" scheme="http://rcdevlabs.github.io/tags/workshop/"/>
    
      <category term="PHP" scheme="http://rcdevlabs.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Google Maps API - Parte 6 - Pegando local do usuário com HTML5 Geolocation</title>
    <link href="http://rcdevlabs.github.io/2015/02/22/google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation/"/>
    <id>http://rcdevlabs.github.io/2015/02/22/google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation/</id>
    <published>2015-02-23T02:59:59.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation.jpg" alt="google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation"></p><p>No #1postperday de hoje veremos como utilizar o GeolocationSservice para pegar a localização do usuário de forma automágica.</p><p><hr></p><h3 id="Todas-as-partes-da-serie-Google-Maps-API"><a href="#Todas-as-partes-da-serie-Google-Maps-API" class="headerlink" title="Todas as partes da série Google Maps API:"></a>Todas as partes da série Google Maps API:</h3><ul><li><p><a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">Parte 1 - Criando um Mapa Simples</a></p></li><li><p><a href="/2015/02/18/google-maps-api-parte-2-marcadores-personalizados/">Parte 2 - Adicionando Marcadores Personalizados</a></p></li><li><p><a href="/2015/02/19/google-maps-api-parte-3-geocoding-como-converter-endereco-para-coordenadas/">Parte 3 - Converter Endereços em Coordenadas com Geocoding</a></p></li><li><p><a href="/2015/02/20/google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes/">Parte 4 - Manipulando o Mapa com métodos</a></p></li><li><p><a href="/2015/02/21/google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places/">Parte 5 - Autocompletar com Google Places e Utilizar marcadores criados</a></p></li><li><p>[Parte 6 - Esta parte]</p></li></ul><hr><h2 id="Pegando-a-Localizacao-do-Usuario-com-HTML5-GeoLocation"><a href="#Pegando-a-Localizacao-do-Usuario-com-HTML5-GeoLocation" class="headerlink" title="Pegando a Localização do Usuário com HTML5 GeoLocation:"></a>Pegando a Localização do Usuário com HTML5 GeoLocation:</h2><p>GeoLocation é uma das mais divertidas funções do HTML5. E é super fácil de usar.</p><p>Inicie o workflow rodando <code>gulp</code> com o terminal na pasta do projeto, e vamos editar o arquivo src/js/maps.js.</p><p>Insira ao final do arquivo:</p><figure class="highlight javascript"><figcaption><span>maps.js (insira ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">localizarUsuario</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.navigator &amp;&amp; <span class="built_in">window</span>.navigator.geolocation) &#123;</span><br><span class="line">   <span class="keyword">var</span> geolocation = <span class="built_in">window</span>.navigator.geolocation;</span><br><span class="line">   geolocation.getCurrentPosition(sucesso, erro);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     alert(<span class="string">'Geolocalização não suportada em seu navegador.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sucesso</span>(<span class="params">posicao</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(posicao);</span><br><span class="line">    <span class="keyword">var</span> latitude = posicao.coords.latitude;</span><br><span class="line">    <span class="keyword">var</span> longitude = posicao.coords.longitude;</span><br><span class="line">    alert(<span class="string">'Sua latitude estimada é: '</span> + latitude + <span class="string">' e longitude: '</span> + longitude )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">erro</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A função em sí consiste em 2 partes: primeiro um IF que verifica se o navegador suporta Geolocation (e mostra um erro se não suportar), e 2 funções: sucesso e erro.</p><p>A função que faz a ´mágica’ é <strong>geolocation.getCurrentPosition()</strong>, e as funções sucesso() e erro() são parâmetros dela. A primeira é chamada se der tudo certo, a segunda caso haja um erro.</p><p>O parâmetro da função sucesso é a posição estimada. Um objeto que contém informações como altitude, latitude, longitude e velocidade.</p><h3 id="Chamando-a-funcao-localizarUsuario"><a href="#Chamando-a-funcao-localizarUsuario" class="headerlink" title="Chamando a função localizarUsuario()"></a>Chamando a função localizarUsuario()</h3><p>Vamos inserir mais um botão em nosso HTML para que o usuário possa escolher quando ativar o Geolocation.</p><p>Insira o seguinte código após o <code>&lt;body&gt;</code>:</p><figure class="highlight html"><figcaption><span>index.html (insira após abertura da tag BODY)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"localizarUsuario()"</span>&gt;</span>Minha Localização<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Agora abra seu navegador (que já deve estar com a página e o liveReload iniciado) ou rode <code>gulp</code>, novamente, no console.</p><h2 id="Usuario-em-movimento"><a href="#Usuario-em-movimento" class="headerlink" title="Usuário em movimento"></a>Usuário em movimento</h2><p>Caso o usuário esteja em movimento, você pode monitorar sua localização. Não usaremos isso neste artigo, mas é uma boa você saber, basta usar, por exemplo</p><figure class="highlight javascript"><figcaption><span>EXEMPLO</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> movimento = <span class="built_in">window</span>.navigator.geolocation.watchPosition(<span class="function"><span class="keyword">function</span>(<span class="params">posicao</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(posicao);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//para parar de monitorar:</span></span><br><span class="line"> <span class="built_in">window</span>.navigator.geolocation.clearWatch(movimento);</span><br></pre></td></tr></table></figure><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>O #1postperday de hoje foi também uma #rapidinha.</p><p>A dica de Geolocation é rápída, simples e eficaz - além de muito útil.</p><p>Com ela e o que veremos no próximo artigo (traçar rotas) fica muito fácil de criar aplicações maneiras estilo GPS.</p><p>Fique ligado para o próximo artigo!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation.jpg&quot; alt=&quot;google-maps-api-parte-6-pegando-local-do-usua
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://rcdevlabs.github.io/tags/javascript/"/>
    
      <category term="Série Google Maps" scheme="http://rcdevlabs.github.io/tags/serie-google-maps/"/>
    
      <category term="Gulp" scheme="http://rcdevlabs.github.io/tags/gulp/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
      <category term="rapidinha" scheme="http://rcdevlabs.github.io/tags/rapidinha/"/>
    
  </entry>
  
  <entry>
    <title>Google Maps API - Parte 5 - Autocompletar endereços e Locais com Google Places!</title>
    <link href="http://rcdevlabs.github.io/2015/02/21/google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places/"/>
    <id>http://rcdevlabs.github.io/2015/02/21/google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places/</id>
    <published>2015-02-22T00:27:41.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places.jpg" alt="google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places"></p><p>Hoje usaremos a library Google Places para prover uma melhor experiência de usuário com um auto-completar de endereços lindão e bem fácil de implementar.</p><p><hr></p><h3 id="Todas-as-partes-da-serie-Google-Maps-API"><a href="#Todas-as-partes-da-serie-Google-Maps-API" class="headerlink" title="Todas as partes da série Google Maps API:"></a>Todas as partes da série Google Maps API:</h3><ul><li><p><a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">Parte 1 - Criando um Mapa Simples</a></p></li><li><p><a href="/2015/02/18/google-maps-api-parte-2-marcadores-personalizados/">Parte 2 - Adicionando Marcadores Personalizados</a></p></li><li><p><a href="/2015/02/19/google-maps-api-parte-3-geocoding-como-converter-endereco-para-coordenadas/">Parte 3 - Converter Endereços em Coordenadas com Geocoding</a></p></li><li><p><a href="/2015/02/20/google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes/">Parte 4 - Manipulando o Mapa com métodos</a></p></li><li><p>Esta é a Parte 5. ;-)</p></li><li><p><a href="/2015/02/22/google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation/">Parte 6 - Pegando localização do Usuário com HTML5 Geolocation</a></p></li></ul><hr><h3 id="Demo-Resultado-do-artigo-de-hoje"><a href="#Demo-Resultado-do-artigo-de-hoje" class="headerlink" title="Demo: Resultado do artigo de hoje"></a>Demo: Resultado do artigo de hoje</h3><p>Ao final do artigo de hoje, devemos ter construído em nossa série Google Maps API até agora algo mais ou menos assim:<br>(clique em inciar, depois digite e avalie alguns endereços ou locais (ex: parque barigui, jardim botanico, etc))</p><p></p><p data-height="439" data-theme-id="12356" data-slug-hash="MYGabM" data-default-tab="result" data-user="romuloctba" class="codepen">See the Pen <a href="http://codepen.io/romuloctba/pen/MYGabM/" target="_blank" rel="noopener">Google Maps: Autocompletar google Places + custom markers</a> by Romulo_Ctba (<a href="http://codepen.io/romuloctba" target="_blank" rel="noopener">@romuloctba</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><h3 id="Continuando-de-onde-paramos"><a href="#Continuando-de-onde-paramos" class="headerlink" title="Continuando de onde paramos"></a>Continuando de onde paramos</h3><p>Você pode pegar o código, como ficou ao final da Parte III <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/archive/66e99fb4b565e85980ea3ac386e57bb57eb5a3f5.zip" target="_blank" rel="noopener">clicando aqui</a>, <strong>ou continuar de onde parou.</strong></p><p>Se pegar acima, não esqueça de rodar o <code>npm install</code> na pasta do projeto, com o terminal.<br>Também deve ter o Gulp e Nodejs instalados.<br>Se tiver dúvidas, <a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">veja este post</a>.</p><p><strong>Para começar a trabalhar, abra a pasta do projeto com o terminal e rode:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p>Isso deve abrir o browser, com liveReload. Caso não abra automaticamente, acesse <a href="http://localhost:1337" target="_blank" rel="noopener">http://localhost:1337</a></p><hr><h2 id="API-Google-Places-O-que-e-e-como-usar"><a href="#API-Google-Places-O-que-e-e-como-usar" class="headerlink" title="API Google Places - O que é e como usar."></a>API Google Places - O que é e como usar.</h2><p>API Google Places permite consultas à locais, como endereços, empresas, pontos turísticos - e muito mais - de forma fácil e simples.</p><p>Com a API do google places não é necessário informar coordenadas (Latitude e Longitude) para localizar pontos no mapa. Ela, por sí só, faz a conversão geocode , e retorna um Local (que contém diversas informações), nao apenas coordenadas. </p><p>Além disso, a API do Google Places tem integração com eventos e Ações no Local.</p><p>Ela é bem maneira, e nos permite expandir o nível de interação usuário x mapa de forma incrível.</p><p>Google Places oferece uma api própria,  mas que pode ser incluída como library na API do Google Maps V3.</p><blockquote><p>A API do Google Places oferece autocomplete facílimo de implementar, que agrega muito na Experiência do Usuário.</p></blockquote><h3 id="Incluindo-Google-Places-em-sua-aplicacao"><a href="#Incluindo-Google-Places-em-sua-aplicacao" class="headerlink" title="Incluindo Google Places em sua aplicação"></a>Incluindo Google Places em sua aplicação</h3><p>Para incluir, adicionaremos o parâmetro  <code>&amp;libraries=places</code> na url do Javascript do google maps.<br>Edite o arquivo index.html da pasta src, alterando a url da tag <code>&lt;script&gt;</code> conforme segue:</p><figure class="highlight html"><figcaption><span>index.html (altere a url da tag script)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"http://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Agora, você pode fazer uso da biblioteca places.</p><p>Iremos utilizar o autocompletar para melhorar nossa interface (que por sinal, tá bem descuidada né? hehe tento manter simples pra não confundir ninguém)</p><h2 id="Google-Places-Autocompletar-enderecos-e-locais"><a href="#Google-Places-Autocompletar-enderecos-e-locais" class="headerlink" title="Google Places - Autocompletar endereços e locais"></a>Google Places - Autocompletar endereços e locais</h2><p>Vamos instanciar o google.maps.places.Autocomplete() na variável autoComplete. </p><p>A google.maps.places.Autocomplete() recebe 2 parâmetros: 1. o elemento onde será criado, e 2. um objeto com opcoes.</p><p>As seguintes opções estão disponíveis:</p><ul><li><p>componentRestrictions<br>  A única opção disponível para esta configuração é ‘country’, que recebe código do país, com 2 letras (ex: br, us, au, etc).<br>  Normalmente <strong>não usamos</strong> pois é automaticamente definido.</p></li><li><p>bounds<br>  Região máxima em que o local deve ser pesquisado. Recebe como valor um <code>LatLngBounds(sw?:LatLng, ne?:LatLng)</code>, conforme vimos no último artigo</p></li><li><p>types<br>  Esta é a option mais utilizada: define os tipos de locais que devem ser pesquisados.<br>  Veja <a href="https://developers.google.com/places/documentation/supported_types?hl=pt-br" target="_blank" rel="noopener">uma lista de tipos de local suportados aqui</a>.</p></li></ul><p>Iremos instanciar um google.maps.Autocomplete()    em nosso input de endereço. Isso será feito <strong>dentro da function initialize()</strong>.</p><p>Altere a function initialize, do arquivo js/maps.js , incluindo as linhas à seguir ao final dela (após as instancias <code>map</code> e <code>geocode</code>:</p><figure class="highlight javascript"><figcaption><span>maps.js (insira ao final da funcao initialize())</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="keyword">var</span> autoCompleteInput = <span class="built_in">document</span>.getElementById(<span class="string">'endereco'</span>);</span><br><span class="line"><span class="keyword">var</span> autoCompleteOpcoes = &#123;</span><br><span class="line">  types: [<span class="string">'geocode'</span>]</span><br><span class="line">&#125;</span><br><span class="line">autocomplete = <span class="keyword">new</span> google.maps.places.Autocomplete(autoCompleteInput,autoCompleteOpcoes);</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Note que definimos a variável <code>autoCompleteInput</code> com o elemento do id <code>#endereco</code>, que é nosso input já existente no HTML (hoje usado para geocode).</p><blockquote><p><strong> Dica: Ao utilizar o places.Autocomplete(), você pode querer aumentar a largura do seu input (via css), para melhorar a visibilidade. </strong></p></blockquote><p>A variável <code>autoCompleteOpcoes</code> com o objeto, definindo types como geocode.</p><p>Salvando, o liveReload deve atualizar sua página. Comece a digitar um endereço, e veja o autocomplete em ação.</p><hr><h2 id="Eventos-e-Metodos-do-Google-Places-Autocompletar"><a href="#Eventos-e-Metodos-do-Google-Places-Autocompletar" class="headerlink" title="Eventos e Métodos do Google Places Autocompletar"></a>Eventos e Métodos do Google Places Autocompletar</h2><p>Existem 4 métodos que podem ser usados em uma instância do google.maps.places.Autocomplete():</p><ul><li>getBounds()</li><li>getPlace()</li><li>setBound(objetoBoundsLatLng)</li><li>setTypes(arrayComTiposDeLocais)</li></ul><p>Os 2 primeiros retornam os limites (bounds) e local encontrado, respectivamente.<br>O terceorp, define o limite, e pede um objeto Bounds, conforme vimos no artigo anterior.<br>O último método acima define o(s) tipo(s) de locais para pesquisar. Seu parãmetro é um array.</p><p>O Evento que o places.Autocomplete() dispara é um só: <code>place_changed</code>. Ele é disparado toda vez que um resultado é escolhido pelo usuário (com enter, ou click). Pode ser utilizado assim:<br><code>google.maps.event.addListener(autocomplete, &#39;place_changed&#39;, funcaoAqui)</code>, mas não usaremos isso agora.</p><h2 id="Usar-o-local-escolhido-no-autocompletar"><a href="#Usar-o-local-escolhido-no-autocompletar" class="headerlink" title="Usar o local escolhido no autocompletar"></a>Usar o local escolhido no autocompletar</h2><p>Para isso, usaremos o método getPlace(). Estamos colocando-o dentro de uma função, e usando para criar um marcador com a função criaMarcador (basicamente a mesma coisa que a função <code>converte()</code>, que já tinhamos. Ela, aliás, vai sair fora).</p><p>Ao final do arquivo src/maps.js, insira o seguinte código:</p><figure class="highlight javascript"><figcaption><span>maps.js (insira ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">novoLocal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> local = autocomplete.getPlace();</span><br><span class="line">  <span class="keyword">var</span> seletor = <span class="built_in">document</span>.getElementById(<span class="string">"avaliacao"</span>);</span><br><span class="line">  <span class="keyword">var</span> avaliacao = seletor.options[seletor.selectedIndex].value;</span><br><span class="line">  <span class="keyword">var</span> imagemMarcador = imgArray[avaliacao];</span><br><span class="line">  <span class="keyword">var</span> marcador = &#123;</span><br><span class="line">    latitude: local.geometry.location.k</span><br><span class="line">    , <span class="attr">longitude</span>: local.geometry.location.D</span><br><span class="line">    , <span class="attr">titulo</span>: local.name</span><br><span class="line">    , <span class="attr">imagem</span>: imagemMarcador</span><br><span class="line">  &#125;</span><br><span class="line">  criaMarcador(marcador, map);</span><br><span class="line">  map.setCenter(local.geometry.location)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">E agora sete a função novoLocal() como ação do onClick do botão que fica logo após o select, no **index.html**.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Mude o texto também, que estava 'converter', para 'avaliar':</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>html index.html (altere o atributo onclick <span class="keyword">do</span> botão, conforme abaixo)</span><br><span class="line">(...)</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="novoLocal()"&gt;Avaliar&lt;/</span>button&gt;</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Agora você pode criar marcadores avaliados com base nos places do autocompletar!</p><p>Experimente digitar alguns pontos turísticos da sua cidade.<br>Se quiser brincar com Curitiba, recomendo avaliar: parque Barigui, Jardim Botanico, Passeio Publico, Aeropoto Afonso Pena.</p><p>Veja como digitar algumas letras logo tráz resultado!</p><h2 id="Lendo-e-listando-os-marcadores-criados"><a href="#Lendo-e-listando-os-marcadores-criados" class="headerlink" title="Lendo e listando os marcadores criados"></a>Lendo e listando os marcadores criados</h2><p>Para fechar por hoje, iremos ler o array <code>marcadores</code>, criando um botão para cada marcador, de modo que possamos acessá-los com 1 click:</p><p>Coloque ao final do maps.js</p><figure class="highlight javascript"><figcaption><span>maps.js (adicione, ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listaMarcadores</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> qtdMarcadores = marcadores.length;</span><br><span class="line">  <span class="keyword">var</span> listaDeMarcadores = <span class="built_in">document</span>.getElementById(<span class="string">'listaDeMarcadores'</span>);</span><br><span class="line">  listaDeMarcadores.innerHTML = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; qtdMarcadores; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">    btn.setAttribute(<span class="string">"onclick"</span>,<span class="string">"map.setCenter(marcadores["</span>+i+<span class="string">"].position);map.setZoom(20);"</span>)</span><br><span class="line">    btn.appendChild(<span class="built_in">document</span>.createTextNode(marcadores[i].title));</span><br><span class="line">    listaDeMarcadores.appendChild(btn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Com essa função, chamada listaMarcadores(), primeiro vemos quantos temos com <code>marcadores.length</code>, na variavel <code>qtdMarcadores</code>. </p><p>Aí, pegamos um elemento com id #listaDeMarcadores, limpamos seu conteúdo com <code>innerHtml = &quot;&quot;</code>,. (Jájá vamos criar esse elemento, calma)</p><p>Nosso <code>for()</code> vai executar para cada item do marcador, criando um <code>&lt;button&gt;</code> com <code>createElement()</code>.</p><p>Aí definimoss o <code>onClick</code> deste button para executar o método do objeto mapa <code>setCenter()</code> para a propriedade position do marcador ‘da vez’.</p><p>Por último, inserimos com <code>createTextNode()</code> o título do marcador como texto do botão, e inserimos o botão ao final.</p><h3 id="“Chamando”-a-funcao-listaMarcadores"><a href="#“Chamando”-a-funcao-listaMarcadores" class="headerlink" title="“Chamando” a função listaMarcadores()"></a>“Chamando” a função listaMarcadores()</h3><p>Iremos executar a função que cria o botão logo após criar um novo marcador, portanto iremos inserir <code>listaMarcadores()</code> ao final <strong>da função criaMarcador</strong>.</p><p>A função <code>criaMarcador() deve ficar assim: (incluir APENAS</code>listaMarcadores()`)</p><figure class="highlight javascript"><figcaption><span>maps.js (a função criaMarcador() deve ficar assim:)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> criaMarcador = <span class="function"><span class="keyword">function</span>(<span class="params">marcador, mapa</span>) </span>&#123;</span><br><span class="line">  (...)</span><br><span class="line">  map.setCenter(novoMarcador.position)</span><br><span class="line">  listaMarcadores();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Criando-a-div-que-recebe-os-botoes"><a href="#Criando-a-div-que-recebe-os-botoes" class="headerlink" title="Criando a div que recebe os botões"></a>Criando a div que recebe os botões</h3><p>No index.html, vamos criar a div com o id #listaDeMarcadores, que receberá os botões criados pela função listaMarcadores().</p><figure class="highlight html"><figcaption><span>index.html (insira logo após a div com id map_canvas)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map_canvas"</span> <span class="attr">style</span>=<span class="string">"width:600px; height:300px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"listaDeMarcadores"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><h3 id="Apagando-codigo-obsoleto-limpando-um-pouco-o-projeto"><a href="#Apagando-codigo-obsoleto-limpando-um-pouco-o-projeto" class="headerlink" title="Apagando código obsoleto - limpando um pouco o projeto."></a>Apagando código obsoleto - limpando um pouco o projeto.</h3><p>Para nosso código ficar menos bagunçado possível - lembre que estamos sacrificando algumas best pratices (quando inevitável), em pról da didática - devemos excluir duas funções que não serão mais usadas:</p><ol><li><p>Exclua <strong>toda</strong> a <strong>function adiciona()</strong> no maps.js</p></li><li><p>Exclua <strong>toda</strong> a <strong>function converte()</strong> no maps.js (agora usamos ela na novoLocal(), né)</p></li><li><p>Exclua o <code>&lt;button&gt;</code> com o texto <code>adiciona!</code>, pois ele não é mais necessário (index.html)</p></li></ol><h2 id="Testando-nosso-codigo"><a href="#Testando-nosso-codigo" class="headerlink" title="Testando nosso código"></a>Testando nosso código</h2><p>Com a task <code>gulp</code> já rodando, e seu navegador aberto, clique em <code>inciar</code>. Agora, digite uns pontos turísticos de sua cidade, ou de curitiba, avalie cada um deles, e clique em <code>avaliar</code>.</p><p>Após criar alguns, navegue entre eles nos botões abaixo do mapa!</p><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Esse autocompletar do google places é Melzinho na Chupeta mesmo!</p><p>Imagine o tanto de coisas bacanas que da pra fazer, como filtrar por <code>types</code>/tipos de locais….</p><p>No próximo artigo, veremos como chamar o <code>StreetView</code> e descobrir o que é POV (hehehe), entre outras coisinhas legais.</p><p>Ah, para ver o que foi alterado em nosso projeto, <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/commit/37babe6adc3a633ec6436f4c28272414356048bc" target="_blank" rel="noopener">acesse este commit no github</a> ou <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/archive/37babe6adc3a633ec6436f4c28272414356048bc.zip" target="_blank" rel="noopener">clique aqui para baixar</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places.jpg&quot; alt=&quot;google-maps-api-parte-5-autocompletar-end
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://rcdevlabs.github.io/tags/javascript/"/>
    
      <category term="Série Google Maps" scheme="http://rcdevlabs.github.io/tags/serie-google-maps/"/>
    
      <category term="Gulp" scheme="http://rcdevlabs.github.io/tags/gulp/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
  </entry>
  
  <entry>
    <title>Google Maps API - Parte 4 - Manipulando o Mapa (Angulo 3d, Satélite, Zoom, limites, etc....)</title>
    <link href="http://rcdevlabs.github.io/2015/02/20/google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes/"/>
    <id>http://rcdevlabs.github.io/2015/02/20/google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes/</id>
    <published>2015-02-21T01:59:59.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes.jpg" alt="google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes"></p><p>Com os primeiros passos da série, temos um mapa que insere marcadores à partir de um endereço e uma avaliação. Voltemos agora ao nosso objeto Map. Veremos alguns métodos úteis para trabalhar com ele.</p><p><hr></p><h3 id="Todas-as-partes-da-serie-Google-Maps-API"><a href="#Todas-as-partes-da-serie-Google-Maps-API" class="headerlink" title="Todas as partes da série Google Maps API:"></a>Todas as partes da série Google Maps API:</h3><ul><li><p><a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">Parte 1 - Criando um Mapa Simples</a></p></li><li><p><a href="/2015/02/18/google-maps-api-parte-2-marcadores-personalizados/">Parte 2 - Adicionando Marcadores Personalizados</a></p></li><li><p><a href="/2015/02/19/google-maps-api-parte-3-geocoding-como-converter-endereco-para-coordenadas/">Parte 3 - Converter Endereços em Coordenadas com Geocoding</a></p></li><li><p>Esta é a Parte 4</p></li><li><p><a href="/2015/02/21/google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places/">Parte 5 - Autocompletar locais e endereços, listar e acessar marcadores</a></p></li><li><p><a href="/2015/02/22/google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation/">Parte 6 - Pegando localização do Usuário com HTML5 Geolocation</a></p></li></ul><hr><h3 id="Continuando-de-onde-paramos"><a href="#Continuando-de-onde-paramos" class="headerlink" title="Continuando de onde paramos"></a>Continuando de onde paramos</h3><p>Você pode pegar o código, como ficou ao final da Parte III <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/archive/66e99fb4b565e85980ea3ac386e57bb57eb5a3f5.zip" target="_blank" rel="noopener">clicando aqui</a>, <strong>ou continuar de onde parou.</strong></p><p>Se pegar acima, não esqueça de rodar o <code>npm install</code> na pasta do projeto, com o terminal.<br>Também deve ter o Gulp e Nodejs instalados.<br>Se tiver dúvidas, <a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">veja este post</a>.</p><p><strong>Para começar a trabalhar, abra a pasta do projeto com o terminal e rode:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p>Isso deve abrir o browser, com liveReload. Caso não abra automaticamente, acesse <a href="http://localhost:1337" target="_blank" rel="noopener">http://localhost:1337</a></p><hr><h2 id="Metodos-do-objeto-google-maps-Map"><a href="#Metodos-do-objeto-google-maps-Map" class="headerlink" title="Métodos do objeto google.maps.Map"></a>Métodos do objeto google.maps.Map</h2><p>Para manipular nosso mapa, a API Javascript Google Maps V3 disponibiliza alguns métodos pra gente! São eles:</p><ul><li>getBounds()</li><li>getDiv()</li><li>fitBounds(objetoBounds)</li><li>setOptions(objetoOpcoes)</li><li>getProjection()</li><li>panBy(x,y)</li><li>panTo(objetoLatLng)</li><li>panToBounds(objetoBounds)</li><li>getCenter() e setCenter(objetoLatLng)</li><li>getHeading() e setHeading(numero)</li><li>getMapTypeId() e setMapTypeId(objetoMapTypeId)</li><li>getStreetView() e setStreetView(objetoStreetViewPanorama)</li><li>getTilt() e setTitlt(0ou45)</li><li>getZoom() e setZoom(numero)</li></ul><p>Veremos alguns destes métodos na prática. Tomei a liberdade de nomear os parâmetros.</p><h2 id="Testando-metodos-via-console"><a href="#Testando-metodos-via-console" class="headerlink" title="Testando métodos via console!"></a>Testando métodos via console!</h2><p>Após executar <code>gulp</code>, seu servidor deve ter iniciado.</p><p>Clique em Iniciar para criar o mapa, e digite um endereço, avalie-o e clique em <code>converter</code>.</p><p>Vamos utilizar uma ferramenta <em>muito útil no workflow de qualquer desenvolvedor web</em>: o console.</p><p>No google chrome, aperte f12. </p><p>Lembra que nosso mapa está instanciado na variável <code>map</code>? Pois podemos utilizá-la direto no console!</p><p>Digite no console:</p><p><strong>Atenção: Cada linha é um comando, após digitar, tecle ENTER.  (ignore as linhas que começam com //). E mantenha a janela aberta, para ver os resultados!</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">map.setMapTypeId(google.maps.MapTypeId.HYBRID);</span><br><span class="line">//viu? Agora vamos aproximar:</span><br><span class="line">map.setZoom(18);</span><br><span class="line">//Agora, centralizamos no marcador que você criou:</span><br><span class="line">map.setCenter(marcadores[0].position);</span><br><span class="line">//Agora, mudamos o plano de visão do mapa, 0 e 45</span><br><span class="line">map.setTilt(0);</span><br><span class="line">map.setTilt(45);</span><br><span class="line">//Agora, vamos deixar o marcador mais àdireita:</span><br><span class="line">map.panBy(-200, 0);</span><br></pre></td></tr></table></figure><p>Acho que deu pra ter a idéia né?</p><p>Abaixo vou explicar o que são os objetos que alguns métodos usam como parâmetros.</p><p>Como disse, tomei a liberdade de nomeá-los de forma para facilitar o entendimento. São eles:</p><ul><li><p><strong>Objeto Bounds</strong><br>  <strong>Nome na Documentação</strong>: google.maps.LatLngBounds<br>  <strong>O que é</strong>: Um retângulo que representa limite (de terreno) no mapa.<br>  <strong>Como criar</strong>: <strong><code>new google.maps.LatLngBounds(sw?LatLng, ne?LatLng);</code></strong><br>  Um LatLng representa o canto sudoeste, e outro o canto nordeste do retângulo que define os Bounds (limites) do mapa.<br>  Note que cada LatLng é um objeto do tipo abaixo:</p></li><li><p><strong>Objeto LatLng</strong><br>  <strong>Nome na Documentação</strong>: google.maps.LatLng<br>  <strong>Oque é</strong>: Objeto contendo latitude e longitude<br>  <strong>**Como criar</strong>: <code>new google.maps.LatLng(latitude, longitude)</code>**</p></li><li><p><strong>Objeto MapTypeId</strong><br>  <strong>Nome na Documentação</strong>: google.Maps.MapTypeId<br>  <strong>Oque é</strong>: representa diferentes tipo de mapa, sendo eles: HYBRID, ROADMAP, SATELLITE e TERRAIN. É parâmetro do options do mapa.<br>  <strong>Como usar</strong>: com o método setMapTypeId, por exemplo: <strong><code>map.setMapTypeId(google.maps.MapTypeId.SATELLITE</code></strong>, ou nas configurações ao inicializar o mapa.</p></li><li><p><strong>Objeto Opções</strong><br>Um objeto com as opções de configuração do mapa. O mesmo que usamos ao criar nosso mapa. Veja a lista completa de opções aqui: <a href="https://developers.google.com/maps/documentation/javascript/reference#MapOptions" target="_blank" rel="noopener">https://developers.google.com/maps/documentation/javascript/reference#MapOptions</a></p></li></ul><p>Você encontra uma relação dos métodos disponíveis, bem como de seus parâmetros, neste link: <a href="https://developers.google.com/maps/documentation/javascript/reference#Map" target="_blank" rel="noopener">https://developers.google.com/maps/documentation/javascript/reference#Map</a></p><hr><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Hoje o post foi um pouco ‘teórico’ e acabamos não fazendo quaisquer alterações em nosso código-fonte.</p><p>Mesmo assim, vimos os métodos disponíveis para utilizar em nossos mapas.</p><p>Testamos alungs direto no console do navegador - especialmente pra não bagunção nosso código fonte para o que faremos no próximo artigo.</p><p>Depois vimos como criar os diferentes objetos que podem ser passados como parâmetro em alguns dos métodos.</p><p>Agora, teoricamente, podemos criar controles personalizados e manipular zoom, posição e opções de nosso mapa em nossa aplicação.</p><p>Tudo que você fez pelo console poderia estar em uma função, ou no <code>onclick</code> de algum button.</p><blockquote><p><strong>A próxima parte será bem mais prática e divertida, não perca!</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes.jpg&quot; alt=&quot;google-maps-api-parte-4-manipulando-o-mapa-3d-sat
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://rcdevlabs.github.io/tags/javascript/"/>
    
      <category term="Série Google Maps" scheme="http://rcdevlabs.github.io/tags/serie-google-maps/"/>
    
      <category term="Gulp" scheme="http://rcdevlabs.github.io/tags/gulp/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
  </entry>
  
  <entry>
    <title>Google Maps API: Parte 3 - Como converter endereços para coordenadas</title>
    <link href="http://rcdevlabs.github.io/2015/02/19/google-maps-api-parte-3-geocoding-como-converter-endereco-para-coordenadas/"/>
    <id>http://rcdevlabs.github.io/2015/02/19/google-maps-api-parte-3-geocoding-como-converter-endereco-para-coordenadas/</id>
    <published>2015-02-19T12:49:12.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/google-maps-api-parte-3-geocoding-convertendo-enderecos-em-coordenadas.jpg" alt="google-maps-api-parte-3-geocoding-convertendo-enderecos-em-coordenadas"></p><p>Nas primeiras 2 partes vimos <a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">como criar um mapa básico</a> e <a href="/2015/02/18/google-maps-api-parte-2-marcadores-personalizados/">como adicionar marcadores</a>. Hoje, veremos como converter um endereço em coordenadas, para usá-lo com oque fizemos antes (^-^)y</p><p><hr></p><h3 id="Todas-as-partes-da-serie-Google-Maps-API"><a href="#Todas-as-partes-da-serie-Google-Maps-API" class="headerlink" title="Todas as partes da série Google Maps API:"></a>Todas as partes da série Google Maps API:</h3><ul><li><p><a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">Parte 1 - Criando um Mapa Simples</a></p></li><li><p><a href="/2015/02/18/google-maps-api-parte-2-marcadores-personalizados/">Parte 2 - Adicionando Marcadores Personalizados</a></p></li><li><p>Esta é a Parte 3</p></li><li><p><a href="/2015/02/20/google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes/">Parte 4 - Manipulando o Mapa com métodos</a></p></li><li><p><a href="/2015/02/21/google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places/">Parte 5 - Autocompletar locais e endereços, listar e acessar marcadores</a></p></li><li><p><a href="/2015/02/22/google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation/">Parte 6 - Pegando localização do Usuário com HTML5 Geolocation</a></p></li></ul><hr><h3 id="Continuando-de-onde-paramos"><a href="#Continuando-de-onde-paramos" class="headerlink" title="Continuando de onde paramos"></a>Continuando de onde paramos</h3><p>Você pode pegar o código, como ficou ao final da Parte II <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/archive/e4626da3640065bda6d8b21210a411f9d5065273.zip" target="_blank" rel="noopener">clicando aqui</a>, <strong>ou continuar de onde parou.</strong></p><p>Se pegar acima, não esqueça de rodar o <code>npm install</code> na pasta do projeto, com o terminal.<br>Também deve ter o Gulp e Nodejs instalados.<br>Se tiver dúvidas, <a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">veja este post</a>.</p><p><strong>Para começar a trabalhar, abra a pasta do projeto com o terminal e rode:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p>Isso deve abrir o browser, com liveReload. Caso não abra automaticamente, acesse <a href="http://localhost:1337" target="_blank" rel="noopener">http://localhost:1337</a></p><hr><h2 id="Enderecos-x-Coordenadas"><a href="#Enderecos-x-Coordenadas" class="headerlink" title="Endereços x Coordenadas"></a>Endereços x Coordenadas</h2><p>Na API do Google Maps existem alguns diferentes objetos que representam localização, e todos são construídos com base em coordenadas.</p><p>As coordenadas cartográficas consistem em Latitude e Longitude. Veja o que significa cada uma:</p><h3 id="O-que-e-“Latitude-e-Longitude”"><a href="#O-que-e-“Latitude-e-Longitude”" class="headerlink" title="O que é “Latitude e Longitude”?"></a>O que é “Latitude e Longitude”?</h3><ul><li><p><strong>Latitude</strong>: É a distancia angular (medida em graus) à partir do meridiano de Greenwitch. Representada por uma linha <strong><em>vertical</em></strong> no mapa. ( | )</p></li><li><p><strong>Longitude</strong>: É a distância angular (medida em graus) à partir do do Equador. Representada por uma linha <strong><em>horizontal</em></strong> ( – )</p></li></ul><p>O Brasil, por exemplo, está em latitude e longitude negativas. Isso por quê estamos à esquerda do meridiano de Greenwitch (no mapa) e abaixo da linha do Equador.</p><blockquote><p><strong>Para converter endereços em coordenadas, usamos o serviço Geocoder.</strong></p></blockquote><p>O serviço geocoder faz parte da API Google Maps, e já temos ele disponível em nosso projeto.</p><h2 id="Usando-o-servico-Geocoder-da-API-Javascript-do-Google-Maps"><a href="#Usando-o-servico-Geocoder-da-API-Javascript-do-Google-Maps" class="headerlink" title="Usando o serviço Geocoder da API Javascript do Google Maps"></a>Usando o serviço Geocoder da API Javascript do Google Maps</h2><p>Vamos instanciar o geocoder juntamente com a variável <code>map</code>. </p><p>Para isso, edite o arquivo <code>js/maps.js</code>. <strong>Insira a variável <code>geocoder</code></strong> na função <strong>initialize()</strong>, conforme abaixo:</p><figure class="highlight javascript"><figcaption><span>maps.js (Insira na função initialize)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  geocoder = <span class="keyword">new</span> google.maps.Geocoder();</span><br><span class="line">  map = <span class="keyword">new</span> google.maps.Map(divDoMapa, opcoes);</span><br><span class="line">&#125;</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Agora temos <code>geocoder</code> disponível para uso.<br>Criaremos uma função para utilízá-lo, que receberá 2 parâmetros: o <strong>endereco</strong> e a <strong>avaliacao</strong>.</p><p>Essa função executará o <strong>geocode()</strong> e depois a nossa <strong>criaMarcador()</strong>, com o resultado.</p><p>Adicione, ao final do arquivo <code>js/maps.js</code></p><figure class="highlight javascript"><figcaption><span>maps.js (insira ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">converteEndereco</span>(<span class="params">endereco, avaliacao</span>) </span>&#123;</span><br><span class="line">  geocoder.geocode( &#123; <span class="string">'address'</span>: endereco&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">resultado, status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status == google.maps.GeocoderStatus.OK) &#123;</span><br><span class="line">      <span class="keyword">var</span> marcador = &#123;</span><br><span class="line">          latitude: resultado[<span class="number">0</span>].geometry.location.k</span><br><span class="line">        , <span class="attr">longitude</span>: resultado[<span class="number">0</span>].geometry.location.D</span><br><span class="line">        , <span class="attr">titulo</span>: <span class="string">'Novo marcador'</span></span><br><span class="line">        , <span class="attr">imagem</span>: avaliacao</span><br><span class="line">      &#125;</span><br><span class="line">       criaMarcador(marcador, map)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">'Erro ao converter endereço: '</span> + status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nossa função começa chamando o método <code>geocode()</code> da nossa instância do geocoder. Este método recebe 2 parâmetros: <strong>um objeto</strong> com a query, e <strong>uma função</strong> para tratar o retorno.</p><p>O objeto com a query é <code>{address: endereco}</code>.</p><p>A função retorna <strong><em>status</em></strong> e <strong><em>resultado</em></strong> (<code>function(status, resultado){}</code>).</p><p>Verificamos <strong>SE</strong> o <em>status == google.maps.GeocoderStatus.OK</em>. <strong>Senão</strong> (else ao final da função), já damos um <code>alert()</code> com o erro.</p><p><strong>SE</strong> o <em>status == google.maps.GeocoderStatus.OK</em>, vamos criar nosso marcador!</p><p>Note que o parâmetro <strong>resultado</strong>, que recebemos do geocode() é um Array.</p><p>O primeiro item do array é o resultado ‘sugerido’ pelo google, portanto vamos usá-lo: <code>resultado[0]</code>.</p><p><code>resultado[0].geometry.location</code> contém a latitude (<code>k</code>) e longitude (<code>D</code>), que usaremos na variável <strong>var marcador</strong>.</p><p>Já fizemos isso (um marcador) no artigo anterior, a única coisa que muda é a propriedade <code>imagem</code>, que será o parâmetro <strong>avaliacao</strong>, recebido na função e as coordenadas que recebemos no resultado. </p><p>Pra fechar, chamamos <code>criaMarcador()</code> com as opção que criamos.</p><p>Ufa. É isso: temos uma função que <strong>recebe o endereço e avaliação</strong>, converte o endereço para <strong>coordenadas</strong> e cria um novo marcador, com a imagem que setamos como avaliação.</p><p>Agora precisamos, de alguma forma, gerar os parâmetros necessários para chamar a função <code>converterEndereco()</code>.<br>Faremos isso com uma outra função, mas antes precisamos inserir um campo de texto para o endereço e um seletor, para a avaliação, no HTML:</p><hr><h2 id="Campos-de-endereco-e-de-Avaliacao-no-HTML"><a href="#Campos-de-endereco-e-de-Avaliacao-no-HTML" class="headerlink" title="Campos de endereço e de Avaliação no HTML"></a>Campos de endereço e de Avaliação no HTML</h2><p>Insira, ao lado dos <code>&lt;button&gt;</code>‘s e <em>antes</em> da <strong><code>&lt;div id=&quot;map_canvas&quot;&gt;&lt;/div&gt;</code></strong>:</p><figure class="highlight html"><figcaption><span>index.html (Insira ao lado dos buttons, antes do mapa)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"endereco"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"avaliacao"</span> <span class="attr">id</span>=<span class="string">"avaliacao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"avaliacao"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>Muito Bom<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"avaliacao"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>Bom<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"avaliacao"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>Meh<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"avaliacao"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>Ruim<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"avaliacao"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>Péssimo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"converte()"</span>&gt;</span>Converter<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  (...)</span><br></pre></td></tr></table></figure><p>É simples: Um <code>&lt;input type=text</code> e um <code>&lt;select&gt;</code> com 4 <code>option</code>s. Note que elas têm <code>value</code> de <strong>0</strong> à <strong>4</strong>.</p><p>Pensei em usar um array (que começa com 0) para selecionarmos as imagens. </p><hr><p>Vamos criar um array pra referenciar nosso objeto imagens. (Eeeei Rômulo tá virando POG issoaí já né?) Calma, gente, é apenas pra facilitar nosso exemplo!</p><p>Volte ao <code>js/maps.js</code> e insira, ao final do arquivo:</p><figure class="highlight javascript"><figcaption><span>maps.js (insira ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="keyword">var</span> imgArray = [imagens.muitoBom, imagens.bom, imagens.medio, imagens.ruim, imagens.pessimo]</span><br></pre></td></tr></table></figure><p><code>imgArray</code> nada mais é do que um array com as opções do nosso objeto <code>var imagens</code>, que criamos no atigo anterior.</p><p>Agora, criaremos a função <code>converte()</code>, que será chamada ao clicarmos no botão.</p><p>Ela deve pegar os dados do <code>&lt;input&gt;</code> e do <code>&lt;select&gt;</code>, comparar com o <code>imgArray</code> e chamar a  <code>converteEndereco()</code>.</p><p>Também vai <em>dar um zoom</em> no mapa pra gente.</p><figure class="highlight javascript"><figcaption><span>maps.js (insira ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">converte</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> endereco = <span class="built_in">document</span>.getElementById(<span class="string">'endereco'</span>).value;</span><br><span class="line">  <span class="keyword">var</span> seletor = <span class="built_in">document</span>.getElementById(<span class="string">"avaliacao"</span>);</span><br><span class="line">  <span class="keyword">var</span> avaliacao = seletor.options[seletor.selectedIndex].value;</span><br><span class="line">  <span class="keyword">var</span> imagemMarcador = imgArray[avaliacao]</span><br><span class="line">  converteEndereco(endereco, imagemMarcador);</span><br><span class="line">  map.setZoom(<span class="number">14</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Essa função não recebe parâmetros. Ao ser chamada pega o <code>.value</code> do elemento <code>#endereco</code>, e o <code>.value</code> do nosso seletor.</p><p>Define a <code>imagemMarcador</code> como p item do <code>imgArray</code>.<br>O número do item é o <code>value</code> do <code>&lt;option&gt;</code>, ou seja: número de 0 à 4.<br>Ou seja: a url da imagem desejada.</p><p>Aí executa a função <code>converteEndereco()</code> com esses parâmetros e, logo depois usa método <code>setZoom()</code> para aproximar de nosso resultado.</p><hr><h2 id="Salvando-e-testando"><a href="#Salvando-e-testando" class="headerlink" title="Salvando e testando"></a>Salvando e testando</h2><p>Se você está usando o Workflow com GulpJs que configuramos no primeiro artigo da série, é só ir salvando as alterações que a página será atualizada no navegador.</p><p>Primeiro, incie um mapa, clicando em “Iniciar”, depois digite um endereço, por exemplo: <em>Rua Virginia Dalabona, 422 - Curitiba - Parana</em>.</p><p>Agora, selecione uma avaliação (muito bom), e clique em <code>converte</code>.</p><p>Depois, mude o número: <em>Rua Virginia Dalabona, 122 - Curitiba - Parana</em>. Selecione outra avaliação (ruim) e clique em Converte novamente.</p><p>Viiiiu que maneiro?</p><hr><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>O serviço <code>Geodecoder()</code> traduz endereços em coordenadas.<br>Para isso, basta instanciá-lo em uma variável, e depois executar com <code>variavel.geocode(query, funcao)</code>, sendo query um objeto tipo <code>{address: &quot;endereco aqui&quot;}</code> e a função uma função que receberá <code>status</code> e <code>resultado</code>.</p><p>Aí, dá pra brincar com o resultado.</p><p>Veja o commit, com as alterações dessa parte 3 <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/commit/66e99fb4b565e85980ea3ac386e57bb57eb5a3f5" target="_blank" rel="noopener">neste link</a>. Baixe o código que temos até agora <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/archive/66e99fb4b565e85980ea3ac386e57bb57eb5a3f5.zip" target="_blank" rel="noopener">aqui</a>.</p><h2 id="No-proximo-artigo"><a href="#No-proximo-artigo" class="headerlink" title="No próximo artigo"></a>No próximo artigo</h2><p>Na próxima parte da série <strong>Google Maps Api Javascript</strong> voltaremos a brincar com nosso <code>map</code>: </p><p>Vamos manipular o mapa já criado, e experimentar alguns métodos interessantes que vão desde mudar a textura, angulo de visão aérea, zoom, etc…</p><p>Fique ligado!!</p><blockquote><p><strong>E pra não perder os artigos, inscreva-se na MailList –&gt;<br>Uso o mailchimp, e não mando SPAM.</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/google-maps-api-parte-3-geocoding-convertendo-enderecos-em-coordenadas.jpg&quot; alt=&quot;google-maps-api-parte-3-geocoding-convertendo
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://rcdevlabs.github.io/tags/javascript/"/>
    
      <category term="Série Google Maps" scheme="http://rcdevlabs.github.io/tags/serie-google-maps/"/>
    
      <category term="Gulp" scheme="http://rcdevlabs.github.io/tags/gulp/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
  </entry>
  
  <entry>
    <title>Google Maps API parte 2 - Adicionando marcadores personalizados </title>
    <link href="http://rcdevlabs.github.io/2015/02/18/google-maps-api-parte-2-marcadores-personalizados/"/>
    <id>http://rcdevlabs.github.io/2015/02/18/google-maps-api-parte-2-marcadores-personalizados/</id>
    <published>2015-02-19T01:08:07.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/google-maps-api-parte-2-marcadores-personalizados.jpg" alt="google-maps-api-parte-2-marcadores-personalizados"></p><p>Ao final do artigo passado, <a href="http://rcdevlabs.github.io/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">Parte 1</a>, temos um simples mapa com opções básicas.</p><p>Seguiremos, à partir dessa estrutura, conhecendo alguns dos elementos e métodos que a API V3 do Google Maps nos oferece.</p><p><strong>Atenção: esta série foi prolongada e não terá apenas 3 partes. Essa é a parte II de X</strong></p><p><hr></p><h3 id="Todas-as-partes-da-serie-Google-Maps-API"><a href="#Todas-as-partes-da-serie-Google-Maps-API" class="headerlink" title="Todas as partes da série Google Maps API:"></a>Todas as partes da série Google Maps API:</h3><ul><li><p><a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">Parte 1 - Criando um Mapa Simples</a></p></li><li><p>Esta é a parte 2</p></li><li><p><a href="/2015/02/19/google-maps-api-parte-3-geocoding-como-converter-endereco-para-coordenadas/">Parte 3 - Converter Endereços em Coordenadas com Geocoding</a></p></li><li><p><a href="/2015/02/20/google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes/">Parte 4 - Manipulando o Mapa com métodos</a></p></li><li><p><a href="/2015/02/21/google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places/">Parte 5 - Autocompletar locais e endereços, listar e acessar marcadores</a></p></li><li><p><a href="/2015/02/22/google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation/">Parte 6 - Pegando localização do Usuário com HTML5 Geolocation</a></p></li></ul><hr><p>(Para baixar o código que teremos ao final deste artigo, <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/archive/e4626da3640065bda6d8b21210a411f9d5065273.zip" target="_blank" rel="noopener">clique aqui</a>)</p><h2 id="Continuando-de-onde-paramos"><a href="#Continuando-de-onde-paramos" class="headerlink" title="Continuando de onde paramos"></a>Continuando de onde paramos</h2><p>Se você quiser, pode pegar o código do último artigo <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/archive/3e2aaf45bab21e75589a9e3d0cbec7b37a61b043.zip" target="_blank" rel="noopener">aqui</a>.(Extraia para uma pasta, rode <code>npm install</code>. (Precisa ter NodeJs e GulpJs instalado globalmente. Dúvidas, veja <a href="http://rcdevlabs.github.io/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">o post</a>), ou continue de onde parou.</p><h2 id="Comecando-a-trabalhar"><a href="#Comecando-a-trabalhar" class="headerlink" title="Começando a trabalhar"></a>Começando a trabalhar</h2><p>Às vezes, parece meio chato fazer todo o processo de preparação do <em>workflow</em>, como no post anterior. (Isso que criamos apenas 2 tasks básicas) Mas agora, veremos as vantagens disso.</p><p>Para começar a trabalhar, abra a pasta do projeto no terminal, e rode</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p>A task <strong><em>default</em></strong> do nosso <strong><em>gulpfile.js</em></strong> vai iniciar o servidor e abrir o navegador.</p><p>Caso não abra o seu navegador, edite o .gulpfile, ou acesse <a href="http://localhost:1337/" target="_blank" rel="noopener">http://localhost:1337/</a> . Agora, toda vez que vc salvar, sua página atualiza sozinha :)</p><h2 id="Dando-scopo-global-ao-mapa"><a href="#Dando-scopo-global-ao-mapa" class="headerlink" title="Dando scopo global ao mapa"></a>Dando scopo global ao mapa</h2><p>Para que possamos manipular o mapa e inserir, por exemplo, marcadores nele, precisamos que a variável esteja acessível de fora da função.</p><p>Para fazer isso existem algumas opções, mas iremos com a mais simples: retire a palavra <code>var</code> de map, de dentro da função <code>initialize()</code> deixando apenas <code>map =</code>…<br><figure class="highlight javascript"><figcaption><span>maps.js (a funcao initialize deve ficar assim)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> google.maps.Map(divDoMapa, opcoes);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Criando-Marcadores-Marker-para-o-Google-Maps"><a href="#Criando-Marcadores-Marker-para-o-Google-Maps" class="headerlink" title="Criando Marcadores (Marker) para o Google Maps"></a>Criando Marcadores (Marker) para o Google Maps</h2><blockquote><p>Para criar um marcador, basta instanciar um novo objeto <strong>google.maps.Marker()</strong> em uma variável</p></blockquote><p>Só que criar diversas variáveis tipo <em>marker1</em>, <em>marker2</em>, etc. não é uma boa. </p><p>Como podemos ter vários marcadores, é interessante centralizarmos seu gerenciamento em uma única variável. Dessa forma, podemos ter um array ou objeto. Usaremos array.</p><p>Isso será feito por uma função, que pode ser chamada a qualquer momento para criar um novo marcador. Dessa forma, faremos apenas uma vez, e reutilizaremos quando necessário.</p><p>Primeiro, precisamos de algumas imagens legais:</p><p>Insira, ao final do maps.js:</p><iframe class="imgur-album" width="100%" height="250" frameborder="0" src="//imgur.com/a/YNh0G/embed?background=f2f2f2&text=1a1a1a&link=4e76c9"></iframe><p>Crie o seguinte objeto, ao final do maps.js:</p><figure class="highlight javascript"><figcaption><span>maps.js (Insira ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imagens = &#123;</span><br><span class="line">  muitoBom: <span class="string">'http://i.imgur.com/bFnWq8k.png'</span></span><br><span class="line">  , <span class="attr">bom</span>: <span class="string">'http://i.imgur.com/VnlbIoL.png'</span></span><br><span class="line">  , <span class="attr">medio</span>: <span class="string">'http://i.imgur.com/eNAvIvr.png'</span></span><br><span class="line">  , <span class="attr">ruim</span>: <span class="string">'http://i.imgur.com/uCRXqdV.png'</span></span><br><span class="line">  , <span class="attr">pessimo</span>: <span class="string">'http://i.imgur.com/biRJBNL.png'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Assim, temos algumas imagens para usar.</p><p>Agora, criamos a função <code>criaMarcador</code>, que aceitará 2 parâmetros: configurações do marcador e mapa.</p><p>Ao final do arquivo <strong>src/js/maps.js</strong> insira uma nova função:</p><figure class="highlight javascript"><figcaption><span>maps.js (insira ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="keyword">var</span> marcadores = [];</span><br><span class="line"><span class="keyword">var</span> criaMarcador = <span class="function"><span class="keyword">function</span>(<span class="params">marcador, mapa</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> posicao = <span class="keyword">new</span> google.maps.LatLng(marcador.latitude, marcador.longitude);</span><br><span class="line">  <span class="keyword">var</span> opcoes = &#123;</span><br><span class="line">    position: posicao</span><br><span class="line">    , <span class="attr">title</span>: marcador.titulo</span><br><span class="line">    , <span class="attr">animation</span>: google.maps.Animation.DROP</span><br><span class="line">    , <span class="attr">icon</span>:&#123;</span><br><span class="line">    url: marcador.imagem || <span class="string">'http://i.imgur.com/eNAvIvr.png'</span></span><br><span class="line">    , <span class="attr">scaledSize</span>: <span class="keyword">new</span> google.maps.Size(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    , <span class="attr">map</span>: mapa</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> novoMarcador = <span class="keyword">new</span> google.maps.Marker(opcoes);</span><br><span class="line">  marcadores.push(novoMarcador);</span><br><span class="line">  map.setCenter(novoMarcador.position)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Primeiro criamos <strong>fora da função</strong> o array ‘marcadores’. Aí nossa função chamada criaMarcador, aceita 2 parâmetros: <strong><em>marcador</em></strong> e <strong><em>mapa</em></strong>.</p><p>O objeto <strong>marcador</strong> usamos para inserir detalhes do marker, como marcador.titulo e marcador.imagem, por exemplo.</p><p>Note que, dentro de <strong>var opcoes</strong> o parâmetro icon é um objeto, contendo url e scaledSize. O primeiro, a url da imagem, o segundo define o tamanho final do marcador, devidamente escalado.</p><p>Aí, criamos a variável <code>novoMarcador</code>, que efetivamente gera um <code>new google.maps.Marker()</code> com as opções que definimos logo acima.</p><p>Por último, inserimos com <code>marcadores.push()</code> o marcador recém criado em nosso array de marcadores e então chamamos o método <code>.setCenter()</code> em nosso <code>map</code>, para a posição do marcador.<br>Isso centralizará o mapa nas coordenadas do marcador.</p><h2 id="Funcao-que-adicionara-o-marcador"><a href="#Funcao-que-adicionara-o-marcador" class="headerlink" title="Função que adicionará o marcador."></a>Função que adicionará o marcador.</h2><p>Criaremos agora uma função para adicionar o marcador. Ela não é realmente necessária, estamos fazendo apenas para complementar o exemplo do artigo passado, adicionando um botão que insira o marcador.</p><p>Ao final do arquivo maps.js, insira:</p><figure class="highlight javascript"><figcaption><span>maps.js (Insira ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adiciona</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> marcador = &#123;</span><br><span class="line">    latitude: <span class="number">-25.425777</span></span><br><span class="line">    , <span class="attr">longitude</span>: <span class="number">-49.3335829</span></span><br><span class="line">    , <span class="attr">titulo</span>: <span class="string">'Novo marcador'</span></span><br><span class="line">    , <span class="attr">imagem</span>: imagens.muitoBom</span><br><span class="line">  &#125;</span><br><span class="line">  criaMarcador(marcador, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Essa função apenas contém um objeto com as configurações que queremos e executa a função <code>criaMarcador</code> com ele.</p><p>Note como definimos a imagem, utilizando o objeto: <code>imagem: imagens.muitoBom</code>.<br>Poderia ser <code>imagem: imagens.ruim</code>, por exemplo</p><p>Adicione a função <code>adiciona()</code> em um botão no index.html</p><figure class="highlight html"><figcaption><span>index.html  (insira o button ao lado do outro)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"adiciona()"</span>&gt;</span>adiciona!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Agora salve, volte ao navegador e clique, primeiro em ‘iniciar’, depois em ‘adiciona!’.</p><p>Viu? Assim criamos um marcador personalizado.</p><h3 id="Conclusao-e-planos-proximos"><a href="#Conclusao-e-planos-proximos" class="headerlink" title="Conclusão e planos próximos:"></a>Conclusão e planos próximos:</h3><p>Olha, minha intenção original era abordar, além de marcadores, rotas, places e boundaries neste artigo. Mas já são 22:54 e não deu tempo :P  Como não quero perder o #1postperday, ficará para amanhã. </p><p>Além disso, recebi alguns pedidos bem interessantes referente criação de polígonos, circulos e dicas de performance, e não vai ‘caber’ em apenas 3 partes, portanto a série será prolongada.</p><p>Ou seja: não teremos mais 3 partes, teremos umas 7 :D</p><p>Espero que gostem! Na dúvida, assina a maillist pra não perder, hein? —&gt;</p><p>Duvidas, sugestões, xingamentos? Use os comentários! (menos os xingamentos, pega mal.)</p><p>(Confira o commit com as alterações que fizemos nessa parte2 <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/commit/e4626da3640065bda6d8b21210a411f9d5065273" target="_blank" rel="noopener">aqui</a>)</p><p>Para baixar o código que temos até agora, <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/archive/e4626da3640065bda6d8b21210a411f9d5065273.zip" target="_blank" rel="noopener">clique aqui</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/google-maps-api-parte-2-marcadores-personalizados.jpg&quot; alt=&quot;google-maps-api-parte-2-marcadores-personalizados&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ao fina
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://rcdevlabs.github.io/tags/javascript/"/>
    
      <category term="Série Google Maps" scheme="http://rcdevlabs.github.io/tags/serie-google-maps/"/>
    
      <category term="Gulp" scheme="http://rcdevlabs.github.io/tags/gulp/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
  </entry>
  
  <entry>
    <title>GoogleMaps API 1/3 Criando um mapa simples</title>
    <link href="http://rcdevlabs.github.io/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/"/>
    <id>http://rcdevlabs.github.io/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/</id>
    <published>2015-02-17T23:46:02.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/google-maps-api-tutorial-1-de-3.jpg" alt="google-maps-api-tutorial-1-de-3"></p><p>Opa! Começa hoje nossa nova série sobre a API Javascript do Google Maps. Ao final dela, teremos um mapa que traça rotas automaticamente com a localização automática do usuário e marcadores personalizados.</p><p>Hoje é a parte I, então veremos o básico da API e como criar um mapa com ela!</p><p>É uma parte bem básica, porém servirá como base para os próximos 2 artigos.</p><h3 id="Update-A-serie-foi-extendida-e-nao-foram-apenas-3-artigos-confira"><a href="#Update-A-serie-foi-extendida-e-nao-foram-apenas-3-artigos-confira" class="headerlink" title="Update: A série foi extendida e nao foram apenas 3 artigos, confira:"></a><strong>Update: A série foi extendida e nao foram apenas 3 artigos, confira:</strong></h3><ul><li><p><a href="/2015/02/17/googlemaps-api-1-3-criando-um-mapa-simples/">Parte 1 - Criando um Mapa Simples</a></p></li><li><p><a href="/2015/02/18/google-maps-api-parte-2-marcadores-personalizados/">Parte 2 - Adicionando Marcadores Personalizados</a></p></li><li><p><a href="/2015/02/19/google-maps-api-parte-3-geocoding-como-converter-endereco-para-coordenadas/">Parte 3 - Converter Endereços em Coordenadas com Geocoding</a></p></li><li><p><a href="/2015/02/20/google-maps-api-parte-4-manipulando-o-mapa-3d-satelite-zoom-opcoes/">Parte 4 - Manipulando o Mapa com métodos</a></p></li><li><p><a href="/2015/02/21/google-maps-api-parte-5-autocompletar-enderecos-e-locais-com-google-places/">Parte 5 - Autocompletar locais e endereços, listar e acessar marcadores</a></p></li><li><p><a href="/2015/02/22/google-maps-api-parte-6-pegando-local-do-usuario-com-html5-geolocation/">Parte 6 - Pegando localização do Usuário com HTML5 Geolocation</a></p></li></ul><hr><h2 id="Workflow-com-Gulp-e-LiveReload"><a href="#Workflow-com-Gulp-e-LiveReload" class="headerlink" title="Workflow com Gulp e LiveReload"></a>Workflow com Gulp e LiveReload</h2><p>Usaremos o gulp com livreReload, evitando assim utilizar algum server como o apache (Xammp ? hehe) e também ficar dando F5 o tempo todo. Faremos essa preparação em 3 etapas rápidas:</p><ol><li><p><strong>Arquivo Package.Json</strong>, onde declaramos as dependências do projeto</p></li><li><p><strong>Arquivo gulpfile.js</strong>, onde criamos nossas taks básicas (server, arquivos e watch)</p></li><li><p><strong>Estrutura de pastas e .gitignore</strong>, para garantir que as tasks funcionem e que possamos usar o git sem problemas, mais tarde.</p></li></ol><h3 id="1-Package-Json"><a href="#1-Package-Json" class="headerlink" title="1. Package.Json"></a>1. Package.Json</h3><p>Crie uma pasta para seu projeto. Dentro dela, crie um arquivo chamado <code>package.json</code> e insira o conteúdo abaixo.</p><figure class="highlight json"><figcaption><span>package.json [crie o arquivo e insira o conteúdo abaixo]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"testes-google-maps-gulp"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^3.8.11"</span>,</span><br><span class="line">    <span class="attr">"gulp-connect-multi"</span>: <span class="string">"^1.0.8"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tendo o <a href="http://nodejs.org" target="_blank" rel="noopener">NodeJS</a> instalado, acesse a pasta com o terminal e rode o comando:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>Ele irá buscar as devDependencies que definimos no package e instalá-las, dentro de uma pasta node_modules, criada automaticamente.</p><p>Você precisa ter o gulp instalado globalmente. Caso ainda não tenha, basta rodar</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure><h3 id="2a-gulpfile-js-tasks-arquivos-e-servidor"><a href="#2a-gulpfile-js-tasks-arquivos-e-servidor" class="headerlink" title="2a. gulpfile.js - tasks arquivos e servidor"></a>2a. gulpfile.js - tasks arquivos e servidor</h3><p>Ainda na pasta do projeto, crie um arquivo chamado <code>gulpfile.js</code>. Dentro, insira:</p><figure class="highlight javascript"><figcaption><span>gulpfile.js (Crie o arquivo e insira o conteúdo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line">, connect = <span class="built_in">require</span>(<span class="string">'gulp-connect-multi'</span>)();</span><br><span class="line">  </span><br><span class="line">gulp.task(<span class="string">'arquivos'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> gulp.src([<span class="string">'./src/**/**/*.*'</span>])</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./build'</span>))</span><br><span class="line">    .pipe(connect.reload())</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">gulp.task(<span class="string">'servidor'</span>, connect.server(&#123;</span><br><span class="line"> root: [<span class="string">'build'</span>],</span><br><span class="line"> port: <span class="number">1337</span>,</span><br><span class="line"> livereload: <span class="literal">true</span>,</span><br><span class="line"> open: &#123;</span><br><span class="line">    browser: <span class="string">'chrome'</span> <span class="comment">//ou firefox ou safari... se for OSX é 'Google Chrome'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>São 2 tasks bem simples, sendo que a task <code>arquivos</code> pega TODO o conteúdo das pastas da /src (e 2 níveis de subpastas) e envia para ./build.<br>Ela termina com <code>.pipe(connect.reload())</code> que forçará a atualização do navegador.</p><p>A task <code>servidor</code> cria um server com o connect, passando algumas opções, como a pasta-base, ativar liveReload e abrir com o chrome. <strong><em>Mude seu navegador. Se usar OSX, coloque ‘Google Chrome’</em></strong></p><h3 id="2b-gulpfile-js-task-watch-e-default-task"><a href="#2b-gulpfile-js-task-watch-e-default-task" class="headerlink" title="2b. gulpfile.js - task watch e default task"></a>2b. gulpfile.js - task watch e default task</h3><p>Criaremos uma task chamada <code>watch</code> que irá monitorar nossos arquivos e executar a task <code>arquivos</code> caso haja alguma alteração neles.</p><p>Depois, uma task default para executar as 2 primeiras tasks  a task watch juntas.</p><p>Insira o conteúdo ao final do arquivo gulpfile.js</p><figure class="highlight javascript"><figcaption><span>gulpfile.js (Insira o conteúdo ao final do arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.watch([<span class="string">'src/**/**'</span>], [<span class="string">'arquivos'</span>]);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'arquivos'</span>, <span class="string">'servidor'</span>, <span class="string">'watch'</span>])</span><br></pre></td></tr></table></figure><h3 id="3-Estrutura-de-pastas-e-gitignore"><a href="#3-Estrutura-de-pastas-e-gitignore" class="headerlink" title="3. Estrutura de pastas e .gitignore"></a>3. Estrutura de pastas e .gitignore</h3><p>Eu não gosto de falar ‘diretórios’. Por isso, vamos criar as ‘pastas’, hehe.</p><p>Na pasta do seu projeto, crie <code>src</code>.</p><p>Dentro dela, crie o arquivo index.html, com o seguinte conteúdo:</p><figure class="highlight html"><figcaption><span>index.html (Crie o arquivo dentro da pasta SRC)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"pt-br"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Google Maps Básico<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Exemplo google maps.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/maps.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Agora, dentro da pasta <code>src</code>, crie a pasta <code>js</code> e, dentro dela, o arquivo maps.js. Dentro dele, o conteúdo:</p><figure class="highlight javascript"><figcaption><span>maps.js (crie o arquivo dentro da pasta js, dentro de src)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'testando o arquivo :)'</span>);</span><br></pre></td></tr></table></figure><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a><strong>.gitignore</strong></h4><p>Na pasta raíz do projeto, ao lado de package.json e gulpfile.js, crie o arquivo <code>.gitignore</code>. assim, com ponto no começo e sem extensão hehe. Insira o conteúdo</p><figure class="highlight plain"><figcaption><span>.gitignore (crie na raíz e insira o conteúdo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">build</span><br></pre></td></tr></table></figure><p>Na primeira linha, dizemos que a pasta node_modules deve ser ignorada, já que ao rodar <strong>npm install</strong> ela é criada automaticamente.</p><p>Na segunda, a pasta build é ignorada. Isso por que ela é criada pelo gulp. Dessa forma, garantimos que os únicos arquivos à serem enviados para o git sejam os arquivos do código fonte.</p><p>Salve.</p><h3 id="Testando-as-taks-e-arquivos"><a href="#Testando-as-taks-e-arquivos" class="headerlink" title="Testando as taks e arquivos."></a>Testando as taks e arquivos.</h3><p>Abra o terminal e rode <code>gulp</code>. Se fez tudo certinho, deve abrir o seu navegador com o arquivo index.html com o texto. </p><p>Abra o console, ou webmaster tools (f12, no chrome) e veja a mensagem: <em>testando o arquivo :)</em></p><p>Mantendo a janela do navegador visível, altere o texto do <strong>h1</strong> no <strong>index.html</strong> e veja se funcionou.</p><p><strong>Agora sim, podemos começar a criar nosso mapa!</strong>.</p><p>Deixe o gulp rodando e prossiga:</p><hr><h2 id="Carregando-script-do-google-maps"><a href="#Carregando-script-do-google-maps" class="headerlink" title="Carregando script do google maps."></a>Carregando script do google maps.</h2><p>Insira a seguinte linha <strong>antes</strong> do <code>&lt;/head&gt;</code> no seu index.html</p><figure class="highlight html"><figcaption><span>index.html (insira antes do fechamento da HEAD)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"http://maps.googleapis.com/maps/api/js?sensor=false"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Assim puxamos o js mais atual e estável do googleapis.</p><p>No <code>body</code> do seu HTML, insira uma div com o id map_canvas. O id pode ser outro, mas usaremos este por convenção. Também estamos adicionando um botão para inciar o mapa.</p><figure class="highlight html"><figcaption><span>index.html (insira dentro do body)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"initialize()"</span>&gt;</span>Iniciar!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map_canvas"</span> <span class="attr">style</span>=<span class="string">"width:600px; height:300px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>O botão usa o atributo <code>onclick</code> para executar a função <code>initialize()</code>. Ela não existe, criaremos agora.</p><p>Note que colocamos estilos inline (que feiooo Romuloooo!!). Por enquanto ficará assim mesmo hehe.</p><h2 id="Criando-o-mapa-com-Javascript-Funcao-initialize"><a href="#Criando-o-mapa-com-Javascript-Funcao-initialize" class="headerlink" title="Criando o mapa com Javascript: Função initialize()"></a>Criando o mapa com Javascript: Função initialize()</h2><p>Edite o arquivo <code>src/js/maps.js</code></p><figure class="highlight javascript"><figcaption><span>maps.js (edite o arquivo)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inicial = &#123;</span><br><span class="line">  latitude: <span class="number">-25.428777</span>,</span><br><span class="line">  , <span class="attr">longitude</span>: <span class="number">-49.3435829</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> divDoMapa = <span class="built_in">document</span>.getElementById(<span class="string">"map_canvas"</span>)</span><br><span class="line"><span class="keyword">var</span> opcoes = &#123; </span><br><span class="line">  center: <span class="keyword">new</span> google.maps.LatLng(inicial.latitude, inicial.longitude)</span><br><span class="line">  , <span class="attr">zoom</span>: <span class="number">10</span></span><br><span class="line">  , <span class="attr">mapTypeId</span>: google.maps.MapTypeId.ROADMAP</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> map = <span class="keyword">new</span> google.maps.Map(divDoMapa, opcoes);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>Acima, declaramos 3 variáveis: incicial, divDoMapa e opcoes.</p><ul><li><p><strong>var inicial</strong> é a nossa localização inicial. Um objeto com latitude e longitude.</p></li><li><p><strong>var divDoMapa</strong> é um <code>getElementById</code> que referencia nossa div#map_canvas. Poderia ser outro id.</p></li><li><p><strong>var opcoes</strong> São opções do mapa. Neste exemplo, usamos apenas:<br><strong>center</strong>: um objeto <code>google.maps.LatLng()</code>, usando a latitude e longitude que declaramos na <strong>var inicial</strong>.<br><strong>zoom</strong>: nível 10 e <strong>mapTypeId</strong>, em que usamos o tipo de mapa chamado <em>ROADMAP</em>.</p></li></ul><p>E por último, a <strong>função initialize()</strong>. Como separamos as variáveis direirinho,fica fácil de ver que nada mais é do que instanciar um novo <code>google.maps.Map()</code>, com 2 parâmetros: a div que tem o mapa, e nosso objeto opções.</p><p>Portanto, fazemos: <strong>var map = new.google.maps.Map(divDoMapa, opcoes)</strong>. Instanciar o mapa em uma variável (<strong>var map</strong>), nos permitirá trabalhar com ele de forma fácil, com os princípios de OO. Veremos nas próximas partes.</p><h3 id="Salvando-e-testando"><a href="#Salvando-e-testando" class="headerlink" title="Salvando e testando"></a>Salvando e testando</h3><p>Se você deixou o gulp rodando, basta salvar o arquivo, e clicar no botão Iniciar!, em seu navegador.<br>Note que será criado um novo mapa, na tatitude e longitude fornecidas.</p><p>Por hoje é isso! Você pode ver como ficaram os arquivos, <a href="https://github.com/romuloctba/post-google-maps-api-rotas-localizacao-automatica/commit/3e2aaf45bab21e75589a9e3d0cbec7b37a61b043" target="_blank" rel="noopener">neste commit do repositório oficial dessa série</a></p><p>Aliás, tentarei manter apenas 3 commits, um para cada parte da série!</p><h2 id="Nao-perca-amanha…"><a href="#Nao-perca-amanha…" class="headerlink" title="Não perca, amanhã…."></a>Não perca, amanhã….</h2><p>Hoje foi hyper-básico. Amanha entraremos em mais detalhes nas opções do mapa. Criaremos um marcador personalizado, alguns métodos para criar e remover novos marcadores e também rotas.</p><p>Não perca!!</p><p>(Ah, se tiver dúvidas, pedidos ou dicas, deixe comentário abaixo, estou esperando ¬_¬)</p><blockquote><p><strong>E insreva-se na maillist, para receber posts no conforto de seu e-mail!</strong></p></blockquote><p>Brigadão pela visita! Fique a vontade, o café tá lá na pia.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/google-maps-api-tutorial-1-de-3.jpg&quot; alt=&quot;google-maps-api-tutorial-1-de-3&quot;&gt;&lt;/p&gt;
&lt;p&gt;Opa! Começa hoje nossa nova série sobre a A
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://rcdevlabs.github.io/tags/javascript/"/>
    
      <category term="Série Google Maps" scheme="http://rcdevlabs.github.io/tags/serie-google-maps/"/>
    
      <category term="Gulp" scheme="http://rcdevlabs.github.io/tags/gulp/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
  </entry>
  
  <entry>
    <title>Efeito antes-depois responsivo e sem JQuery. Workflow com Gulp e Stylus Opcional</title>
    <link href="http://rcdevlabs.github.io/2015/02/16/efeito-antes-depois-responsivo-e-mobile-ready-sem-jquery-workflow-com-gulp-e-stylus/"/>
    <id>http://rcdevlabs.github.io/2015/02/16/efeito-antes-depois-responsivo-e-mobile-ready-sem-jquery-workflow-com-gulp-e-stylus/</id>
    <published>2015-02-16T22:09:08.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/efeito-antes-e-depois-sem-jquery-com-gulp-stylus.jpg" alt="efeito-antes-e-depois-sem-jquery-com-gulp-stylus.jpg"></p><p>Sabe aquele efeito antes e depois interativo, bastante usado em sites como G1? Ele é bem simples e envolve alguns conceitos muito úteis, vamos fazer um?</p><p>Mas calma. Se você está aqui pelo #1postperday, sabe que não posso postar qualquer coisa. Tem que ser maneiro.</p><p>Nosso pequeno plugin, além de bonitinho, será reutilizável e carregará automaticamente, quantas instâncias do efeito na mesma página forem necessárias.</p><p>Além disso, vamos usar stylus e gulp em nosso workflow. Você pode fazer com css direto e sem livereload, mas aí eu te pergunto: Pra quê?</p><h2 id="Analisando-a-demanda"><a href="#Analisando-a-demanda" class="headerlink" title="Analisando a demanda"></a>Analisando a demanda</h2><ul><li><p><strong>Necessidade</strong>: Plugin reutilizável de efeito antes-e-depois interativo: usuário deve poder analisar e interagir com o efeito.</p></li><li><p><strong>Requisitos</strong>: Mobile-ready e responsivo, leve e sem libraries externas (ex: jquery) em produção. Deve ser possível criar novas instâncias somente pelo markup. O markup deve ser mínimo.</p></li></ul><hr><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>A idéia é que fique assim ao final. Você pode incrementar, mas mantive o mais simples e básico possível, já que o objetivo é <em>entender</em> o processo, e não duplicar pra sair usando por aí sem saber. (Se fosse assim, usavamos JQuery hehe)</p><p></p><p data-height="466" data-theme-id="12356" data-slug-hash="wBybMq" data-default-tab="result" data-user="romuloctba" class="codepen">See the Pen <a href="http://codepen.io/romuloctba/pen/wBybMq/" target="_blank" rel="noopener">Antes e Depois SEM Jquery </a> by Romulo_Ctba (<a href="http://codepen.io/romuloctba" target="_blank" rel="noopener">@romuloctba</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>Curtiu? Vamos lá?</p><p>Ah, o resultado final está também (com gulp e stylus) <a href="https://github.com/romuloctba/post-antes-e-depois-responsivo-sem-jquery" target="_blank" rel="noopener">neste repositório do github</a></p><hr><h2 id="Planejando-o-Workflow-Porque-usar-Stylus-e-Gulp"><a href="#Planejando-o-Workflow-Porque-usar-Stylus-e-Gulp" class="headerlink" title="Planejando o Workflow / Porque usar Stylus e Gulp"></a>Planejando o Workflow / Porque usar Stylus e Gulp</h2><p>Se você não quiser usar GULP, pule direto para <strong>Criando os arquivos e pastas</strong> mais abaixo. Veja o conteúdo do CSS no codepen acima, clicando em ‘compile css’, mas eu recomendo que faça essa parte, pois é bem maneira.</p><ul><li><p>Criaremos nosso código em um pasta chamada <code>/src</code>, dentro do diretório do nosso projeto.</p></li><li><p>Escreveremos o Css usando Stylus, dentro da pasta <code>/src/stylus</code></p></li><li><p>O Javascript, na pasta <code>/src/javascript</code></p></li><li><p>Usaremos o Gulp para compilar o stylus em CSS e copiar tudo (css, html e imagens) para uma pasta chamda <code>/build</code>.<br>Nela, ficará o conteúdo final de nosso projeto.<br>Ela ficará no diretório de nosso projeto, ao lado da <code>/src</code>.</p></li><li><p>AH, os arquivos css compilados ficarão na pasta <code>/build/css</code>. A pasta <code>/stylus</code> só existe em nosso source</p></li></ul><p>A vantagem disso é que podemos criar tarefas de gulp para minificar o css e o javascript, bem como otimizar imagens e uma infinidade de outras coisas que podem ser muito úteis, de forma automática.</p><hr><h2 id="Preparando-o-Workflow"><a href="#Preparando-o-Workflow" class="headerlink" title="Preparando o Workflow"></a>Preparando o Workflow</h2><p>Vamos criar algumas tarefas do Gulp para nos ajudar com o Stylus, e também para o liveReload.</p><p>Se você ainda não tem, instale o <a href="http://nodejs.org" target="_blank" rel="noopener">NodeJS</a> e, depois, abra seu terminal e rode:<br><figure class="highlight console"><figcaption><span>[talvez você precise ser administrador ou rodar como sudo]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure></p><p>Agora, crie uma pasta para seu projeto. Nela, um novo arquivo, chamado <code>package.json</code>. Ele contém informações básicas sobre nosso projeto para o NodeJs.</p><figure class="highlight json"><figcaption><span>package.json - crie na pasta do projeto</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"antes-depois-sem-jquery"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^3.8.10"</span>,</span><br><span class="line">    <span class="attr">"gulp-connect-multi"</span>: <span class="string">"^1.0.8"</span>,</span><br><span class="line">    <span class="attr">"gulp-stylus"</span>: <span class="string">"^1.3.4"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nele declaramos as <code>devDependencies</code>, ou seja: dependências que não serão usadas em produção, apenas enquanto estamos desenvolvendo.<br>Elas são: Gulp (local, pois já instalamos o global), <code>gulp-connect-multi</code> (será o servidor com liveReload) e <code>gulp-stylus</code> que vai transformar Stylus em Css.</p><p>Com o terminal, acesse a pasta do projeto e rode:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="Criando-nossas-tarefas-para-o-Gulp"><a href="#Criando-nossas-tarefas-para-o-Gulp" class="headerlink" title="Criando nossas tarefas para o Gulp"></a>Criando nossas tarefas para o Gulp</h2><p>Precisaremos criar 3 tarefinhas:  stylus, arquivos e servidor. Vamos lá:</p><h3 id="Gulp-task-stylus"><a href="#Gulp-task-stylus" class="headerlink" title="Gulp task stylus"></a>Gulp task <code>stylus</code></h3><p>Crie um arquivo chamado <code>gulpfile.js</code> na pasta do seu projeto. Nele, insira:</p><figure class="highlight javascript"><figcaption><span>gulpfile.js [crie o arquivo, e insira:]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line">,stylus = <span class="built_in">require</span>(<span class="string">'gulp-stylus'</span>)</span><br><span class="line">, connect = <span class="built_in">require</span>(<span class="string">'gulp-connect-multi'</span>)();</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'stylus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'src/stylus/*.styl'</span>)</span><br><span class="line">    .pipe(stylus(&#123;</span><br><span class="line">     compress: <span class="literal">true</span></span><br><span class="line">   &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./build/css'</span>))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Nesta task, pegamos todos os arquivos <em>.styl</em> da pasta <code>.src/stylus/</code> e aplicando, com o .pipe(), p método <code>stylus</code>.<br>A opção <code>compress:true</code> vai permitir que ele minifique o css enquanto copia, com o <code>gulp.dest()</code> para a pasta <code>/build/css.</code></p><h3 id="Gulp-task-arquivos"><a href="#Gulp-task-arquivos" class="headerlink" title="Gulp task arquivos"></a>Gulp task <code>arquivos</code></h3><p>´Tudo o que ela faz é copiar arquivos. Ela vai copiar tudo, menos o que estiver na pasta <code>src/stylus</code>. Insira ao final do gulpfile:</p><figure class="highlight javascript"><figcaption><span>gulpfile.js [insira ao final do arquivo]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'arquivos'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src([<span class="string">'./src/**/**'</span>, <span class="string">'!src/stylus'</span>])</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./build'</span>))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="Gulp-task-servidor"><a href="#Gulp-task-servidor" class="headerlink" title="Gulp task servidor"></a>Gulp task <code>servidor</code></h3><p>Vamos inciar o <code>gulp-connect-multi</code>, com a opção <code>liveReload</code> como true. A opção <code>root</code> é a pasta principal. No caso, a pasta <code>build</code>.</p><figure class="highlight javascript"><figcaption><span>gulpfile.js [insira ao final do arquivo]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'servidor'</span>, connect.server(&#123;</span><br><span class="line"> root: [<span class="string">'build'</span>],</span><br><span class="line"> port: <span class="number">1337</span>,</span><br><span class="line"> livereload: <span class="literal">true</span>,</span><br><span class="line"> open: &#123;</span><br><span class="line">    browser: <span class="string">'chrome'</span> <span class="comment">//ou firefox ou safari... se for OSX é 'Google Chrome'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="Task-padrao-para-fazer-tudo"><a href="#Task-padrao-para-fazer-tudo" class="headerlink" title="Task padrão, para fazer tudo:"></a>Task padrão, para fazer tudo:</h3><p>Faremos a  task <code>default</code> executar todas as outras, por isso, crie:</p><figure class="highlight javascript"><figcaption><span>gulpfile.js [insira ao final do arquivo]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'stylus'</span>, <span class="string">'arquivos'</span>, <span class="string">'servidor'</span>]);</span><br></pre></td></tr></table></figure><p>Com as tasks prontas, podemos criar nosso código fonte.</p><hr><h2 id="Criando-os-arquivos-e-pastas"><a href="#Criando-os-arquivos-e-pastas" class="headerlink" title="Criando os arquivos e pastas"></a>Criando os arquivos e pastas</h2><p>Vamos criar nossa estrutura. Dentro da pasta do seu projeto, crie uma pasta chamada <strong>src</strong>.</p><p>Dentro dela, 3 pastas: <code>img</code>, <code>js</code> e <code>stylus</code>. </p><h3 id="Agora-sim-Vamos-‘comecar’"><a href="#Agora-sim-Vamos-‘comecar’" class="headerlink" title="Agora sim! Vamos ‘começar’."></a><strong>Agora sim! Vamos ‘começar’.</strong></h3><h2 id="Arquivo-src-index-html"><a href="#Arquivo-src-index-html" class="headerlink" title="Arquivo src/index.html"></a>Arquivo <strong>src/index.html</strong></h2><p>Crie o arquivo index.html dentro da pasta <code>src</code> com a seguinte estrutura básica:</p><figure class="highlight html"><figcaption><span>index.html [Crie na pasta src e insira:]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"pt-BR"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Antes e Depois com Gulp, Stylus e SEM JQuery.<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- conteudo irá aqui --&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Acima nada mais é do que o ‘esqueleto’ do nosso HTML, incluindo os arquivos <code>css/main.css</code> e <code>js/main.js</code>. </p><p>Um dos requisitos da nossa demanda era o markup mínimo.<br>Pois assim será, insira após o comentário:</p><figure class="highlight html"><figcaption><span>index.html [Insira após o comentário]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line">  <span class="comment">&lt;!-- conteudo irá aqui --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"antesDepois"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img1.jpg"</span> <span class="attr">alt</span>=<span class="string">"imagem 1"</span> <span class="attr">class</span>=<span class="string">"antes"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"depois"</span> <span class="attr">data-src</span>=<span class="string">"img2.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p><strong>Substitua <code>img1.jpg</code> e <code>img2.jpg</code> pelo nome das suas imagens</strong>.<br>Se quiser, <strong>pode usar as minhas imagens</strong>, salve elas na pasta <code>src/img</code>. Pegue elas aqui: <a href="http://imgur.com/a/Hcc8R" target="_blank" rel="noopener">http://imgur.com/a/Hcc8R</a> .</p><p>Olhem como o markup é mínimo! Um div com a classe <code>.antesDepois</code> é o nosso container. Dentro dele, uma <code>img</code>, que será o antes, e um <code>div</code> com o atributo <code>data-src</code> apontando uma outra imagem, que será o depois.</p><p>Com JS, pegaremos este atributo e adicionaremos como <code>background</code> do div, fazendo a mágica acontecer.</p><p>Mas, pra isso, precisamos  dum pouco de CSS:</p><h2 id="Arquivo-src-stylus-main-styl"><a href="#Arquivo-src-stylus-main-styl" class="headerlink" title="Arquivo src/stylus/main.styl"></a>Arquivo <strong>src/stylus/main.styl</strong></h2><p>Crie o arquivo <code>main.styl</code> dentro da pasta <code>src/stylus/</code></p><figure class="highlight stylus"><figcaption><span>main.styl [crie o arquivo e insira o conteúdo]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.antesDepois</span><br><span class="line">  <span class="attribute">display</span> block</span><br><span class="line">  <span class="attribute">position</span> relative</span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">  <span class="attribute">max-width</span> <span class="number">100%</span> !important</span><br><span class="line">  <span class="attribute">cursor</span> col-resize </span><br><span class="line">  img</span><br><span class="line">    <span class="attribute">max-width</span> <span class="number">100%</span> !important</span><br><span class="line">  .depois</span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">45%</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">99%</span></span><br><span class="line">    <span class="attribute">background-size</span> cover</span><br><span class="line">    <span class="attribute">border-right</span> <span class="number">1px</span> solid <span class="number">#fff</span></span><br></pre></td></tr></table></figure><p>Tudo bem simples: A classe do container é <code>.antesDepois</code>. Estamos definindo posicionamento relativo e largura 100%. e <code>!important</code> no <code>max-width</code>, pois não queremos que ele passe de 100% de largura.</p><p>O <code>cursor col-resize</code> é pra dar um charminho.</p><p>Também colocamos <code>max-width: 100% !important</code> para o img DENTRO DO .antesDepois. Apenas as imgs de dentro dele terão essa regra.</p><p>A classe <code>.depois</code> é quem faz a mágica.<br>Definimos um posicionamento absoluto, com 45% de largura e 99% de altura.<br>O Background-size vai ser cover, e uma bordinha branca pra ficar legal.</p><p>Note que o backgorund será incluído agora:</p><h2 id="Arquivo-src-js-main-js"><a href="#Arquivo-src-js-main-js" class="headerlink" title="Arquivo src/js/main.js"></a>Arquivo <strong>src/js/main.js</strong></h2><p>O nosso Javascript não usa Jquery. </p><p>Criaremos uma função IIFE, ou seja: Uma função auto-executável, que vai pegar todos os elementos da classe <code>.antesDepois</code> e executar um loop <code>for</code> com eles, gerando cada uma das instâncias que houver no HTML.</p><p>A sintaxe de uma função IIFE é assim: <code>(function(){})()</code> e seu conteúdo vai dentro dos {}.</p><figure class="highlight javascript"><figcaption><span>main.js [Crie na pasta js e insira:]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> containers = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'antesDepois'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>, qtd=containers.length; i &lt; qtd; i++) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Criada Instância '</span> + i);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'antesDepois'</span>)[i]</span><br><span class="line">    , antes = container.getElementsByClassName(<span class="string">'antes'</span>)[<span class="number">0</span>]</span><br><span class="line">    , depois = container.getElementsByClassName(<span class="string">'depois'</span>)[<span class="number">0</span>]</span><br><span class="line">    , depoisImg = depois.getAttribute(<span class="string">'data-src'</span>);</span><br><span class="line">  </span><br><span class="line">  depois.style.backgroundImage = <span class="string">"url('"</span>+depoisImg+<span class="string">"')"</span>;</span><br><span class="line">  container.addEventListener(<span class="string">"mousemove"</span>, comparaPosicao, <span class="literal">false</span>);</span><br><span class="line">  container.addEventListener(<span class="string">"touchstart"</span>,comparaPosicao,<span class="literal">false</span>);</span><br><span class="line"> container.addEventListener(<span class="string">"touchmove"</span>,comparaPosicao,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>Note a <code>var containers</code>: O método <code>getElementsByCLassName()</code> pega <strong>TODOS</strong> os elementos com a classe <code>antesDepois</code> e coloca-os em um Array.<br>Com isso, podemos fazer um loop <code>FOR</code>, que vai interagir, executando em cada um dos itens do array.</p><p>Em nosso for, colocamos o <code>containers.length</code> em uma variável. Isso é tipo um ‘cache’ pra melhorar a performance ao iterar um array.</p><p>Em cada um dos loops, pegaremos o item da vez no array <code>container</code>.</p><p>Daí as variáveis <code>antes, depois e depoisImg</code> vêm com o mesmo método <code>getElementsByClassName()</code>, só que dessa vez o método é executado dentro do <code>container</code>, e não do <code>document</code>.</p><p>Portanto, só os ementos que estiverem dentro de <code>container</code>, que representa o item atual do FOR.</p><p>Por último, no trecho acima, temos o método <code>.style()</code>, em que inserimos um <code>background-image</code>, cuja url pegamos com <code>getAttribute(&#39;data-src&#39;)</code> logo antes.</p><p>Daí, os 3 <code>addEventListeners</code> que vão monitorar, respectivamente por um Mousemove, TouchStart e TouchMove, <strong>sempre dentro do <code>container</code></strong>.</p><p>Quando disparar o evento, vão chamar a função <code>comparaPosicao()</code>, que criaremos agora:</p><p>Insira, ao final do <code>main.js</code>:</p><figure class="highlight javascript"><figcaption><span>main.js [insira, ao final do arquivo:]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comparaPosicao</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> retangulo = <span class="keyword">this</span>.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">var</span> posicao = ((e.pageX - retangulo.left) / <span class="keyword">this</span>.offsetWidth)*<span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (posicao &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.getElementsByClassName(<span class="string">'depois'</span>)[<span class="number">0</span>].style.width= posicao+<span class="string">"%"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A função recebe um evento (e) como parâmetro. Aì usamos <code>this.getBoundingClientRect()</code> que nos dá um retângulo do container. A palavra chave <code>this</code>, no caso, refere-se à variavel <code>container</code>, onde a função foi chamada pelo ´eventListener`.</p><p>A <code>var posicao</code> é uma continha que pega o eixo X de dentro do retangulo (pageX - retangulo.left) e divide pelo <code>offsetWidth</code>, ou seja: largura do <code>container</code>. Isso dá um número decimal, fazemos ele * 100 e temos em quantos % da largura nosso mouse está.</p><p>Se a <code>var posicao</code> for menor ou igual a 100, pegaremos o elemento com a classe <code>.depois</code> de dentro do container atual (this) e definiremos sua largura (width) com a posição do mouse. Se ela for maior, significa que o mouse ou touch está fora do <code>container.</code></p><blockquote><blockquote><p>Ufa, terminamos.</p></blockquote></blockquote><h2 id="Testando-e-Rodando"><a href="#Testando-e-Rodando" class="headerlink" title="Testando e Rodando."></a>Testando e Rodando.</h2><p>Com o seu terminal, acesse a pasta d oprojeto e rode o comendo:<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure></p><p>Se tudo der certo, seu navegador abrirá em <a href="http://localhost:1337" target="_blank" rel="noopener">http://localhost:1337</a> com tudo funcionando!! :)</p><p>Ah, o resultado final está também (com gulp e stylus) <a href="https://github.com/romuloctba/post-antes-e-depois-responsivo-sem-jquery" target="_blank" rel="noopener">neste repositório do github</a></p><hr><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Apesar da preparação para o Workflow ter deixado o artigo um pouco longo, vimos que o código é bastante simples, sem precisar de JQuery.</p><p>Espero que possa passar à quem ainda tem medo, a coragem necessária pra largar mão - quando possível - desse framework tão bom, mas tão usado desnecessariamente.</p><p>É isso aí! Muito obrigado pela visita, volte sempre e fique a vontade :D</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/efeito-antes-e-depois-sem-jquery-com-gulp-stylus.jpg&quot; alt=&quot;efeito-antes-e-depois-sem-jquery-com-gulp-stylus.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Sabe 
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://rcdevlabs.github.io/tags/javascript/"/>
    
      <category term="Gulp" scheme="http://rcdevlabs.github.io/tags/gulp/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
      <category term="Workflow" scheme="http://rcdevlabs.github.io/tags/workflow/"/>
    
      <category term="Stylus" scheme="http://rcdevlabs.github.io/tags/stylus/"/>
    
  </entry>
  
  <entry>
    <title>Upload de arquivos em API RESTfull NodeJS</title>
    <link href="http://rcdevlabs.github.io/2015/02/15/upload-de-arquivos-em-api-restfull-nodejs/"/>
    <id>http://rcdevlabs.github.io/2015/02/15/upload-de-arquivos-em-api-restfull-nodejs/</id>
    <published>2015-02-15T08:08:20.000Z</published>
    <updated>2022-02-09T04:05:07.470Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/upload-nodejs-rest-api-como-fazer.jpg" alt="upload-nodejs-rest-api-como-fazer"></p><p>API’s REST são muito legais para CRUD, mas e quando precisa fazer um Upload? Hoje veremos como enviar arquivos para uma API REST feita com NodeJs</p><p>O resultado final backend e frontend está disponível aqui: <a href="https://github.com/romuloctba/post-upload-rest-nodejs" target="_blank" rel="noopener">neste repositório</a> do github.</p><h2 id="Analisando-a-demanda"><a href="#Analisando-a-demanda" class="headerlink" title="Analisando a demanda"></a>Analisando a demanda</h2><ul><li>Necessidade Permitir o envio de arquivos em uma API REST, com frontend independente, que poderia ser qualquer client, ou seja: FrontEND agnóstica.</li></ul><h2 id="Servidor-basico"><a href="#Servidor-basico" class="headerlink" title="Servidor básico"></a>Servidor básico</h2><p>Poderiamos facilmente implementar em nossa <a href="http://rcdevlabs.github.io/2015/02/12/como-criar-uma-api-restfull-em-nodejs-e-autenticar-usando-json-web-token-jwt/">API RESTfull com autenticação JSON Web Token JWT</a>, mas para evitar confusão, vamos usar um servidor bem simples para este artigo.</p><p>Primeiro, crie uma pasta para seu projeto. Depois, crie os seguintes arquivos:</p><figure class="highlight json"><figcaption><span>[package.json][crie o arquivo e insira o código]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"teste-upload-nodejs"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"server.js"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"^1.11.0"</span>,</span><br><span class="line">    <span class="attr">"connect-multiparty"</span>: <span class="string">"^1.2.5"</span>,</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"^4.11.2"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(Iremos usar o <code>connect-multiparty</code> para receber o arquivo.)</p><p>Acesse a pasta com o terminal, e rode:<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>Agora vamos criar o server. Ele é bem simples, e após o código explico o que está acontecendo:</p><figure class="highlight javascript"><figcaption><span>[server.js][crie o arquivo e insira o código]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line">  , app = express()</span><br><span class="line">  , bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line">  , multiparty = <span class="built_in">require</span>(<span class="string">'connect-multiparty'</span>);</span><br><span class="line">  </span><br><span class="line">  app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">  app.use(bodyParser.json());</span><br><span class="line">  <span class="keyword">var</span> port = process.env.PORT || <span class="number">8080</span>;</span><br><span class="line">  <span class="keyword">var</span> router = express.Router();</span><br><span class="line">  </span><br><span class="line">  app.use(<span class="string">'/api'</span>, router);</span><br><span class="line"> <span class="comment">/*insira as rotas aqui */</span></span><br><span class="line"></span><br><span class="line">  app.listen(port);</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'conectado a porta '</span> + port);</span><br></pre></td></tr></table></figure><p>No início, temos os <strong> vars e <code>require()</code></strong>, aí declaramos nossos middlewares do <code>bodyParser.urlencoded()</code> e <code>bodyParser.json()</code>. São o básico para uma API REST, sendo o primeiro para usar os URL params, e o segundo para <code>.json()</code>., Aí a porta, o router e um <code>app.use(&#39;/api&#39;)</code> que define nosso base endpoint.</p><p>Agora, criaremos nossa rota de upload. Insira, abaixo do comentário</p><figure class="highlight javascript"><figcaption><span>[server.js][insira abaixo do comentário]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="comment">/*insira as rotas aqui */</span></span><br><span class="line">router.route(<span class="string">'/upload'</span>)</span><br><span class="line">    .post(multiparty(), <span class="built_in">require</span>(<span class="string">'./controllers/upload'</span>));</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Note a sintaxe do <code>.post(multiparty(), require(....</code>.<br>O que isso quer dizer, é o middleware <code>multiparty()</code> será executado antes de acessar o controller da rota, que iremos criar agora: </p><h2 id="Criando-o-controller-de-Upload"><a href="#Criando-o-controller-de-Upload" class="headerlink" title="Criando o controller de Upload"></a>Criando o controller de Upload</h2><p>Crie uma pasta chamada <code>/controllers</code>.<br>Crie um arquivo <code>upload.js</code> na pasta controllers</p><figure class="highlight javascript"><figcaption><span>[uploads.js] [crie arquivo na pasta CONTROLLERS]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">  <span class="keyword">var</span> arquivo = req.files.file;</span><br><span class="line">  <span class="keyword">var</span> temporario = req.files.file.path;</span><br><span class="line">  <span class="keyword">var</span> novo = <span class="string">'./uploads/'</span> + req.files.file.name;</span><br><span class="line"> fs.rename(temporario, novo, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(err)&#123;</span><br><span class="line"> res.status(<span class="number">500</span>).json(&#123;<span class="attr">error</span>: err&#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> res.json(&#123;<span class="attr">message</span>: <span class="string">"enviado com sucesso."</span>, <span class="attr">file</span>: novo&#125;);</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Antes de tudo, no começo da função, <code>res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</code> vai garantir que não tenhamos problemas com CORS, deixando claro que qualquer um pode fazer requests para essa rota. Não é a melhor prática do mundo, mas pra agora, nos serve.</p><p>Daí, usamos o <code>fs</code>, módulo nativo do NodeJs.<br>O <code>module.exports</code> contém nossa função.<br>Ela recebe 2 parâmetros: <code>req</code> e <code>res</code>, nossas conhecidas.</p><p>Na propriedade <code>files</code> do objeto da requisição temos o nosso arquivo recebido pelo <code>multiparty</code>.</p><p>Usamos a <code>fs.rename()</code> para transferir ele da pasta temporária (<code>req.files.file.path</code>) para uma nova que definimos na variável <code>var novo</code>.</p><p>Se tiver erro, retorna <code>res.status(500)</code> e a mensagem em JSON.</p><p>Se der tudo certo, <code>res.json()</code> com o nome do arquivo.</p><h3 id="Testando-nosso-server"><a href="#Testando-nosso-server" class="headerlink" title="Testando nosso server"></a>Testando nosso server</h3><p>Para testar, vá a pasta do server com o terminar e rode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server</span><br></pre></td></tr></table></figure></p><p>Deu certo? Show! Agora vamos fazer o frontEnd. </p><h3 id="Server-pronto-vamos-ao-FrontEnd"><a href="#Server-pronto-vamos-ao-FrontEnd" class="headerlink" title="Server pronto, vamos ao FrontEnd."></a>Server pronto, vamos ao FrontEnd.</h3><p>Crie uma outra pasta qualquer e crie um arquivo <code>index.html</code> dentro dela.</p><figure class="highlight html"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"pt-BR"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Simples file upload com RestAPI<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"enviaArquivo.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"arquivoInput"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"enviar()"</span>&gt;</span>Enviar <span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Retorno JSON: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"mensagem"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Aqui, nada demais: um <code>&lt;input type=&quot;file&quot;</code> com um ID e um <code>&lt;button&gt;</code> com <code>onClick=enviar()</code>, que é a função que vamos criar agora.</p><p>Crie o arquivo <code>enviaArquivo.js</code>, e insira:</p><figure class="highlight javascript"><figcaption><span>[enviaArquivo.js] [Crie o arquivo e insira o código:]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enviar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">var</span> arquivo = <span class="built_in">document</span>.getElementById(<span class="string">"arquivoInput"</span>).files[<span class="number">0</span>];</span><br><span class="line">formData.append(<span class="string">"file"</span>, arquivo);</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'mensagem'</span>);</span><br><span class="line">    <span class="keyword">var</span> resposta = xhr.responseText;</span><br><span class="line">    div.innerHTML += resposta;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.open(<span class="string">"POST"</span>, <span class="string">"http://localhost:8080/api/upload"</span>);</span><br><span class="line">  xhr.send(formData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Aí é bem fácil:</p><ol><li><p><code>var formData = new FormData()</code>… aí instanciamos um novo form, inserindo com <code>append()</code> um item chamado ‘file’ que vem do <code>getElementById(&quot;arquivoInput&quot;)</code>, o ID do nosso campo de arquivo no HTML.</p></li><li><p>na  <code>var xhr</code> criamos um <code>new XMLHttpRequest()</code>, que é a base do <code>$ajax</code>, mas quis fazer sem JQuery esse exemplo (mandei mal? diga nos comentários!).</p></li><li><p>Definimos como propriedade do <code>onreadystatechange</code> do XHR que criamos uma função. Ela vai testar <strong>se</strong> <code>xhr.readyState == 4</code>. 4 significa concluído.<br><strong>Se sim</strong>, inserimos a resposta (<code>xhr.responseText</code>) no elemento <code>#mensagem</code> do nosso HTML.</p></li><li><p>Por último, abrimos a conexão com <code>xhr.open</code>, fazendo um <code>POST</code> para a url alí definida (no caso, <code>localhost:8080</code>). Enviamos nosso formulário com <code>xhr.send(formData)</code>.</p></li></ol><h3 id="Importante"><a href="#Importante" class="headerlink" title="Importante!!!"></a>Importante!!!</h3><p>Não esqueça de criar a pasta <code>/uploads</code> na raíz do seu projeto, senão vc receberá o erro:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"error"</span>:&#123;<span class="attr">"errno"</span>:<span class="number">34</span>,<span class="attr">"code"</span>:<span class="string">"ENOENT"</span> .......</span><br></pre></td></tr></table></figure></p><h2 id="Testando-nosso-envio-de-arquivos-com-NodeJS"><a href="#Testando-nosso-envio-de-arquivos-com-NodeJS" class="headerlink" title="Testando nosso envio de arquivos com NodeJS"></a>Testando nosso envio de arquivos com NodeJS</h2><p>Rode o servidor pelo terminal com <code>node server</code> (ou já deixou rodando? tanto faz ^_^) e abra o arquivo <code>index.html</code> na raça mesmo, com 2 cliques. Tenta enviar um arquivo….</p><p>Viu a resposta? Maneiro né ^_^, enviamos nosso arquivo!</p><p>Para ver o arquivo, entre na pasta <code>uploads</code>, criada agora na pasta do seu servidor. </p><p>Não deixamos a pasta uploads pública, por isso não dá para acessar pela URL.</p><h2 id="Deixando-a-pasta-uploads-publica"><a href="#Deixando-a-pasta-uploads-publica" class="headerlink" title="Deixando a pasta uploads pública"></a>Deixando a pasta uploads pública</h2><p>Se quiser fazer isso, basta adicionar  o seguinte, antes linha <code>app.use(&#39;/api&#39;)</code>:</p><figure class="highlight javascript"><figcaption><span>[server.js] [insira a linha à seguir]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/enviadas'</span>, express.static(__dirname  + <span class="string">'/uploads'</span>));</span><br></pre></td></tr></table></figure><p>Agora, acessando <code>localhost:8080/enviadas/NOMEDOARQUIVO.ext</code>, você pode baixar o arquivo enviado.</p><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>É isso aí amiguinhos! Nossa brincadeira de hoje é muito útil, e facilmente implementável. O FrontEnd, reforçando, era só um exemplo. Você pode fazer o envio usando XTHMLRequests <code>multipart</code> com qualquer frontend.</p><p>O resultado final deste artigo, backend e frontend, está disponível aqui: <a href="https://github.com/romuloctba/post-upload-rest-nodejs" target="_blank" rel="noopener">neste repositório</a> do github.</p><p>Mais pra frente faremos algo mais bonitinho :)</p><p>Muito obrigado pela visita, e um grande abraço. Volte sempre. Keep Coding.</p><p>Ah, lembrando que agora temos Maillist. Cadastre seu e-mail na caixinha persistente ao lado –&gt; e receba todo dia o post novo. Estou participando do #1postperday, brilhante iniciativa do <a href="http://blog.da2k.com.br" target="_blank" rel="noopener">@fdaciuk</a> e tentarei fazer juz, produzindo bastante conteúdo legal</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/upload-nodejs-rest-api-como-fazer.jpg&quot; alt=&quot;upload-nodejs-rest-api-como-fazer&quot;&gt;&lt;/p&gt;
&lt;p&gt;API’s REST são muito legais para CRUD, 
      
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://rcdevlabs.github.io/tags/nodejs/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
      <category term="REST" scheme="http://rcdevlabs.github.io/tags/rest/"/>
    
      <category term="Rapidinha" scheme="http://rcdevlabs.github.io/tags/rapidinha/"/>
    
  </entry>
  
  <entry>
    <title>HTML e CSS Ninja: Seja 90% mais ágil com o Emmet. (Criando o markup de um layout em 20segundos )</title>
    <link href="http://rcdevlabs.github.io/2015/02/14/html-e-css-ninja-seja-90x-mais-agil-com-o-emmet/"/>
    <id>http://rcdevlabs.github.io/2015/02/14/html-e-css-ninja-seja-90x-mais-agil-com-o-emmet/</id>
    <published>2015-02-14T20:59:45.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<img src="/2015/02/14/html-e-css-ninja-seja-90x-mais-agil-com-o-emmet/mais-produtividade-emmet-plugin-para-html-css.jpg" title="Como começar a usar GULP e pré-processadores"><p>Hey! Se eu falar que você está disperdiçando vida útil dos seus dedos e teclado, além, claro, de tempo da sua vida ao digitar HTML e CSS normalmente?</p><p>Pois é! Digitar cada caractér de uma tag, cada propriedade e valor de um css é bem anti-produtivo. Se você nunca pensou nisso, agora vai ver.</p><p>Esse é mais #1postperday e dessa vez eu trago - pra quem não conhece - uma dica de produtividade!</p><hr><h2 id="O-problema"><a href="#O-problema" class="headerlink" title="O problema:"></a>O problema:</h2><p>Repetição. O grande inimigo da produtividade. Se você precisa fazer uma coisa mais de 2x, talvez seja bom otimizar/automatizar o processo.</p><p>Escrever o markup básico de um layout pode ser bastante cansativo. entre &lt;, “, = e / , veja quantas posições diferentes seus dedos fazem.</p><h2 id="A-solucao"><a href="#A-solucao" class="headerlink" title="A solução:"></a>A solução:</h2><p>Em meados de 2011 eu conheci um plugin que mudou minha vida. Chamado, na época de <em>Zen Coding</em> foi uma daquelas descobertas em que me peguei comemorando sozinho em voz alta - enquanto minha família me olhava perplexa e pensava em me internar :P</p><p>Sem mais delongas, vamos à prática!!</p><hr><h3 id="O-que-e-o-Emmet"><a href="#O-que-e-o-Emmet" class="headerlink" title="O que é o Emmet?"></a>O que é o Emmet?</h3><p>Emmet é um plugin - com suporte à diversos editores - cuja função é trabalhar com atalhos para digitação de HTML e CSS. Vou mostrar com exemplos, mais abaixo.</p><h3 id="Como-instalar"><a href="#Como-instalar" class="headerlink" title="Como instalar"></a>Como instalar</h3><p>No site official <a href="http://emmet.io/download/" target="_blank" rel="noopener">emmet.io</a> existe uma relação de editores suportados. **Além dos editores suportados, os derivados deles (exemplo: Aptana é derivado do Sublime) também devem funcionar.</p><p>Normalmente, o fluxo de instalação é:</p><ol><li><p>Acesse o Package Manager (ou Package Controll) do seu editor</p></li><li><p>Em Install Packages, procure por <code>emmet</code> e instale.</p></li><li><p>A instalação manual normalmente consiste em clonar o repositório do plugin para a pasta <code>/plugins</code> do seu editor.</p></li></ol><p><img src="editores-suportam-emmet-plugin-para-html-css.jpg" alt="Editores suportados pelo Emmet"><br>Na imagem acima, nem todos tem suporte TOTAL do Emmet. Veja a relação na página oficial.</p><h1 id="Exemplos-do-Emmet-para-Workflow-Ninja-HTML"><a href="#Exemplos-do-Emmet-para-Workflow-Ninja-HTML" class="headerlink" title="Exemplos do Emmet para Workflow Ninja HTML"></a>Exemplos do Emmet para Workflow Ninja HTML</h1><p>Supondo que já instalou o Emmet e reiniciou seu editor, vamos começar a brincar (^_^)y</p><ul><li>Estrutura básica HTML5 com 6 letras:</li></ul><p>Inicie um novo arquivo HTML (e salve ele). Digite:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html:5</span><br></pre></td></tr></table></figure></p><p>e aperte [TAB].</p><blockquote><p>Eiiiiita carái</p></blockquote><p>Eaí, curtiu? hehehe Maneiro né? Talvez tenha que mudar o atributo <code>lang</code> para <code>pt_BR</code>.</p><p>Agora , dentro da tag <code>body</code>, digite:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.minhaClasse#meuId&gt;p</span><br></pre></td></tr></table></figure><p>e aperte [TAB]. Tá dando pra entender a idéia né?</p><h4 id="Criando-o-markup-de-um-layout-em-menos-de-20-segundos"><a href="#Criando-o-markup-de-um-layout-em-menos-de-20-segundos" class="headerlink" title="Criando o markup de um layout em menos de 20 segundos."></a>Criando o markup de um layout em menos de 20 segundos.</h4><p>Agora apague tudo no arquivo html e digite: </p><p><strong><code>html:5&gt;(header#main-header&gt;img+h1.title)+(div#main-content&gt;div.post*3&gt;h1{post $}+p{lorem ipsilum})+(footer#mainFooter&gt;div&gt;ul&gt;li{link $}*4)</code></strong></p><p>E aperte [tab]. :O  u-au.</p><p>É, galera o Emmet é foda. Veja abaixo como funciona:</p><h3 id="Sintaxe-HTML-para-Emmet"><a href="#Sintaxe-HTML-para-Emmet" class="headerlink" title="Sintaxe HTML para Emmet:"></a>Sintaxe HTML para Emmet:</h3><ul><li><p><code>&gt;</code> significa <strong>filho</strong> de. Se você fizer <code>div&gt;p</code> criará um div com um parágrafo dentro.</p></li><li><p><code>+</code> significa <strong>irmão</strong>. Quer dizer que estarão lado-a-lado, dentro do mesmo ‘pai’. Tente <code>div&gt;h1+p</code></p></li><li><p><code>^</code> <strong>Sobe um nível</strong>. O elemento será criado um item acima na hierarquiva. Tente <code>article&gt;div&gt;h1+p^img</code></p></li><li><p><code>()</code> <strong>Grupos</strong>. Pra agrupar elementos pais e filhos entre sí, permitindo blocos irmãos com pai e filho. Tente <code>h1+(ul&gt;li)+(ol&gt;li)</code></p></li><li><p><code>*</code> <strong>Multiplicação</strong>. O número de vezes que o elemento será repetido. Tente: <code>ul&gt;li*5</code></p></li><li><p><code>$</code> <strong>Enumerar</strong>. Enumera, dentro de uma repetição. Tente <code>ul&gt;li{item numero $}*6</code></p></li><li><p><code># e .</code> <strong>Id e classe</strong>. Tente <code>div.principal&gt;ul.lista&gt;li.item-$*5</code></p></li><li><p><code>[atributo=valor]</code> Para <strong>atributos</strong> de uma tag. tente <code>img[src=imagem.jpg][title=Minha imagem]</code></p></li><li><p><code>{}</code> <strong>Texto</strong>. Insere texto no elemento. Tente <code>p{lorem ipilum $}*3</code></p></li></ul><h1 id="Exemplos-do-Emmet-para-Workflow-Ninja-CSS"><a href="#Exemplos-do-Emmet-para-Workflow-Ninja-CSS" class="headerlink" title="Exemplos do Emmet para Workflow Ninja CSS"></a>Exemplos do Emmet para Workflow Ninja CSS</h1><p>No CSS é mais fácil.</p><p>Basta você digitar as primeiras letras da propriedade, que ele irá encontrar. <strong>Para criar com vendor prefix, basta adicionar <code>-</code> antes.</strong></p><p>Exemplos:</p><ul><li>Crie um arquivo main.css, salve-o e digite:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  c#222+posr+fl+mt1em+ml1em+-txtsh1px1px1px#222</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Agora aperte [tab].</p><blockquote><p>Eeeeita penga!!</p></blockquote><p>Viu? Jogo ótimo né?</p><p>[update] Para quem usa sublime e Stylus, esse é o cara: <a href="https://github.com/billymoon/Stylus-Snippets" target="_blank" rel="noopener">https://github.com/billymoon/Stylus-Snippets</a> a sintaxe é a mesma do Emmet, e funciona lindamente.</p><h1 id="Conclusao-e-consideracoes"><a href="#Conclusao-e-consideracoes" class="headerlink" title="Conclusão e considerações."></a>Conclusão e considerações.</h1><p>O emmet é uma p* ferramenta pra agilizar seu workflow. Nunca mais você vai digitar seu markup de cabo a rabo, e o css também.</p><p>Pode começar a usar já que não irá se arrepender.</p><p>Aqui segue uma <code>cheatSheet</code> com referências do Emmet para HTML e CSS. Consulte, quando tiver dúvidas: <a href="http://docs.emmet.io/cheat-sheet/" target="_blank" rel="noopener">http://docs.emmet.io/cheat-sheet/</a></p><p>###Obrigado, e volte sempre.</p><p>Por hoje é isso, amiguinhos! Agradeço, de coração, sua visita, e espero ter podido ajudar um pouco você a melhorar sua produtividade e qualidade de vida.</p><p>Lembrando que agora <strong>temos feed de notícias</strong> no blog, e você pode inscrever seu e-mail alí -&gt; para receber novos posts diariamente. É pelo mailchimp e não mandarei spam.</p><p>Dicas? Comentários? Xingamentos? Poste abaixo:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2015/02/14/html-e-css-ninja-seja-90x-mais-agil-com-o-emmet/mais-produtividade-emmet-plugin-para-html-css.jpg&quot; title=&quot;Como começar
      
    
    </summary>
    
    
      <category term="Workflow" scheme="http://rcdevlabs.github.io/tags/workflow/"/>
    
      <category term="Html" scheme="http://rcdevlabs.github.io/tags/html/"/>
    
      <category term="Css" scheme="http://rcdevlabs.github.io/tags/css/"/>
    
      <category term="Produtividade" scheme="http://rcdevlabs.github.io/tags/produtividade/"/>
    
  </entry>
  
  <entry>
    <title>Começando AGORA com Gulp e pré-processadores. Parte 1: Suas primeiras Tasks</title>
    <link href="http://rcdevlabs.github.io/2015/02/13/comecando-agora-com-gulp-e-preprocessadores-parte-1-suas-primeiras-tasks/"/>
    <id>http://rcdevlabs.github.io/2015/02/13/comecando-agora-com-gulp-e-preprocessadores-parte-1-suas-primeiras-tasks/</id>
    <published>2015-02-13T07:16:58.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<img src="/2015/02/13/comecando-agora-com-gulp-e-preprocessadores-parte-1-suas-primeiras-tasks/iniciando-com-gulp-e-preprocessadores-como.jpg" title="Como começar a usar GULP e pré-processadores"><p>Tem ouvido muito falar em Gulp, Jade, Sass, Stylus, Less, YAML, EJS, etc, mas não sabe por onde começar? Seus problemas acabaram. Venha passear no território do workflow automatizado e vicie-se completamente.</p><p>Quem me iniciou no gulpjs foi o <a href="http://blog.da2k.com.br/" target="_blank" rel="noopener">@fdaciuk</a>, em uma palestra sobre gulp no WordCamp SP 2014. Hoje, tenho o prazer de apresentar pra vcs algumas dicas para começar JÁ a facilitar sua vida.</p><p><strong>Neste artigo veremos o básico do GulpJS, e como trabalhar de forma automágica com pré-processadores (stylus e jade, mas é muito semelhante para usar com quaisquer outros que prefira)</strong></p><p>(o resultado/exemplo está <a href="https://github.com/romuloctba/blog-inciando-gulp-preprocessadores" target="_blank" rel="noopener">neste repositório do github</a>)</p><h3 id="Pre-Requisitos-para-Comecar"><a href="#Pre-Requisitos-para-Comecar" class="headerlink" title="Pré-Requisitos para Começar:"></a>Pré-Requisitos para Começar:</h3><ul><li><p><a href="http://nodejs.org" target="_blank" rel="noopener">NodeJS</a></p></li><li><p>Gulp instalado globalmente:</p></li></ul><p>Abra o terminal (com o nodejs já instalado) e rode:<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure></p><p>Isso deve deixar  disponível o comando <code>gulp</code> no terminal.</p><h2 id="Vamos-comecar"><a href="#Vamos-comecar" class="headerlink" title="Vamos começar?"></a>Vamos começar?</h2><p>Primeiro, crie uma pasta para seu projeto. Já deixe o console aberto nela também :P</p><p>Vamos criar o arquivo <code>package.json</code>, a base de todo projeto NodeJs.</p><figure class="highlight json"><figcaption><span>[package.json][crie o arquivo na pasta de seu projeto]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"gulp-primeiro"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^3.8.11"</span>,</span><br><span class="line">    <span class="attr">"gulp-connect-multi"</span>: <span class="string">"^1.0.8"</span>,</span><br><span class="line">    <span class="attr">"gulp-jade"</span>: <span class="string">"^0.11.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-stylus"</span>: <span class="string">"^2.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note as <code>devDependencies</code>: gulp (este é o local, já instalamos o global, antes), gulp-connect-multi (servidor/livereload), gulp-jade e gulp-stylus.</p><p>Você acha pacotes maneiros de gulp, se precisar em <a href="http://npmjs.com" target="_blank" rel="noopener">npmjs.com</a>, buscando por ‘gulp’ ou em <a href="http://gulpjs.com/plugins/" target="_blank" rel="noopener">GulpJS.com/plugins</a>.</p><p>Com o console, rode:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="Como-criar-uma-task-no-GulpJs"><a href="#Como-criar-uma-task-no-GulpJs" class="headerlink" title="Como criar uma task no GulpJs"></a>Como criar uma task no GulpJs</h2><p>Na pasta do seu projeto, crie um arquivo chamado <code>gulpfile.js</code></p><figure class="highlight javascript"><figcaption><span>[gulpfile.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'teste'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"teste de task do GulpJS"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Salve e, no terminal execute: </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp teste</span><br></pre></td></tr></table></figure><p>Viu que bacana? </p><p>Saca a sintaxe: <strong><em>gulp.task(nome, função)</em></strong>.</p><h2 id="Usando-Jade-com-Gulp-Js"><a href="#Usando-Jade-com-Gulp-Js" class="headerlink" title="Usando Jade com Gulp Js"></a>Usando Jade com Gulp Js</h2><p>Ainda no <code>gulpfile.js</code>, ao final do arquivo, insira:</p><figure class="highlight javascript"><figcaption><span>[gulpfile.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line">  <span class="keyword">var</span> jade = <span class="built_in">require</span>(<span class="string">'gulp-jade'</span>);</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'jade'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'src/jade/**/**.jade'</span>)</span><br><span class="line">    .pipe(jade())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'build'</span>));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Pontos importantes:</p><ul><li><p><strong><code>gulp.src()</code></strong> informa ao gulp qual arquivo ele vai usar, em formato de globs. <code>&#39;src/jade/**/**.jade&#39;</code> significa todos arquivos .jade dentro de src/jade/ e subdiretórios.</p></li><li><p><strong><code>.pipe()</code></strong> o pipe executa algo com o gulp.src(). Note como podemos usar vários <code>.pipe()</code> em sequência, e como não há <code>;</code> até acabarmos.</p></li><li><p><strong><code>jade()</code></strong> executa o módulo jade. Usado sempre dentro de um .pipe()</p></li><li><p><strong><code>gulp.dest()</code></strong> após o <code>.pipe(jade())</code>, usamos o <code>pipe(gulp.dest(nomeDaPasta))</code> para enviar o resultado para a pasta <code>/build</code></p></li></ul><p>Vamos criar um arquivo <code>index.jade</code> dentro da pasta <code>/src/jade</code> e testar logo nossa task ^_^y</p><figure class="highlight plain"><figcaption><span>[index.jade][Crie dentro da pasta jade]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=&quot;pt_BR&quot;)</span><br><span class="line">  head</span><br><span class="line">    title= &quot;Título da página&quot;</span><br><span class="line">  body</span><br><span class="line">    h1 Teste de arquivo Jade!</span><br></pre></td></tr></table></figure><p>Salve, abra o terminal na <strong>pasta raiz do projeto</strong> e rode:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp jade</span><br></pre></td></tr></table></figure><p><strong>Veja o resultado: Na pasta <code>/build</code>, que foi criada na raíz do projeto</strong>, há um arquivo <code>index.html</code>, que é o seu <code>index.jade</code> compilado.</p><h2 id="Criando-um-server-com-LiveReload-no-Gulp-JS"><a href="#Criando-um-server-com-LiveReload-no-Gulp-JS" class="headerlink" title="Criando um server com LiveReload no Gulp JS"></a>Criando um server com LiveReload no Gulp JS</h2><p>Vamos criar uma nova task, chamada de <code>server</code>. Ao final do <code>gulpfile.js</code>, insira:</p><figure class="highlight javascript"><figcaption><span>[gulpfile.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'gulp-connect-multi'</span>)();</span><br><span class="line">  </span><br><span class="line">gulp.task(<span class="string">'server'</span>, connect.server(&#123;</span><br><span class="line">  root: [<span class="string">'build'</span>],</span><br><span class="line">  port: <span class="number">1337</span>,</span><br><span class="line">  livereload: <span class="literal">true</span>,</span><br><span class="line">  open: &#123; <span class="attr">browser</span>: <span class="string">'chrome'</span> &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>Pontos importantes:</p><p>Note que essa task não tem <code>gulp.src</code>, nem <code>gulp.dest</code>. O que fazemos é chamar <code>connect.server()</code>, com alguns parâmetros: root, port, livereload e open.</p><p>Agora salve o arquivo, e rode<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp server</span><br></pre></td></tr></table></figure></p><p>Maneiro né? Pra funcionar, você precisa ter executado a task jade antes. Podemos inseri-la como dependencia, mas faremos isso mais tarde.</p><p>Aperte <code>ctrl+c</code> no terminal para encerrar o servidor.</p><h2 id="Usando-Pre-processador-CSS-Stylus-com-Gulp-Js"><a href="#Usando-Pre-processador-CSS-Stylus-com-Gulp-Js" class="headerlink" title="Usando Pré-processador CSS (Stylus) com Gulp Js"></a>Usando Pré-processador CSS (Stylus) com Gulp Js</h2><p>Criemos nossa task. Ela deve pegar os arquivos .stylus, gerar o css e salvar na pasta ./build</p><figure class="highlight javascript"><figcaption><span>[gulpfile.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>(<span class="string">'gulp-stylus'</span>);</span><br><span class="line">  </span><br><span class="line">gulp.task(<span class="string">'stylus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'src/stylus/**/**.styl'</span>)</span><br><span class="line">    .pipe(stylus())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'build/css'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Crie uma pasta <code>src/stylus</code> e, dentro, um arquivo <code>main.styl</code></p><p>insira:<br><figure class="highlight stylus"><figcaption><span>[main.styl][crie dentro da pasta stylus]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$bgcolor = red;</span><br><span class="line">$maincolor = blue;</span><br><span class="line">  </span><br><span class="line">body</span><br><span class="line">  <span class="attribute">background</span> <span class="variable">$bgcolor</span></span><br><span class="line">  <span class="attribute">color</span> <span class="variable">$maincolor</span></span><br></pre></td></tr></table></figure></p><p>Salve, abra o terminal na pasta raíz e rode</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp stylus</span><br></pre></td></tr></table></figure><p>Yay!! Agora, dentro da pasta <code>build/css</code> temos o arquivo <em>main.css</em>, devidamente compilado do Stylus :D</p><p>Agora, não seria bacana se pudessemos deixar o servidor rodando e atualizar a página, compilar stylus e compilar jade sem ficar executando tasks o tempo todo?</p><p>SIM, SERIA MUITO LEGAL!</p><h2 id="Usando-LiveReload-com-GulpJs-para-atualizar-quando-houver-alteracao-em-algum-arquivo"><a href="#Usando-LiveReload-com-GulpJs-para-atualizar-quando-houver-alteracao-em-algum-arquivo" class="headerlink" title="Usando LiveReload com GulpJs para atualizar quando houver alteração em algum arquivo"></a>Usando LiveReload com GulpJs para atualizar quando houver alteração em algum arquivo</h2><p>Pra isso, precisaremos de:</p><ol><li><p>task com funções .watch() pra cada tipo de arquivo (.jade e .styl)</p></li><li><p>task que execute as tasks jade, stylus, server e watch, em sequencia</p></li><li><p>inserir a função .reload() ao final de cada task</p></li></ol><p>Então vamos lá:</p><h3 id="1-Criando-watch-no-gulp"><a href="#1-Criando-watch-no-gulp" class="headerlink" title="1. Criando watch no gulp"></a>1. Criando watch no gulp</h3><p>Edite o arquivo <code>gulpfile.js</code>, inserindo ao final dele:</p><figure class="highlight javascript"><figcaption><span>[gulpfile.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"> gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> gulp.watch([<span class="string">'src/jade/**/**.jade'</span>], [<span class="string">'jade'</span>]);</span><br><span class="line"> gulp.watch([<span class="string">'src/stylus/**/**.styl'</span>], [<span class="string">'stylus'</span>]);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>Acima, usamos <code>gulp.watch()</code>, onde o primeiro parâmetro é um(alguns) GLOB(s) dos arquivos à serem monitorados e o segundo parâmetro, a(s) task(s) à executar</p><h3 id="2-Criando-uma-task-padrao-para-unificar-tudo"><a href="#2-Criando-uma-task-padrao-para-unificar-tudo" class="headerlink" title="2. Criando uma task padrao para unificar tudo"></a>2. Criando uma task padrao para unificar tudo</h3><p>Edite o arquivo <code>gulpfile.js</code>, inserindo ao final dele:</p><figure class="highlight javascript"><figcaption><span>[gulpfile.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'jade'</span>, <span class="string">'stylus'</span>, <span class="string">'server'</span>, <span class="string">'watch'</span>]);</span><br></pre></td></tr></table></figure><p>Se você cria uma task com o nome ‘default’, como acima, ela é chamada quando rodar o comando <code>gulp</code> pelo terminal.</p><p>Nesta, definimos que ela irá rodar as tasks jade, stylus, server e watch.</p><h3 id="3-Inserindo-reload-ao-final-das-tasks-jade-e-stylus"><a href="#3-Inserindo-reload-ao-final-das-tasks-jade-e-stylus" class="headerlink" title="3. Inserindo reload() ao final das tasks jade e stylus"></a>3. Inserindo <code>reload()</code> ao final das tasks <code>jade</code> e <code>stylus</code></h3><p>Editando o arquivo <code>gulpfile.js</code>, deixaremos as 2 tasks assim:</p><p>Task <strong>jade</strong><br><figure class="highlight javascript"><figcaption><span>[gulpfile.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line">gulp.task(<span class="string">'jade'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'src/jade/**/**.jade'</span>)</span><br><span class="line">    .pipe(jade())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'build'</span>))</span><br><span class="line">    .pipe(connect.reload()); <span class="comment">//linha adicionada</span></span><br><span class="line">  &#125;);</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure></p><p>Task <strong>stylus</strong><br><figure class="highlight javascript"><figcaption><span>[gulpfile.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'stylus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'src/stylus/**/**.styl'</span>)</span><br><span class="line">    .pipe(stylus())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'build/css'</span>))</span><br><span class="line">    .pipe(connect.reload()); <span class="comment">//linha adicionada</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>Ok, vamos ver que legal!<br>Rode, no terminal</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p>Deve abrir seu navegador, com a página sem estilos.</p><p>Deixe rodando a task, e vamos editar o arquivo <code>index.jade</code>.</p><p><strong>Deixe a janela do navegador com o conteúdo visível atraz do seu editor</strong></p><p>Vamos inserir uma linha logo abaixo de <code>title= &quot;Título da página&quot;</code></p><figure class="highlight plain"><figcaption><span>[index.jade][insira linha abaixo da title....]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title= &quot;Título da página&quot;</span><br><span class="line">link(href=&apos;css/main.css&apos;, rel=&apos;stylesheet&apos;)</span><br></pre></td></tr></table></figure><p>Salve o arquivo e…. tcharãaaa, veja como atualizou sozinha sua página. Experimente editar o <code>main.styl</code>, mudando as cores das variáveis por exemplo (de blue para white), e salve.</p><blockquote><p>Seja bem vindo ao GulpJs. Automate all the things o/</p></blockquote><p>(o resultado/exemplo está <a href="https://github.com/romuloctba/blog-inciando-gulp-preprocessadores" target="_blank" rel="noopener">neste repositório do github</a>)</p><p>Ah! Vale lembrar que, pra facilitar, declaramos os <code>require</code> logo antes de cada task.</p><p>O ideal mesmo é que sejam declarados todos ao começo do arquivo.</p><p>Ficaria mais ou menos assim, ó:</p><figure class="highlight javascript"><figcaption><span>[exemplo de gulpfile.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line">  , jade = <span class="built_in">require</span>(<span class="string">'gulp-jade'</span>)</span><br><span class="line">  , stylus = <span class="built_in">require</span>(<span class="string">'gulp-stylus'</span>)</span><br><span class="line">  , connect = <span class="built_in">require</span>(<span class="string">'gulp-connect-multi'</span>)();</span><br></pre></td></tr></table></figure><h2 id="Desafio-Licao-de-casa"><a href="#Desafio-Licao-de-casa" class="headerlink" title="Desafio/Lição de casa"></a>Desafio/Lição de casa</h2><p>Este desafio é só pra quem teve a <strong>primeira</strong> experiência com o GulpJs neste post, hein. Se você já manja, não adianta ;P</p><p>Note que nosso gulpfile faz:</p><ul><li>Processa e gera html de arquivos jade</li><li>processa e gera css de arquivos styl</li></ul><p>massss… falta uma task para lidar com os arquivos não processados (imagens, por exemplo).</p><p><em>O desafio/tarefa de casa</em> é criar uma task E um watch para os arquivos não processados. Essa task deve <strong>apenas</strong> copiar eles para a pasta <code>build</code> e chamar o <code>connect.reload()</code> ao final.</p><p><code>dica: insira arquivos dentro de alguma pasta, como src/assets</code></p><h1 id="No-proximo-post-de-GulpJS…"><a href="#No-proximo-post-de-GulpJS…" class="headerlink" title="No próximo post de GulpJS…."></a>No próximo post de GulpJS….</h1><p>No próximo post de GulpJS veremos tarefas úteis para JS (que não abordamos aqui) e outras tarefas de otimização para <code>distribuir</code> seu projeto. </p><p>Gostou? Entendeu? Curtiu? Usou? Deixe seu comentário!!</p><p>Dúvidas?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2015/02/13/comecando-agora-com-gulp-e-preprocessadores-parte-1-suas-primeiras-tasks/iniciando-com-gulp-e-preprocessadores-como.jp
      
    
    </summary>
    
    
      <category term="Gulp" scheme="http://rcdevlabs.github.io/tags/gulp/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
      <category term="Workflow" scheme="http://rcdevlabs.github.io/tags/workflow/"/>
    
      <category term="Stylus" scheme="http://rcdevlabs.github.io/tags/stylus/"/>
    
      <category term="Pré-Processadores" scheme="http://rcdevlabs.github.io/tags/pre-processadores/"/>
    
  </entry>
  
  <entry>
    <title>Como criar uma API RESTfull em NodeJS e autenticar usando JSON Web Token JWT?</title>
    <link href="http://rcdevlabs.github.io/2015/02/12/como-criar-uma-api-restfull-em-nodejs-e-autenticar-usando-json-web-token-jwt/"/>
    <id>http://rcdevlabs.github.io/2015/02/12/como-criar-uma-api-restfull-em-nodejs-e-autenticar-usando-json-web-token-jwt/</id>
    <published>2015-02-12T06:50:24.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/api-rest-autenticacao-json-web-token.jpg" alt="api-rest-autenticacao-json-web-token"></p><p>Eu sempre tive uma treta séria com autenticação. Quando precisei autenticar em uma API REST, então, aí ferrou! Mas existe uma luz ao fim do túnel, e ela se chama JSON Web Token, ou JWT.</p><p>Não vou entrar em detalhes da minha briga com métodos de autenticar - no momento, mas acredite quando digo que testei e usei vários. Eis o por que do JWT.</p><h3 id="Analisando-a-Demanda"><a href="#Analisando-a-Demanda" class="headerlink" title="Analisando a Demanda:"></a>Analisando a Demanda:</h3><ul><li><p><strong>Necessidade</strong>: Gerenciar rotas protegidas por login e níveis de usuário de uma <strong>API REST</strong> em NodeJS.</p></li><li><p><strong>Requisitos</strong>: Não depender de sessão (rest é sessionless, lembra?), permitir identificar o usuário (e seu nível), não utilizar Providers de terceiros, integrar com qualquer plataforma frontend.</p></li></ul><hr><h3 id="JSON-Web-Token-o-que-e-JWT"><a href="#JSON-Web-Token-o-que-e-JWT" class="headerlink" title="JSON Web Token: o que é JWT?"></a>JSON Web Token: o que é JWT?</h3><p>JWT pronuncia-se ‘JõT’.</p><p>É um jeito simples de encaminhar informações que podem ser confiadas, pois são assinadas e confirmadas. </p><p>Isso é um JWT:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzODY4OTkxMzEsImlzcyI6ImppcmE6MTU0ODk1OTUiLCJxc2giOiI4MDYzZmY0Y2ExZTQxZGY3YmM5MGM4YWI2ZDBmNjIwN2Q0OTFjZjZkYWQ3YzY2ZWE3OTdiNDYxNGI3MTkyMmU5IiwiaWF0IjoxMzg2ODk4OTUxfQ.uKqU9dTB6gKwG6jQCuXYAiMNdfNRw98Hw_IWuA5MaMo</span><br></pre></td></tr></table></figure><p>São 3 partes, separadas por um <code>.</code>, encodadas por base64 individualmente:</p><p><code>&lt;base64-encoded header&gt;.&lt;base64-encoded claims&gt;.&lt;base64-encoded assinatura&gt;</code></p><p>Mas <strong>atenção</strong>: JWT não encripta o payload, apenas o assina. O que isso quer dizer é que <strong>você não deve enviar informações confidenciais por JWT</strong>. Apenas informações que devem ser verificadas/confiadas.</p><p>Por exemplo: Não é uma boa idéia passar uma senha por JWT, mas enviar o ID do usuário APÓS o login, vai permitir que ele faça requisições autenticadas :D, saca só:</p><h3 id="Fluxo-de-uso-de-JWT-para-um-client"><a href="#Fluxo-de-uso-de-JWT-para-um-client" class="headerlink" title="Fluxo de uso de JWT para um client"></a>Fluxo de uso de JWT para um <strong>client</strong></h3><ol><li><p>Quero acessar uma rota <em>protegida</em>, tipo <code>/users</code></p></li><li><p>Faço o login, enviando (de forma segura, por https) usuário e senha.</p></li><li><p>Login com sucesso, recebo o ‘TOKEN’. Guardo pra usar depois ;)</p></li><li><p>Faço a requisição que eu queria na <code>/users</code> porém, com o <em>http Header</em> <code>x-access-token : meutokenaqui</code></p></li><li><p>Com o token enviado, o servidor me identifica e autoriza (ou não) meu acesso, retornando a resposta à minha requisição.</p></li></ol><h3 id="Fluxo-de-uso-de-JWT-para-o-SERVER"><a href="#Fluxo-de-uso-de-JWT-para-o-SERVER" class="headerlink" title="Fluxo de uso de JWT para o SERVER"></a>Fluxo de uso de JWT para o <strong>SERVER</strong></h3><ol><li><p>Se tentarem acessar uma rota <strong>protegida</strong> sem token, não autoriza.</p></li><li><p>Se tentar acessar com um token, verifica se é válido. Se for, consegue identificar o usuário pelo TOKEN e libera o acesso.</p></li><li><p>Quando um usuário faz login, geramos um token, para ele poder fazer requisições autenticadas.</p></li></ol><p>Nossa, Rômulo, que legal, cara! Agora me diz, <strong>como eu faço isso?</strong></p><hr><h3 id="Como-fazer-a-autenticacao-de-uma-API-REST-com-Json-Web-Token-em-NodeJs"><a href="#Como-fazer-a-autenticacao-de-uma-API-REST-com-Json-Web-Token-em-NodeJs" class="headerlink" title="Como fazer a autenticação de uma API REST com Json Web Token em NodeJs?"></a>Como fazer a autenticação de uma API REST com Json Web Token em NodeJs?</h3><p>Bom, pra explicar legal mesmo a gente vai começar junto, e de mãos dadas, iremos até o fim :P (aperta o cinto, porque vai ser longa a jornada)</p><p>O resultado de nossa empreitada esta <a href="https://github.com/romuloctba/blog-rest-api-nodejs-json-web-token" target="_blank" rel="noopener">neste repositório do github</a></p><p>À partir de agora, serei seu guia pelo lindo mundo das APIs com NodeJS, e faremos:</p><ol><li><p>Um servidorzinho</p></li><li><p>Algumas rotas: POST E GET de usuarios, POST de login</p></li><li><p>Conexão com o MongoDB do Mongolabs</p></li><li><p>Criar usuários</p></li><li><p>Encriptar senhas</p></li><li><p><strong>Implementar JWT</strong> durante o login</p></li><li><p>Passar middleware que tornará a rota passível de autenticação. E vai conferir o JWT</p></li></ol><p>Vamos lá?</p><h2 id="0-Requisitos"><a href="#0-Requisitos" class="headerlink" title="0) Requisitos:"></a>0) Requisitos:</h2><p><a href="http://nodejs.org" target="_blank" rel="noopener">NodeJs</a><br><a href="http://getpostman.com" target="_blank" rel="noopener">POSTMAN</a>, para testar a API e métodos GET e POST<br><a href="https://mongolab.com/" target="_blank" rel="noopener">MongoLabs</a> um db gratuito resolve</p><h2 id="1-Servidor-em-NodeJs"><a href="#1-Servidor-em-NodeJs" class="headerlink" title="1) Servidor em NodeJs."></a>1) Servidor em NodeJs.</h2><p>Já com o Node instalado, vamos criar uma nova pasta.<br>Nela, crie um arquivo chamado <code>package.json</code>, insira:</p><figure class="highlight json"><figcaption><span>[package.json]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"teste-api-jwt"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"server.js"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"^4.11.2"</span>,</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"^1.11.0"</span>,</span><br><span class="line">    <span class="attr">"mongoose"</span>: <span class="string">"^3.8.23"</span>,</span><br><span class="line">    <span class="attr">"bcrypt-nodejs"</span>: <span class="string">"0.0.3"</span>,</span><br><span class="line">    <span class="attr">"jwt-simple"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="attr">"moment"</span>: <span class="string">"^2.9.0"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Já pode acessar a pasta pelo terminal, e instalar as dependências, com o comando:</p><figure class="highlight bash"><figcaption><span>[com o terminal, na mesma pasta do package.json, execute o comando:]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>Enquanto você espera instalar, veja o que cada item faz:<br>O <code>express</code> é o framework para App. Vai gerenciar nossas rotas e middlewares.<br>O <code>body-parser</code>, antigamente incluso no express, vai parsear nossas requisições, permitindo que usemos urls complexas e trabalhar com formulários.<br>O <code>mongoose</code> é o ORM que vai interagir com o MongoDb pra gente.<br>O <code>bcrypt-nodejs</code> vai encriptar nossa senha. <em>NUNCA</em> salve a senha sem encriptar.<br>O <code>jwt-simple</code> vai gerar e conferir nossos JSON Web Token (ou você achou que ia fazer todo aquele processo acima na unha? hehe)<br>O <code>moment</code> vai nos ajudar a trabalhar com data de expiração do JWT.</p><h3 id="Agora-criemos-o-server-js"><a href="#Agora-criemos-o-server-js" class="headerlink" title="Agora, criemos o server.js"></a>Agora, criemos o server.js</h3><figure class="highlight javascript"><figcaption><span>[server.js][crie na mesma pasta do package.json]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line">  , app = express()</span><br><span class="line">  , bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line">  , mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line">  , jwt = <span class="built_in">require</span>(<span class="string">'jwt-simple'</span>);</span><br><span class="line">  <span class="keyword">var</span> db = <span class="string">''</span>;<span class="comment">//coloque a url do db aqui</span></span><br><span class="line">  app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">  app.use(bodyParser.json());</span><br><span class="line">  <span class="keyword">var</span> port = process.env.PORT || <span class="number">8080</span>;</span><br><span class="line">  <span class="keyword">var</span> router = express.Router();</span><br><span class="line">  app.use(<span class="string">'/api'</span>, router);</span><br><span class="line">  <span class="comment">/*Aqui criaremos as rotas*/</span></span><br><span class="line">  mongoose.connect(db);</span><br><span class="line">  app.listen(port);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'conectado a porta '</span> + port);</span><br></pre></td></tr></table></figure><p>Note que a <code>var db</code> é a url do nosso banco de dados. Vc pode criar uma conta grátis no <a href="https://mongolab.com/signup/" target="_blank" rel="noopener">MongoLab</a>, acessá-la, clicar em <strong>create database</strong> nomeie <code>teste-jwt</code> deixando com a opção <strong>single node</strong> (gratis).<br>Após criada, clique nela, aí em <strong>create user</strong> e crie um usuário para o nosso DB.<br>A url deve ser algo como <code>mongodb://usuario:senha@ds053668.mongolab.com:53668/teste-jwt</code></p><p>Após colocar a url na <code>var db</code>, salve o arquivo, acesse a pasta com o terminal e rode:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node server</span><br><span class="line">conectado a porta 8080</span><br></pre></td></tr></table></figure></p><p>Sinal que deu boa ^_^</p><h3 id="2-Criando-algumas-rotas"><a href="#2-Criando-algumas-rotas" class="headerlink" title="2) Criando algumas rotas"></a>2) Criando algumas rotas</h3><p>Logo abaixo de <code>/*Aqui criaremos as rotas*/</code>, insira:</p><figure class="highlight javascript"><figcaption><span>[server.js][insira abaixo do comentário]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="comment">/*Aqui criaremos as rotas*/</span></span><br><span class="line"><span class="keyword">var</span> rotas = <span class="built_in">require</span>(<span class="string">'./rotas'</span>)</span><br><span class="line">  router.route(<span class="string">'/usuarios'</span>)</span><br><span class="line">    .get(rotas.getUsuarios)</span><br><span class="line">    .post(rotas.postUsuarios);</span><br><span class="line">  router.route(<span class="string">'/login'</span>)</span><br><span class="line">    .post(rotas.login);</span><br><span class="line"></span><br><span class="line">  mongoose.connect(db);</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Crie um arquivo chamado <code>rotas.js</code> na mesma pasta.</p><figure class="highlight javascript"><figcaption><span>[rotas.js][crie o arquivo na mesma pasta]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getUsuarios: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.json(&#123;<span class="attr">message</span>: <span class="string">"rota para GET do /usuarios"</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  postUsuarios: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.json(&#123;<span class="attr">message</span>: <span class="string">"rota para POST do /usuarios"</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  login: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.json(&#123;message; <span class="string">'rota de login'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Salvando tudo, você pode executar <code>node server</code> novamente, fazer um get para <a href="http://localhost:8080/api/usuarios" target="_blank" rel="noopener">http://localhost:8080/api/usuarios</a> e depois um post para conferir se funcionou<br>(Pra isso, use algo como o <a href="http://www.getpostman.com/" target="_blank" rel="noopener">postman (clique para baixar)</a>) ou faz no curl se for macho(a).</p><h2 id="3-Criando-o-Model-usuario"><a href="#3-Criando-o-Model-usuario" class="headerlink" title="3) Criando o Model usuário"></a>3) Criando o Model usuário</h2><p>Crie o arquivo <code>ModelUsuario.js</code>, na mesma pasta.</p><figure class="highlight javascript"><figcaption><span>[ModelUsuario.js] [Crie o arquivo]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt-nodejs'</span>);</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> UsuarioSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    unique: <span class="literal">true</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">UsuarioSchema.pre(<span class="string">'save'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (!user.isModified(<span class="string">'password'</span>)) <span class="keyword">return</span> next();</span><br><span class="line">  bcrypt.genSalt(<span class="number">5</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, salt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    bcrypt.hash(user.password, salt, <span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, hash</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">      user.password = hash;</span><br><span class="line">      next();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">UsuarioSchema.methods.verificaSenha = <span class="function"><span class="keyword">function</span>(<span class="params">password, next</span>) </span>&#123;</span><br><span class="line">  bcrypt.compare(password, <span class="keyword">this</span>.password, <span class="function"><span class="keyword">function</span>(<span class="params">err, isMatch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    next(isMatch);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Usuario'</span>, UsuarioSchema);</span><br></pre></td></tr></table></figure><blockquote><p>…</p></blockquote><blockquote><p>…Vish.</p></blockquote><p>Acima temos <strong>3 coisas acontecendo</strong>. Nesse arquivo, usamos o mongoose e o bcrypt.</p><ol><li><p><strong>var UsuarioSchema</strong><br>Primeiro, <code>var UsuarioSchema</code> definimos a estrutura, com os campo <code>username</code> e <code>password</code>.</p></li><li><p><strong>UsuarioSchema.pre(‘save’….</strong><br>Depois, setamos uma função <code>.pre(&#39;save&#39;)</code> nessa var que criamos: <code>UsuarioSchema.pre(&#39;save&#39;, function(......</code>.<br>Toda vez que formos salvar, essa função <code>.pre()</code> verifica:</p><ul><li><strong>SE</strong>(if) o password <strong>não</strong> foi alterado. Se ele <strong>não</strong> foi alterado, retorna <code>next()</code>, ou seja: continua o <em>fluxo do save()</em>.<br>Se acontecer outra coisa com o password (criado, alterado..) ele gera o <em>salt</em> com <code>bcrypt.genSalt()</code>. Se der boa, ele usa o <code>bcrypt.hash()</code> e encripta nosso password com o <em>salt</em> q ele gerou. Se der erro, retorna <code>next(err)</code>. Se não, chama o <code>next()</code></li></ul></li><li><p><strong>UsuarioSchema.methods.verificaSenha = function(senha, next){}</strong><br>Aí estamos criando um metodo chamado verificaSenha(), que recebe a senha, usa o <code>bcrypt.compare()</code>.  Retorna next(isMatch) se der certo.</p></li></ol><p>E por último module.exports exporta o model com o nome ‘Usuario’.</p><p>Pra facilitar estamos colocando tudo na mesma pasta. O ideal, seria ter uma pasta <code>/model</code>, mas não vamos fazer isso nesse artigo.</p><p>Agora já temos nosso model, precisamos criar a funçaõ que cria um novo usuário… aff tá cansando né?</p><h2 id="O-controller-criaUsuario"><a href="#O-controller-criaUsuario" class="headerlink" title="O controller criaUsuario()"></a>O controller criaUsuario()</h2><p>Esse cara vai criar nossos usuários. Basicamente ele pega os campos <code>username</code> e <code>password</code>, que receberemos na rota, e insere no banco de dados.</p><p>Crie o arquivo <strong>controllerCriaUsuario.js</strong></p><figure class="highlight javascript"><figcaption><span>[controllerCriaUsuario.js][Crie, na mesma pasta]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Model = <span class="built_in">require</span>(<span class="string">'./ModelUsuario'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> data = <span class="keyword">new</span> Model(&#123;</span><br><span class="line">        username: req.body.username,</span><br><span class="line">        password: req.body.password</span><br><span class="line">        &#125;);</span><br><span class="line">        data.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err)</span><br><span class="line">            res.send(err);</span><br><span class="line">          res.json(&#123; <span class="attr">message</span>: <span class="string">'Novo Usuário'</span>, <span class="attr">data</span>: data &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>Maneiro. Aí estamos apenas gerando um <code>new Model</code> e depois dando um <code>.save()</code> nele. Se der tudo certo, recebemos as informações do novo usuario.</p><p>Vamos <em>rapidinho</em> alí no <code>rotas.js</code> pra usar esse controller na postUsuarios!</p><figure class="highlight javascript"><figcaption><span>[rotas.js][altere apenas a postUsuarios]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(...),</span><br><span class="line">postUsuarios: <span class="built_in">require</span>(<span class="string">'./controllerCriaUsuario'</span>),</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><blockquote><p><strong>Agora podemos criar nosso usuário com senha encriptada</strong></p></blockquote><p>rode <code>node server</code>.</p><p>Usando o postman, ou outro, faça um <strong>POST</strong> para <a href="http://localhost:8080/api/usuarios" target="_blank" rel="noopener">http://localhost:8080/api/usuarios</a> envie username e password devidamente preenchidos:<br><img src="/criando-usuario-nodejs-mongodb-express-api-rest.JPG" alt="criando-usuario-nodejs-mongodb-express-api-rest"></p><p>Aeeee conseguimos! Muito legal né? Um servidor express com rotas, criando usuário e salvando no DB com a senha encriptada!</p><blockquote><p><strong>Precisamos agora, fazer o login. E, ao fazer o login, criar o TOKEN</strong></p></blockquote><h2 id="4-O-Controller-de-Login-com-gerador-de-Token"><a href="#4-O-Controller-de-Login-com-gerador-de-Token" class="headerlink" title="4) O Controller de Login com gerador de Token"></a>4) O Controller de Login com gerador de Token</h2><p>Crie o arquivo <strong>controllerLogin.js</strong>:</p><figure class="highlight javascript"><figcaption><span>[controllerLogin.js][Crie o arquivo]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Usuario = <span class="built_in">require</span>(<span class="string">'./ModelUsuario'</span>);</span><br><span class="line">  , jwt = <span class="built_in">require</span>(<span class="string">'jwt-simple'</span>)</span><br><span class="line">  , moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line">  , segredo = <span class="string">'seusegredodetoken'</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> username = req.body.username || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> password = req.body.password || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (username == <span class="string">''</span> || password == <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.send(<span class="number">401</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//1</span></span><br><span class="line">  Usuario.findOne(&#123;<span class="attr">username</span>: username&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="number">401</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    user.verificaSenha(password, <span class="function"><span class="keyword">function</span>(<span class="params">isMatch</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!isMatch) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(<span class="number">401</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">var</span> expires = moment().add(<span class="number">7</span>,<span class="string">'days'</span>).valueOf();</span><br><span class="line">    <span class="keyword">var</span> token = jwt.encode(&#123;</span><br><span class="line">      iss: user.id,</span><br><span class="line">      exp: expires</span><br><span class="line">    &#125;, segredo);</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">     <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">      token : token,</span><br><span class="line">      expires: expires,</span><br><span class="line">      user: user.toJSON()</span><br><span class="line">      &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Vamos pedir que a nossa rota <code>(/login)</code> rode-o:</p><figure class="highlight javascript"><figcaption><span>[rotas.js][altere apenas a login]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(...),</span><br><span class="line">login: <span class="built_in">require</span>(<span class="string">'./controllerLogin'</span>),</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Reinicie o servidor com<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node server</span><br></pre></td></tr></table></figure></p><p>Agora mude a url para <a href="http://localhost:8080/api/login" target="_blank" rel="noopener">http://localhost:8080/api/login</a> e post seu username e password.</p><p>Viu? Que massa? Autenticamos e recebemos o token! Dividi o código acima em 3 partes principais.</p><p>Antes, da //1, setamos as dependencias que usaremos neste arquivo com os require. Depois usamos um <strong>SE</strong> o <code>req.body.username</code> ou o <code>req.body.password</code>forem vazios, <code>res.send(401)</code>. Se tiverem preenchidos, prosseguimos para:</p><ol><li><p><strong>Usuario.findOne()</strong><br>Buscamos por usuários com os dados informados. Se der erro, <code>res.end(401)</code>. Se não der erro, continua, retornando o resultado como <code>user</code>.</p></li><li><p><strong>user.verificaSenha</strong> lembra do método que criamos no <code>ModelUsuario</code>? pois é. Se ele não retornar o parâmetro isMatch, <code>res.end(401)</code> neles!</p></li><li><p><strong>var expires</strong>: usamos o <code>moment</code> pra dizer ‘daqui a 7 dias’ e <strong>var token</strong>, onde criamos o token com <code>jwt.encode()</code>. Note a variável <code>segredo</code> definida no começo do arquivo. Vamos precisar dela mais pra frente :P</p></li></ol><h2 id="5-ULTIMA-PARTE-O-saudoso-Middleware-para-conferir-o-token-e-fazer-a-seguranca-das-rotas"><a href="#5-ULTIMA-PARTE-O-saudoso-Middleware-para-conferir-o-token-e-fazer-a-seguranca-das-rotas" class="headerlink" title="5) ULTIMA PARTE: O saudoso Middleware para conferir o token e fazer a segurança das rotas"></a>5) ULTIMA PARTE: O saudoso Middleware para conferir o token e fazer a segurança das rotas</h2><p>Vamos criar um <strong>middleware de nível route</strong> para interceptar as requisições nas rotas protegidas e conferir o TOKEN. Basicamente, ele vai testar o token, se der certo, chama <code>next()</code>, senão: <code>res.end(401)</code> neles!</p><p>Crie o arquivo <strong>validarJWT.js</strong></p><figure class="highlight javascript"><figcaption><span>[validarJWT.js][Crie o arquivo]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="built_in">require</span>(<span class="string">'./ModelUsuario'</span>)</span><br><span class="line">  , jwt = <span class="built_in">require</span>(<span class="string">'jwt-simple'</span>)</span><br><span class="line">  , segredo = <span class="string">'seusegredodetoken'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> token = (req.body &amp;&amp; req.body.access_token) || (req.query &amp;&amp; req.query.access_token) || req.headers[<span class="string">'x-access-token'</span>];</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> decoded = jwt.decode(token, segredo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'decodando '</span> + decoded);</span><br><span class="line">   <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span> (decoded.exp &lt;= <span class="built_in">Date</span>.now()) &#123;</span><br><span class="line">      res.json(<span class="number">400</span>, &#123;<span class="attr">error</span>: <span class="string">'Acesso Expirado, faça login novamente'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    model.findOne(&#123; <span class="attr">_id</span>: decoded.iss &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)</span><br><span class="line">        res.status(<span class="number">500</span>).json(&#123;<span class="attr">message</span>: <span class="string">"erro ao procurar usuario do token."</span>&#125;)</span><br><span class="line">      req.user = user;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'achei usuario '</span> + req.user)</span><br><span class="line">      <span class="keyword">return</span> next();</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="comment">//4</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">401</span>).json(&#123;<span class="attr">message</span>: <span class="string">'Erro: Seu token é inválido'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  res.json(<span class="number">401</span>, &#123;<span class="attr">message</span>: <span class="string">'Token não encontrado ou informado'</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>No //1 <strong>SE</strong> existir um token, rodamos a funçaõ <code>jwt.decode()</code>.</p><p>No //2 , usamos o resultado do <code>jwt.decode()</code> para verificar se o token expirou.</p><p>no //3 pesquisamos no MongoDB pelo _id que veio no JWT</p><p>no //4 ficamos de olho por erros, caso aconteça, 401 neles.</p><p>Agora iremos <strong>inserir o validarJWT nas rotas à proteger</strong> isso será feito em nosso <strong><code>server.js</code></strong>. Iremos proteger apenas a rota <code>.get()</code> do <code>/usuarios</code>:</p><figure class="highlight javascript"><figcaption><span>[server.js][Insira o middleware validarJWT.js nas rotas protegidas]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"> router.route(<span class="string">'/usuarios'</span>)</span><br><span class="line">    .get(<span class="built_in">require</span>(<span class="string">'./validarJWT'</span>), rotas.getUsuarios) <span class="comment">//alteramos esta</span></span><br><span class="line">    .post(rotas.postUsuarios);</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Novamente não é boa prática usar o <code>require</code> como parâmetro de função. Pelo bem do fluxo do tutorial e arquivo final, estou fazendo, mas o ideal seria criar <code>var validarJWT = require(&#39;./validarJWT&#39;)</code>….</p><p>Anyway, reinicie o server, faça um <code>GET</code> para <a href="http://localhost:8080/api/usuarios" target="_blank" rel="noopener">http://localhost:8080/api/usuarios</a> . Viu: Ele disse “TOKEN NAO ENCONTRADO”</p><h3 id="Tudo-pronto-Vamos-usar-nosso-token-D"><a href="#Tudo-pronto-Vamos-usar-nosso-token-D" class="headerlink" title="Tudo pronto!!! Vamos usar nosso token :D"></a>Tudo pronto!!! Vamos usar nosso token :D</h3><p>Dessa vez não precisa nem reiniciar o server. Faça um <code>POST</code> para <a href="http://localhost:8080/api/login" target="_blank" rel="noopener">http://localhost:8080/api/login</a> com seu <code>username</code> e <code>password</code>.</p><figure class="highlight json"><figcaption><span>[resposta do login]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI1NGRjM2RkODU5ZTQwNmZjMWE3YWJiOGIiLCJleHAiOjE0MjQzMjgxMzI0NzN9._RcLvHkjttELVpeNtYuCdn3ZkojwSKLA42V6ChZLi4s"</span>,</span><br><span class="line">    <span class="attr">"expires"</span>: <span class="number">1424328132473</span>,</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"54dc3dd859e406fc1a7abb8b"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"rcdev"</span>,</span><br><span class="line">        <span class="attr">"password"</span>: <span class="string">"$2a$05$mXgWbp14wuvDmj3pX0NFBOgIeSyIACAmEOmYgr/41gUManjIVYJ9."</span>,</span><br><span class="line">        <span class="attr">"__v"</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vamos copiar o <strong>token</strong> (sim, ele inteiro) e adicionar como header <code>x-access-token</code>em nossa próxima requisição.</p><p>Faça um <code>GET</code> para <code>/api/usuarios</code> novamente, dessa vez com o <strong>token</strong> recebido como header chamada <code>x-access-token</code>:</p><p><img src="/token-sucesso.JPG" alt="token-sucesso"></p><blockquote><p>Parabéns e obrigado à você que acompanhou até aqui :P</p></blockquote><p>Espero poder ter ajudado. Se tiver dicas, dúvidas ou observações, por favor <em>comente</em> :)</p><p>O resultado de nossa empreitada esta <a href="https://github.com/romuloctba/blog-rest-api-nodejs-json-web-token" target="_blank" rel="noopener">neste repositório do github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/api-rest-autenticacao-json-web-token.jpg&quot; alt=&quot;api-rest-autenticacao-json-web-token&quot;&gt;&lt;/p&gt;
&lt;p&gt;Eu sempre tive uma treta séria co
      
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://rcdevlabs.github.io/tags/nodejs/"/>
    
      <category term="1postperday" scheme="http://rcdevlabs.github.io/tags/1postperday/"/>
    
      <category term="JWT" scheme="http://rcdevlabs.github.io/tags/jwt/"/>
    
      <category term="Autenticação" scheme="http://rcdevlabs.github.io/tags/autenticacao/"/>
    
      <category term="REST" scheme="http://rcdevlabs.github.io/tags/rest/"/>
    
  </entry>
  
  <entry>
    <title>Criando um server de push notifications para notificações em tempo real com socket.io e nodejs</title>
    <link href="http://rcdevlabs.github.io/2015/02/11/criando-um-server-de-push-notifications-para-notificacoes-em-tempo-real-com-socket-io-e-nodejs/"/>
    <id>http://rcdevlabs.github.io/2015/02/11/criando-um-server-de-push-notifications-para-notificacoes-em-tempo-real-com-socket-io-e-nodejs/</id>
    <published>2015-02-11T08:28:36.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/push-notifications-com-socket-io-node-js-express.jpg" alt="push-notifications-com-socket-io-node-js-express"></p><p>Quando algo mudar no servidor, como notificar o client/frontend? Embarque comigo nessa aventura pelo universo do Socket.io, onde aprenderemos como criar um server simples para push notifications de nossos APPs e clients.</p><p>O código-fonte deste teste está <a href="https://github.com/romuloctba/blog-post-server-com-push-socket-io" target="_blank" rel="noopener">neste repositório do github</a></p><h3 id="Analisando-a-demanda"><a href="#Analisando-a-demanda" class="headerlink" title="Analisando a demanda:"></a>Analisando a demanda:</h3><p><strong>Necessidade</strong>: Notificar o client em tempo real quando algo específico acontecer.</p><p><strong>Requisitos</strong>: Não depender de timeout(), escalável (não pode derrubar o server se houverem muitos usuários), Funcionar em conjunto, porém de forma independente com a API REST do serviço.</p><p>Ok, primeiro algumas observações: Uma técnica muito utilizada é o ‘Long Poling’, que consiste em solicitar uma página ao servidor, que só é enviada quando houver uma notificação. Ao receber a página - que só foi enviada pq houve notificação - imediatamente o client começa uma nova requisição. <strong>Vê o problema aí?</strong> A conexão fica aberta e ativa, e reinicia-se quando chega uma novidade. Aff. (é mano, não reclama tanto assim não, pq muita coisa boa já usou isso. Chamava-se <a href="http://en.wikipedia.org/wiki/Comet_%28programming%29" target="_blank" rel="noopener">commet (wikipedia, em inglês)</a>)</p><h3 id="A-Solucao-escolhida"><a href="#A-Solucao-escolhida" class="headerlink" title="A Solução escolhida"></a>A Solução escolhida</h3><p>Apesar dos <em>HTML5 Server Send Events (SSE)</em> parecerem super fofos e promissores, vamos de Websockets, que permitem um front-end independente (sem precisar estar no mesmo servidor ou domínio).</p><p>Pra facilitar ainda mais, já que estamos usando NodeJs, vamos de <a href="http://socket.io/docs/" target="_blank" rel="noopener">Socket.io</a>.</p><h3 id="Maos-a-obra-Setup-basico"><a href="#Maos-a-obra-Setup-basico" class="headerlink" title="Mãos a obra! - Setup básico"></a>Mãos a obra! - Setup básico</h3><p>Primeiro, precisamos de uma estrutura básica em Node.JS. Só um server e algumas rotas. Vou usar o Express pra facilitar, então pode criar uma pasta e jogar os seguintes arquivos dentro:<br>(se não tiver o nodejs, <a href="http://nodejs.org" target="_blank" rel="noopener">baixe aqui</a>)</p><figure class="highlight json"><figcaption><span>[package.json]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"server-com-push"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"server.js"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="attr">"socket.io"</span>: <span class="string">"^1.3.2"</span>,</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"^1.11.0"</span>,</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"^4.11.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Já pode ir acessando a pasta que vc criou via terminal e rodar lá dentro:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><figcaption><span>[server.js][crie o arquivo na mesma pasta do package.json]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line">  , app = express()</span><br><span class="line">  , server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app).listen(<span class="number">4555</span>)</span><br><span class="line">  , io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>).listen(server)</span><br><span class="line">  , bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line">  app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">  app.use(bodyParser.json());</span><br><span class="line">  <span class="keyword">var</span> port = process.env.PORT || <span class="number">8080</span>;</span><br><span class="line">  <span class="keyword">var</span> router = express.Router();</span><br><span class="line">  <span class="comment">/* Socket irá aqui depois */</span></span><br><span class="line">  app.use(<span class="string">'/api'</span>, router);</span><br><span class="line">  router.route(<span class="string">'/notificar'</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//aqui vamos receber a mensagem</span></span><br><span class="line">    res.json(&#123;<span class="attr">message</span>: <span class="string">"testando essa rota"</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  app.listen(port);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'conectado a porta '</span> + port);</span><br></pre></td></tr></table></figure><p>Note a variável <code>server</code>, onde carregamos o http, criamos o server e setamos a porta para 4555!</p><p><strong>importante lembrar que</strong> a porta (4555) é apenas para o server http do socket.io. Ela está referenciada na variável server,que entra como parâmetro do <code>listen()</code> do socket.io</p><p>A porta da nossa API (que usa express) é definida mais abaixo na <code>var port</code> e usada quando chamados o <code>app.listen(port)</code>.</p><p>Portanto, temos 2 servidores independentes: um na porta 4555 e outro na porta 8080, sendo o primeiro apenas para o socket.io</p><p>Agora rode o server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node server</span><br></pre></td></tr></table></figure><p>E acesse <a href="http://localhost:8080/api/notificar" target="_blank" rel="noopener">http://localhost:8080/api/notificar</a> veja se recebeu o retorno:</p><figure class="highlight json"><figcaption><span>[retorno da rota "/notificar"]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"testando essa rota"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Criando-o-middleware-para-emitir-o-evento"><a href="#Criando-o-middleware-para-emitir-o-evento" class="headerlink" title="Criando o middleware para emitir o evento"></a>Criando o middleware para emitir o evento</h3><p>Pra emitir o evento, criaremos um Middleware. Se você não sabe o que é um, pode querer ler <a href="http://rcdevlabs.github.io/2015/02/10/o-que-e-um-middleware-e-pra-que-serve-aka-como-interceptar-requisicoes/">O que é um middleware no ExpressJs e pra que serve? (AKA: Como interceptar requisições)</a>.</p><p>Logo abaixo do comentário <strong><code>/* Socket irá aqui depois */</code></strong>, vamos inserir nosso middleware:</p><figure class="highlight javascript"><figcaption><span>[server.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="comment">/* Socket irá aqui depois */</span></span><br><span class="line"><span class="keyword">var</span> emitir = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> notificar = req.query.notificacao || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(notificar != <span class="string">''</span>) &#123;</span><br><span class="line">    io.emit(<span class="string">'notificacao'</span>, notificar);</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Neste código:<br>Criamos um Middleware que confere <strong>se</strong> o parâmetro notificacao veio preenchido (req.query.notificacao). <strong>Senão</strong>, define a <code>var notificar</code> como string vazia.</p><p>Aí vemos:<br><strong>se</strong> <code>notificar</code> NÃO for uma string vazia, usamos <code>io.emit</code> para enviar ela (variável notificar). Isso será feito disparando um evento que demos o nome de <code>notificacao</code>.E daí chamamos o <code>next()</code>.<br><strong>Senão</strong> chamamos o <code>next()</code> sem fazer nada.</p><h3 id="Injetando-o-Middleware-em-nossa-rota"><a href="#Injetando-o-Middleware-em-nossa-rota" class="headerlink" title="Injetando o Middleware em nossa rota"></a>Injetando o Middleware em nossa rota</h3><p>Basta inserir a variável na qual declaramos o middleware como primeiro parâmetro do nosso verbo <code>get()</code>, ou ativá-lo com o <code>app.use()</code>. Qual você prefere?  (To brincando, quem manda aqui sou eu ;P)</p><figure class="highlight javascript"><figcaption><span>[server.js][insira logo antes app.use('/api', router)]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line">app.use(emitir);</span><br><span class="line">app.use(<span class="string">'/api'</span>, router);</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Pimba! Agora em qualquer rota nosso Middleware vai conferir se tem algo pra notificar, e o fará.</p><h3 id="Recebendo-as-notificacoes"><a href="#Recebendo-as-notificacoes" class="headerlink" title="Recebendo as notificações."></a>Recebendo as notificações.</h3><p>Legal, agora precisamos receber essas notificações de alguma forma. A <em>grande vibe</em> dessa história é que não precisamos estar puxando arquivos do servidor para que funcione, então criaremos um arquivo html que vai representar o client.</p><p>O cliente poderia ser um app Web, ou um App Desktop, ou mesmo Mobile, enfim… Não importa. Crie o arquivo <strong><code>recebedor.html</code></strong> conforme abaixo:</p><figure class="highlight html"><figcaption><span>[recebedor.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"pt_BR"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Recebedor de notificações<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:4555/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> socket = io(<span class="string">'http://localhost:4555'</span>, &#123;<span class="attr">transports</span>: [<span class="string">'websocket'</span>, <span class="string">'polling'</span>, <span class="string">'flashsocket'</span>]&#125;);</span></span><br><span class="line"><span class="javascript">  socket.on(<span class="string">'notificacao'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'messagebox'</span>).innerHTML = data;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"messagebox"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Aí é importante notarmos:</p><ol><li><p>Carregamos socket.io.js pela url: <code>nossoservidor:porta/socket.io/socket.io.js</code>.<br>É possível carregar um arquivo direto, ou até por CDN, mas dessa forma garantimos que é a mesma versão utilizada no servidor, bem como que está funcionando a conexão.</p></li><li><p><code>var socket = io(&#39;http://localhost:4555&#39;, {transports: [&#39;websocket&#39;, &#39;polling&#39;, &#39;flashsocket&#39;]});</code> O primeiro parâmetro é a URL do servidor + porta em que o socket.io está emitindo. O segundo, uma config que define a prioridade de protocolos utilizados, sendo <code>websocket</code> primeiro.<br>Isso evita erros terrível de CORS com socket.io</p></li><li><p><code>socket.on(&#39;notificacao&#39;, function (data) {}</code> adiciona um eventListener para o evento <code>notificacao</code> que definimos lá no server.js com <code>io.emit(&#39;notificacao&#39;, notificar);</code>.<br>Ao receber este evento, ele executa o <code>function(data){}</code>, sendo data o conteúdo recebido.</p></li></ol><h3 id="Testando-tudo"><a href="#Testando-tudo" class="headerlink" title="Testando tudo"></a>Testando tudo</h3><ol><li><p>Execute o servidor</p></li><li><p>Abra o arquivo recebedor.html</p></li><li><p>Abra outra janela e acesse: <a href="http://localhost:8080/api/notificar?notificacao=&quot;isso" target="_blank" rel="noopener">http://localhost:8080/api/notificar?notificacao=&quot;isso</a> é uma notificação em tempo real!”</p></li><li><p>volte para a janela do recebedor.html e veja como foi atualizado o conteúdo :)</p></li></ol><p>Caso queira, o código-fonte deste teste está <a href="https://github.com/romuloctba/blog-post-server-com-push-socket-io" target="_blank" rel="noopener">neste repositório do github</a></p><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>O socket.io é uma coisinha linda do papai pra criar interações em tempo real. Agora imagine que podemos instalar um server NodeJs em uma placa de circuito, tipo a Arduíno, e criar interações em tempo real entre aparelhos diversos e terminais?</p><p>No nosso exemplo aqui, falamos apenas de Push Notifications. Essa lógica será usada para notificar o admin de um sistema quando houver novos pedidos, e notificar o cliente quando houver alguma novidade no pedido dele. :)</p><p>Éi, mas vem cá… Conta pra mim, o que você já aprontou com Socket.io?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/push-notifications-com-socket-io-node-js-express.jpg&quot; alt=&quot;push-notifications-com-socket-io-node-js-express&quot;&gt;&lt;/p&gt;
&lt;p&gt;Quando al
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://rcdevlabs.github.io/tags/javascript/"/>
    
      <category term="Socket.io" scheme="http://rcdevlabs.github.io/tags/socket-io/"/>
    
      <category term="NodeJs" scheme="http://rcdevlabs.github.io/tags/nodejs/"/>
    
      <category term="Realtime" scheme="http://rcdevlabs.github.io/tags/realtime/"/>
    
  </entry>
  
  <entry>
    <title>O que é um middleware no ExpressJs e pra que serve? (AKA: Como interceptar requisições)</title>
    <link href="http://rcdevlabs.github.io/2015/02/10/o-que-e-um-middleware-e-pra-que-serve-aka-como-interceptar-requisicoes/"/>
    <id>http://rcdevlabs.github.io/2015/02/10/o-que-e-um-middleware-e-pra-que-serve-aka-como-interceptar-requisicoes/</id>
    <published>2015-02-11T00:04:05.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/oque-e-middleware-como-usar-para-que-serve-nodejs-express.jpg" alt="oque-e-middleware-como-usar-para-que-serve-nodejs-express"></p><p>Se você começou a ‘brincar’ com ExpressJs à pouco tempo, com certeza já esbarrou com a expressão <em>Middleware</em>.</p><h3 id="Oque-e-MiddleWare-Para-que-serve-Como-faco-um-Onde-posso-usar"><a href="#Oque-e-MiddleWare-Para-que-serve-Como-faco-um-Onde-posso-usar" class="headerlink" title="Oque é MiddleWare? Para que serve? Como faço um? Onde posso usar?"></a>Oque é MiddleWare? Para que serve? Como faço um? Onde posso usar?</h3><blockquote><p>Middleware é uma função com acesso ao objeto de requisição (req), de resposta (res), e ao próximo middleware no ciclo de requisição-resposta de uma aplicação Express.</p><footer><strong>ExpressJs Docs</strong><cite><a href="http://expressjs.com/guide/using-middleware.html#middleware.application" target="_blank" rel="noopener">expressjs.com/guide/using-middleware.html#middleware.application</a></cite></footer></blockquote><h4 id="A-palavra-‘middleware’-significa-mais-ou-menos-‘coisa-para-usar-entre-no-meio-de-duas-coisas’"><a href="#A-palavra-‘middleware’-significa-mais-ou-menos-‘coisa-para-usar-entre-no-meio-de-duas-coisas’" class="headerlink" title="A palavra ‘middleware’ significa, mais ou menos, ‘coisa para usar entre/no meio de duas coisas’."></a>A palavra ‘middleware’ significa, mais ou menos, ‘coisa para usar entre/no meio de duas coisas’.</h4><h2 id="Vamos-brincar"><a href="#Vamos-brincar" class="headerlink" title="Vamos brincar?"></a>Vamos brincar?</h2><p>Preparei uma pequena aplicação pra testarmos o uso de middlewear. Você precisa ter apenas o NodeJs instalado, e seguir os passos abaixo. Node que sempre vai ter o nome do arquivo no começo da caixinha de código.</p><p>O código final do exemplo está disponível <a href="https://github.com/romuloctba/exemplo-middleware-blog" target="_blank" rel="noopener">neste repositório do github</a>, mas recomendo seguir o passo-a-passo.</p><p>Ok, vamos lá. Primeiro, inicie uma aplicação com node e express, pode usar este package.json (crie uma pasta, um arquivo com o nome package.json , com o conteúdo abaixo):</p><figure class="highlight javascript"><figcaption><span>[package.json ]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"usando-middleware"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"server.js"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"body-parser"</span>: <span class="string">"^1.11.0"</span>,</span><br><span class="line">    <span class="string">"express"</span>: <span class="string">"^4.11.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Agora instale as dependências com, navegando até sua pasta pelo terminal e rodando…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="Estrutura-Basica"><a href="#Estrutura-Basica" class="headerlink" title="Estrutura Básica"></a>Estrutura Básica</h3><p>Crie um arquivo <strong>server.js</strong> na mesma pasta do package.json.</p><figure class="highlight javascript"><figcaption><span>[server.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line">  , app = express()</span><br><span class="line">  , bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line">  app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">  app.use(bodyParser.json());</span><br><span class="line">  <span class="keyword">var</span> port = process.env.PORT || <span class="number">8080</span>;</span><br><span class="line">  <span class="keyword">var</span> router = express.Router();</span><br><span class="line">  <span class="comment">/* Vamos colocar nosso Middleware aqui, depois */</span></span><br><span class="line">  app.use(<span class="string">'/'</span>, router);</span><br><span class="line">  router.route(<span class="string">'/teste'</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">      res.json(&#123;<span class="attr">message</span>: <span class="string">"teste ok!!"</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  app.listen(port);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'conectado a porta '</span> + port);</span><br></pre></td></tr></table></figure><p>Agora execute, com:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server</span><br></pre></td></tr></table></figure><p>Acessando <a href="http://localhost:8080/teste" target="_blank" rel="noopener">http://localhost:8080/teste</a>, você deve ver o retorno.<br>Essa é nossa aplicação básica, com a rota /teste usando o verbo .get()</p><h3 id="Criando-seu-primeiro-Middleware"><a href="#Criando-seu-primeiro-Middleware" class="headerlink" title="Criando seu primeiro Middleware:"></a>Criando seu primeiro Middleware:</h3><p>Agora, vamos criar o Middleware. Nada mais é do que um função com 3 párâmetros: <strong><code>function(req, res, next){}</code></strong>. Vamos criar em uma variável para ficar fácil de chamar depois.</p><p>Insira no server.js:</p><figure class="highlight javascript"><figcaption><span>[server.js]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="comment">/* Vamos colocar nosso Middleware aqui, depois */</span></span><br><span class="line"><span class="keyword">var</span> noMeio = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Algo acontecendo: MIDLEWARE'</span>)</span><br><span class="line">    next();</span><br><span class="line">  &#125;;</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Se ligue no <strong><code>next()</code></strong>. Note que ele é o terceiro parâmetro da função. Faz muito sentido: ‘faça isso, isso e isso, e vá pra próxima( )’. </p><h3 id="Como-evitar-travar-o-carregamento-da-proxima-funcao-rota"><a href="#Como-evitar-travar-o-carregamento-da-proxima-funcao-rota" class="headerlink" title="Como evitar (travar) o carregamento da próxima função/rota?"></a>Como evitar (travar) o carregamento da próxima função/rota?</h3><p><strong>Se você quiser travar o carregamento, basta não chamar o next</strong>.</p><p>Isso é útil, por exemplo, pra bloquear acesso. Por exemplo:</p><p>Para testar se o usuário está adimplente, antes de exibir conteúdo, basta utilizar o middleware nas rotas protegidas, puxar o <code>req.user</code> e conferir no DB quando foi o último pagamento. </p><p><strong>Se</strong> estiver em dia, chamo o <code>next()</code>, <strong>senão</strong>: <code>res.json({error: &#39;usuário inadimplente.&#39;})</code>, pra isso, basta saber como…</p><h2 id="Como-utilizar-Middleware-em-rotas-do-ExpressJS"><a href="#Como-utilizar-Middleware-em-rotas-do-ExpressJS" class="headerlink" title="Como utilizar Middleware em rotas do ExpressJS"></a>Como utilizar Middleware em rotas do ExpressJS</h2><p>Para utilizar o middleware em uma rota, basta inserir ele como o primeiro parâmetro da sua função verbo(), ou seja: get(), post(), etc. A ação da rota vem como segundo parâmetro, edite o server.js como no trecho abaixo e confira:</p><figure class="highlight javascript"><figcaption><span>[server.js][Edite a rota, inserindo o Middleware como primeiro parâmetro]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line">  router.route(<span class="string">'/teste'</span>)</span><br><span class="line">    .get(noMeio, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">      res.json(&#123;<span class="attr">message</span>: <span class="string">"teste ok!!"</span>&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Note que inserimos a variável <code>noMeio</code>, que contém nosso Midware, como primeiro parâmetro do verbo .get().</p><p>Agora, execute <code>node server</code> novamente. Acesse <code>http://localhost:8080/teste</code>**. Viu, no console??</p><h2 id="Um-exemplo-de-uso-de-Middleware-mais-maneiro"><a href="#Um-exemplo-de-uso-de-Middleware-mais-maneiro" class="headerlink" title="Um exemplo de uso de Middleware mais maneiro"></a>Um exemplo de uso de Middleware mais maneiro</h2><p>Pra sentir um pouco mais das possibilidades, vamos editar nosso middleware para fazer algo mais útil, travar requisições de quem não tiver a senha.</p><figure class="highlight javascript"><figcaption><span>[server.js][Altere o middleware noMeio]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="comment">/* Vamos colocar nosso Middleware aqui, depois */</span></span><br><span class="line"><span class="keyword">var</span> noMeio = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> senha = req.query.senha || <span class="string">''</span>; </span><br><span class="line">  <span class="keyword">if</span>(senha == <span class="string">'senhasecreta'</span>)&#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.status(<span class="number">401</span>).json(&#123;</span><br><span class="line">      aviso: <span class="string">'Parado aí, meliante!'</span>,</span><br><span class="line">      message: <span class="string">'Você não possui a senha, não pode entrar.'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>Note que o Middleware recebe tudo que foi enviado pelo objeto <strong><code>req</code></strong>, inclusive os parâmetros de url.</p><p>Quando dizemos <strong><code>req.query.senha</code></strong>, estamos referenciando o parâmetro de url <strong><code>?senha</code></strong></p><p>Acesse <a href="http://localhost:8080/teste" target="_blank" rel="noopener">http://localhost:8080/teste</a>. Viu?</p><p>Agora adicione <strong><code>?senha=senhasecreta</code></strong>, ou seja: <a href="http://localhost:8080/teste?senha=senhasecreta" target="_blank" rel="noopener">http://localhost:8080/teste?senha=senhasecreta</a></p><p>Háaaa! Que legal :D</p><p><em>Lembrando que se você autenticar sua aplicação usando este método, você merece ser hackeado. Isso é só um exemplo, o ideal seria encriptar a senha ou utilizar Json Web Token.</em></p><p>O código do exemplo está disponível <a href="https://github.com/romuloctba/exemplo-middleware-blog" target="_blank" rel="noopener">neste repositório do github</a></p><h3 id="Tipos-de-Middleware"><a href="#Tipos-de-Middleware" class="headerlink" title="Tipos de Middleware"></a>Tipos de Middleware</h3><p>Viu, é importante lembrar que usar middleware para interceptar rotas não é a única forma, existem as seguintes maneiras de utiliza-los:</p><ul><li>Nível Aplicação</li><li>Nível Router</li><li><del>Middleware Nativo</del></li><li>Middleware de terceiros</li></ul><h3 id="Middleware-Nivel-Aplicacao"><a href="#Middleware-Nivel-Aplicacao" class="headerlink" title="Middleware Nível Aplicação:"></a>Middleware Nível Aplicação:</h3><figure class="highlight javascript"><figcaption><span>[ Midleware nível aplicação ] [Será executado em toda requisição ]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hórário:'</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Middleware de nível aplicação é executado em todas as requisições.<br>No exemplo acima, poderíamos implementar um bloqueio por horário, que estaria disponível em todas as rotas, automaticamente.</p><h3 id="Nivel-Router"><a href="#Nivel-Router" class="headerlink" title="Nível Router"></a>Nível Router</h3><p>É o exemplo principal deste post, onde o middleware é executado antes de carregar a resposta das rotas. Para isso, ele é declarado no verbo.</p><h3 id="Middleware-Nativo-e-de-Terceiros"><a href="#Middleware-Nativo-e-de-Terceiros" class="headerlink" title="Middleware Nativo e de Terceiros"></a>Middleware Nativo e de Terceiros</h3><p>Na listagem até risquei middleware Nativo. Fiz isso pois o Express não tem mais isso. Os módulos agora são todos de terceiros, como o body-parser, por exemplo - que antes vinha nativo.</p><p>Aliás, <strong>a maioria das coisas do express é feito por via de middlewares</strong>, dos parsers até o router. Aliás, segundo a própria documentação do Express.js: </p><blockquote><p>Uma aplicação Express é essencialmente uma série de chamadas de Middleware.</p></blockquote><hr><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão:"></a>Conclusão:</h2><p>Middlewares são funções intermediárias e reaproveitáveis, inseridas <strong><em>no meio</em></strong> da requisição e da resposta.</p><p>Para criar um middleware basta inserir uma função com 3 parametros, sendo o primeiro o objeto da requisição, o segundo o objeto de resposta e o terceiro o callback para continuar o fluxo: <code>function(req, res, next){}</code></p><p>Eles podem ser à nível APP ou nível de Rotas.</p><p>Viu como é fácil?<br>Eaí, tem alguma dica, ou ponto que esqueci de mencionar? Poste nos comentários!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/oque-e-middleware-como-usar-para-que-serve-nodejs-express.jpg&quot; alt=&quot;oque-e-middleware-como-usar-para-que-serve-nodejs-express&quot;
      
    
    </summary>
    
    
      <category term="NodeJs" scheme="http://rcdevlabs.github.io/tags/nodejs/"/>
    
      <category term="ExpressJs" scheme="http://rcdevlabs.github.io/tags/expressjs/"/>
    
      <category term="Rapidinha" scheme="http://rcdevlabs.github.io/tags/rapidinha/"/>
    
  </entry>
  
  <entry>
    <title>Oque é o Node GYP e porque do erro failPythonVersion</title>
    <link href="http://rcdevlabs.github.io/2015/02/10/oque-e-o-node-gyp-e-porque-do-erro-failpythonversion/"/>
    <id>http://rcdevlabs.github.io/2015/02/10/oque-e-o-node-gyp-e-porque-do-erro-failpythonversion/</id>
    <published>2015-02-10T11:28:23.000Z</published>
    <updated>2022-02-09T04:05:07.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/erro-de-node-gyp-python.jpg" alt="Node GYP e porque do erro failPythonVersion"></p><p>Para quem desenvolve em ambiente <a href="http://nodejs.org" target="_blank" rel="noopener">NodeJs</a>, talvez já conheça, ou tenha se deparado com o erro de node GYP mais ou menos assim:<br><figure class="highlight bash"><figcaption><span>[Erro do Node-GYP failPythonVersion]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gyp ERR! configure error                              </span><br><span class="line">gyp ERR! stack Error: Python executable <span class="string">"python"</span> is v3.1,</span><br><span class="line"><span class="built_in">which</span> is not supported by gyp.                    </span><br><span class="line">gyp ERR! stack You can pass the --python switch to point</span><br><span class="line"> to Python &gt;= v2.5.0 &amp; &lt; 3.0.0.                       </span><br><span class="line">gyp ERR! stack     at failPythonVersion (...)                                      </span><br><span class="line">gyp ERR! stack    </span><br><span class="line">[...]                                 </span><br><span class="line">npm ERR! error rolling back   errno: 50,              </span><br><span class="line">npm ERR! error rolling back   code: <span class="string">'EPERM'</span>,          </span><br><span class="line">npm ERR! error rolling back   path: <span class="string">'path-do-projeto\\node_modules\\nome-do-modulo\\Makefile                                               </span></span><br><span class="line"><span class="string">npm ERR! not ok code 0</span></span><br></pre></td></tr></table></figure></p><h3 id="Ok-mas-OQUE-e-o-Node-GYP"><a href="#Ok-mas-OQUE-e-o-Node-GYP" class="headerlink" title="Ok, mas OQUE é o Node-GYP?"></a>Ok, mas OQUE é o Node-GYP?</h3><p>O <a href="https://github.com/TooTallNate/node-gyp" target="_blank" rel="noopener">Node-GYP</a> é uma ferramenta de command line para compilar addons nativos (em C/C++) para Node.JS. </p><p>A maioria das pessoas nem sabe que ele existe, até dar pau em algum módulo :P</p><h3 id="E-por-que-da-o-erro-failPythonVersion-Como-resolver"><a href="#E-por-que-da-o-erro-failPythonVersion-Como-resolver" class="headerlink" title="E por que dá o erro failPythonVersion? Como resolver?"></a>E por que dá o erro failPythonVersion? Como resolver?</h3><p>Bom, o erro é autoexplicativo: <strong>Python executable “python” is v3.1,<br>which is not supported by gyp. You can pass the –python switch to point<br>to Python &gt;= v2.5.0 &amp; &lt; 3.0.0.</strong> ou seja: o problema está na <em>versão do Python</em>. O GYP só aceita PIP <em>menor que</em> 3.0.0.</p><p>No Readme.md do projeto, vemos que a versão indicada é a 2.7. Portanto, basta ir até a <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">página de download do Python</a> e baixar a versão 2.7.9.</p><p>Durante a instalação, confira se ‘Add python var to PATH’ está marcado, caso use Windows.</p><p>Se você precisar do Python 3.x.x, você pode setar o caminho do 2.7, tendo os 2 instalados!</p><p>Basta rodar </p><figure class="highlight bash"><figcaption><span>[Setando Python 2.7.9 para Node-GYP e NPM]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> python caminho/<span class="keyword">do</span>/python-2.7.9</span><br></pre></td></tr></table></figure><p>E pronto :)</p><p>Espero ter ajudado.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/erro-de-node-gyp-python.jpg&quot; alt=&quot;Node GYP e porque do erro failPythonVersion&quot;&gt;&lt;/p&gt;
&lt;p&gt;Para quem desenvolve em ambiente &lt;a hre
      
    
    </summary>
    
      <category term="NodeJS" scheme="http://rcdevlabs.github.io/categories/nodejs/"/>
    
      <category term="Como Fazer" scheme="http://rcdevlabs.github.io/categories/nodejs/como-fazer/"/>
    
    
      <category term="erros" scheme="http://rcdevlabs.github.io/tags/erros/"/>
    
      <category term="nodejs" scheme="http://rcdevlabs.github.io/tags/nodejs/"/>
    
      <category term="python" scheme="http://rcdevlabs.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Como você serve seu conteúdo? Que tal usar um Static Generator?</title>
    <link href="http://rcdevlabs.github.io/2015/02/08/Como-voce-serve-seu-conteudo/"/>
    <id>http://rcdevlabs.github.io/2015/02/08/Como-voce-serve-seu-conteudo/</id>
    <published>2015-02-09T01:57:57.000Z</published>
    <updated>2022-02-09T04:05:07.450Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://rcdevlabs.github.io/servir-conteudo-estatico.jpg" alt="Servir seu conteúdo"></p><p>Para o cliente é facil! Creio que a maior parte dos desenvolvedores diria “usar um CMS”.</p><p>Seja <del>com Wordpress</del> com um CMS já existente, ou um criado especificamente para o projeto, os <em>Sistemas de Gerenciamento de Conteúdo</em> são a escolha óbvia para grande parte dos clientes, em sites e blogs diversos.</p><h3 id="Mas-e-quando-e-a-sua-vez"><a href="#Mas-e-quando-e-a-sua-vez" class="headerlink" title="Mas e quando é a sua vez?"></a>Mas e quando é a sua vez?</h3><p>Estou criando este blog por <del>culpa</del> influência do <a href="blog.da2k.com.br">@fdaciuk</a>, que começou o #1postperday, que tá sendo um sucesso - e com muito conteúdo de primeira!</p><p>Eu não <del>me aguentei</del> quis ficar de fora, e estou criando - finalmente - este que estás lendo. Para isso, levei em conta:</p><ul><li><p><strong>Necessidade</strong>: Gerenciar postagens, conteúdo e visual de um Blog</p></li><li><p><strong>Requisitos</strong>: Fácil e rápido de prototipar e lançar, porém flexível o suficiente para receber  funcionalidades e alterações de qualquer nível</p></li><li><p>E <strong>o mais importante</strong>:  não precisa ser à nível de usuário final</p></li></ul><p>Após <del>a dica do @fdaciuk</del> considerar diversas opções: de Blogger à Ghost, passando por WordPress, a escolha lógica acabou sendo <strong>usar gerador estático</strong></p><hr><h3 id="Geradores-Estaticos-Praticidade-leveza-e-dificuldade-na-medida-certa"><a href="#Geradores-Estaticos-Praticidade-leveza-e-dificuldade-na-medida-certa" class="headerlink" title="Geradores Estáticos: Praticidade, leveza e difículdade na medida certa"></a>Geradores Estáticos: Praticidade, leveza e difículdade na medida certa</h3><p>Pois é. Além da mão de obra para customizar e infra para usar um CMS (DB, interpretador e servidor), usar um gerador estático tem algumas vantagens:</p><ul><li><p><strong>Super Light</strong>: Os arquivos são processados apenas uma vez, e não renderizados no servidor em cada acesso</p></li><li><p><strong>Sem Bancos de Dados</strong>: Sem DBs, a segurança é mais tranquila, e a economia em processamento e infra, novamente, é total.</p></li><li><p><strong>Escrever com MarkDown</strong>: ‘Dificuldade na medida certa’, inclui escrever em .md. Após pegar <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="noopener">as manhas</a>, fica tudo tão prático, e você pode utilizar HTML no meio à qualquer momento ^^y</p></li><li><p><strong>Somente o necessário</strong>: Sem aquele monte de funcionalidades que você nem vai precisar.</p></li><li><p><strong>Build Fácil, Depoy mais ainda</strong>: Você pode integrar seu gerador para fazer <code>deploy</code> diretamente no seu servidor, ou no Github (como estou fazendo ), diretamente do seu terminal :)</p></li><li><p><strong>Divertido para devs</strong>: Pra gente, pode ser bemm mais legal que qualquer painel de controle</p></li><li><p><strong>Use o que quiser</strong>: Você gosta de Jade? beleza. Curte EJS? Problema seu, fique à vontade. Que tal usar Stylus? Ou Prefere Sass? Não entendeu nada? fica tranquilo que dá pra usar css e html simples também.</p></li><li><p><strong>Fácil de customizar -</strong> na medida certa: Cada post fica em um arquivo, apenas com seu conteúdo. O Tema é sempre modular, de pouco markup e rápido de editar.</p></li></ul><hr><h3 id="Alguns-Geradores-Estaticos"><a href="#Alguns-Geradores-Estaticos" class="headerlink" title="Alguns Geradores Estáticos"></a>Alguns Geradores Estáticos</h3><p>Temos diversas opções disponíveis, vou citar algumas e suas principais características:</p><ul><li><p><a href="http://hexo.io" target="_blank" rel="noopener">Hexo.io</a> - Este em que vos escrevo ;) Roda em NodeJs. Simples de usar, suporta plugins e oferece facílima customização</p></li><li><p><a href="http://hammerformac.com/" target="_blank" rel="noopener">Hammer</a> - Exclusivo para Mac - e pago - o Hammer tem algumas funções interessantes como includes e tags especiais</p></li><li><p><a href="http://jekyllrb.com/" target="_blank" rel="noopener">Jerkyll</a> - Roda em Ruby, suporte à diversas funções como filtros e processadores. É o gerador ‘Oficial’ do GitHub</p></li></ul><h3 id="A-minha-opcao-Hexo-io"><a href="#A-minha-opcao-Hexo-io" class="headerlink" title="A minha opção: Hexo.io"></a>A minha opção: Hexo.io</h3><p>####<strong>Instalação</strong></p><p>Por <del>dica do Daciuk</del> rodar em NodeJs e ja ter usado antes, optei pelo Hexo.io. É bem tranquilo de instalar. Tendo o Node, basta:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">hexo init **nome-da-pasta**</span><br></pre></td></tr></table></figure><p>E toda estrutura básica é gerada.<br>Após editar as informações (Nome, autor, URL do site, etc) no arquivo <code>_config.yml</code>, podemos criar novo conteúdo, por exemplo:</p><p>####<strong>Criando conteúdo:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;tipo&gt; <span class="string">"Criando conteúdo com Hexo.io"</span></span><br></pre></td></tr></table></figure><p>O parâmetro <code>&lt;tipo&gt;</code> é qualquer um dos disponíveis (e você pode criar novos facilmente!) na pasta <code>/scaffolds</code>. O padrão é <code>post</code>.</p><p>O <code>hexo new post &quot;Titulo do post&quot;</code> irá criar um arquivo <em>.md</em> na pasta <code>/source/_posts</code>, onde o texto é inserido.</p><p>####<strong>Gerenciando temas</strong></p><p>Arquivos de tema ficam na pasta <code>/themes</code> e sua lógica é bem simples e modular. Analisando com calma o código do tema padrão fica fácil entender. E existem vários temas prontos - em sua maioria, chineses - para Hexo, que podem ser instalados via <code>git clone</code> e manterem-se atualizados, também, por controle de versão.</p><p>####<strong>Gerando prévias e arquivos estáticos</strong><br>O comando <code>hexo server</code> deixará o blog disponível no <code>localhost:4000</code></p><p>Para gerar os arquivos estáticos, pode-se usar o <code>hexo generate</code>, para limpar o cache, <code>hexo clean</code>.</p><p>####<strong>Deploy automático</strong></p><p>No próprio arquivo <code>_config.yml</code> podemos configurar como fazer o deploy. Para o github, por exemplo fica assim:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/SEUNOME/SEUNOME.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>Lembrando que o repositório deve seguir os <a href="http://blog.da2k.com.br/2015/02/05/segredos-do-github-hospedando-seu-site-no-github/" target="_blank" rel="noopener">padrões necessários</a> para gh-pages.</p><p>E tem <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">muitas outras opções</a> já prontinhas para deploy, como Heroku, OpenShift, Rsync…</p><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>Geradores estáticos não estão nem perto de serem uma opção indicável à leigos, porém podem  trazer imensa economia de tempo e facilitar a vida do Desenvolvedor que busca ter um Blog, ou um site rápido de divulgação para alguma Lib ou plugin. Isso tudo sem perder a capacidade d gerenciar o conteúdo, personalizar e até escrever offline.</p><p>Sinto uma elegância e fluidez, proporcionada pelo carregamento puro de arquivos html. A experiência do usuário é clara, fica bem mais rápido.</p><p>Bom, é isso. E por aqui inauguro o <strong>RcDevLabs</strong>, gerado comHexo.io e hospedado no Github Pages.</p><p>Um grande abraço, e até a próxima!</p><p>Segue aí, curte que curto de volta. troco like. #sqn hehe</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://rcdevlabs.github.io/servir-conteudo-estatico.jpg&quot; alt=&quot;Servir seu conteúdo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Para o cliente é facil! Creio que a 
      
    
    </summary>
    
    
      <category term="Static Generators" scheme="http://rcdevlabs.github.io/tags/static-generators/"/>
    
  </entry>
  
</feed>
